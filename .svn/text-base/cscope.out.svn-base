cscope 15 $HOME/abc -q 0000001674 0000165255
	@boot/boot.S

1 .
	gcode16


2 .
£t
 
	gBa£OfSèck
, 0x7c00

3 .
£t
 
	gBa£OfLﬂdî
, 0x9000

4 .
£t
 
	gOff£tOfLﬂdî
, 0x0100

6 .
ãxt


8 
jmp
 
LABEL_START


9 
	gn›


10 
	~"Át12hdr.h
"

12 
	gLABEL_START
:

13 
mov
 %
cs
,%
ax


14 
	gmov
 %
	gax
,%
ds


15 
	gmov
 %
	gax
,%
es


16 
	gmov
 %
	gax
,%
ss


17 
mov
 
	g$Ba£OfSèck
, %
•


20 
mov
 
	g$0x0600
,%
ax


21 
mov
 
	g$0x0700
,%
bx


22 
mov
 
	g$0
,%
cx


23 
mov
 
	g$0x184f
,%
dx


24 
$0x10


27 
mov
 
	g$0
,%
dh


28 
ˇŒ
 
Di•Så


31 
	gx‹
 %
	gah
,%
ah


32 
	gx‹
 %
	gdl
,%
dl


33 
$0x13


36 
movw
 
	g$SecNoOfRoŸDú
, (
	gwSe˘‹No
)

39 
	gLABEL_SEARCH_IN_ROOT_DIR_BEGIN
:

40 
cmpw
 
$0
,(
	gwRoŸDúSizeF‹Lo›
)

41 
jz
 
LABEL_NO_LOADERBIN


42 
	$decw
 (
wRoŸDúSizeF‹Lo›
)

43 
mov
 
$Ba£OfLﬂdî
,%
ax


44 
mov
 %
ax
,%
es


45 
mov
 
$Off£tOfLﬂdî
,%
bx


46 
	`mov
 (
wSe˘‹No
),%
ax


47 
mov
 
$1
,%
˛


48 
ˇŒ
 
RódSe˘‹


49 
mov
 
$LﬂdîFûeName
,%
si


50 
mov
 
$Off£tOfLﬂdî
,%
di


51 
˛d


52 
mov
 
$0x10
,%
dx


54 
LABEL_SEARCH_FOR_LOADERBIN
:

55 
cmp
 
$0
,%
dx


56 
jz
 
LABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR


57 
dec
 %
dx


58 
mov
 
$11
,%
cx


60 
LABEL_CMP_FILENAME
:

61 
cmp
 
$0
,%
cx


62 
jz
 
LABEL_FILENAME_FOUND


63 
dec
 %
cx


64 
lodsb


65 
cmp
 %
es
:(%
di
),%
Æ


66 
jz
 
LABEL_GO_ON


67 
jmp
 
LABEL_DIFFERENT


69 
LABEL_GO_ON
:

70 
öc
 %
di


71 
jmp
 
LABEL_CMP_FILENAME


73 
LABEL_DIFFERENT
:

74 
™d
 
$0xf„0
,%
di


75 
add
 
$0x20
,%
di


76 
mov
 
$LﬂdîFûeName
,%
si


77 
jmp
 
LABEL_SEARCH_FOR_LOADERBIN


79 
LABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR
:

80 
addw
 
$1
,(
wSe˘‹No
)

81 
jmp
 
LABEL_SEARCH_IN_ROOT_DIR_BEGIN


84 
LABEL_NO_LOADERBIN
:

85 
mov
 
$2
,%
dh


86 
ˇŒ
 
Di•Så


87 
jmp
 .

90 
LABEL_FILENAME_FOUND
:

91 
mov
 
$RoŸDúSe˘‹s
,%
ax


92 
™d
 
$0xf„0
,%
di


93 
add
 
$0x1a
,%
di


94 
mov
 %
es
:(%
di
),%
cx


95 
push
 %
cx


96 
add
 %
ax
,%
cx


97 
add
 
$DñèSecNo
,%
cx


98 
mov
 
$Ba£OfLﬂdî
,%
ax


99 
mov
 %
ax
,%
es


100 
mov
 
$Off£tOfLﬂdî
,%
bx


101 
mov
 %
cx
,%
ax


104 
LABEL_GOON_LOADING_FILE
:

105 
push
 %
ax


106 
push
 %
bx


107 
mov
 
$0x0e
,%
ah


108 
mov
 
$
'.',%
Æ


109 
mov
 
$0x0f
,%
bl


110 
$0x10


111 
p›
 %
bx


112 
p›
 %
ax


114 
mov
 
$1
,%
˛


115 
ˇŒ
 
RódSe˘‹


116 
p›
 %
ax


117 
ˇŒ
 
GëFATE¡ry


118 
cmp
 
$0x0fff
,%
ax


119 
jz
 
LABEL_FILE_LOADED


120 
push
 %
ax


121 
mov
 
$RoŸDúSe˘‹s
,%
dx


122 
add
 %
dx
,%
ax


123 
add
 
$DñèSecNo
,%
ax


124 
	`add
 (
BPB_BytsPîSec
),%
bx


125 
jmp
 
LABEL_GOON_LOADING_FILE


127 
LABEL_FILE_LOADED
:

128 
mov
 
$1
,%
dh


129 
ˇŒ
 
Di•Så


131 
jmp
 
$Ba£OfLﬂdî
,
$Off£tOfLﬂdî


135 
wRoŸDúSizeF‹Lo›
: .2b
yã
 
RoŸDúSe˘‹s


136 
wSe˘‹No
: .2b
yã
 0

137 
bOdd
: .
byã
 0

139 
LﬂdîFûeName
: .
asciz
 "LOADER BIN"

140 .
£t
 
MesßgeLígth
,9

141 
BoŸMesßge
: .
ascii
 "Booting**"

142 
Mesßge1
: .
ascii
 "Loaded in"

143 
Mesßge2
: .
ascii
 "No LOADER"

148 
Di•Så
:

149 
mov
 
$MesßgeLígth
, %
ax


150 
mul
 %
dh


151 
add
 
$BoŸMesßge
,%
ax


152 
mov
 %
ax
,%
bp


153 
mov
 %
ds
,%
ax


154 
mov
 %
ax
,%
es


155 
mov
 
$MesßgeLígth
,%
cx


156 
mov
 
$0x1301
,%
ax


157 
mov
 
$0x07
,%
bx


158 
mov
 
$0
,%
dl


159 
$0x10


160 
ªt


167 
RódSe˘‹
:

168 
push
 %
ebp


169 
mov
 %
e•
,%
ebp


170 
sub
 
$2
,%
e•


171 
mov
 %
˛
,-2(%
ebp
)

172 
push
 %
bx


173 
	`mov
 (
BPB_SecPîTrk
), %
bl


174 
div
 %
bl


175 
öc
 %
ah


176 
mov
 %
ah
,%
˛


177 
mov
 %
Æ
,%
dh


178 
shr
 
$1
,%
Æ


179 
mov
 %
Æ
,%
ch


180 
™d
 
$1
,%
dh


181 
p›
 %
bx


185 
	`mov
 (
BS_DrvNum
), %
dl


186 
GoOnRódög
:

187 
mov
 
$2
,%
ah


188 
mov
 -2(%
ebp
),%
Æ


189 
$0x13


190 
jc
 
GoOnRódög


191 
add
 
$2
,%
e•


192 
p›
 %
ebp


193 
ªt


197 
GëFATE¡ry
:

198 
push
 %
es


199 
push
 %
bx


200 
push
 %
ax


201 
mov
 
$Ba£OfLﬂdî
,%
ax


202 
sub
 
$0x0100
,%
ax


203 
mov
 %
ax
,%
es


204 
p›
 %
ax


205 
mov
 
$3
,%
bx


206 
mul
 %
bx


207 
mov
 
$2
,%
bx


208 
div
 %
bx


209 
movb
 %
dl
, (
bOdd
)

211 
LABEL_EVEN
:

212 
x‹
 %
dx
,%dx

213 
	`mov
 (
BPB_BytsPîSec
),%
bx


214 
div
 %
bx


215 
push
 %
dx


216 
mov
 
$0
,%
bx


217 
add
 
$SecNoOfFAT1
,%
ax


218 
mov
 
$2
,%
˛


219 
ˇŒ
 
RódSe˘‹


220 
p›
 %
dx


221 
add
 %
dx
,%
bx


222 
mov
 %
es
:(%
bx
),%
ax


223 
cmpb
 
$0
,(
bOdd
)

224 
jz
 
LABEL_EVEN_2


225 
shr
 
$4
,%
ax


227 
LABEL_EVEN_2
:

228 
™d
 
$0x0fff
,%
ax


230 
LABEL_GET_FAT_ENTRY_OK
:

231 
p›
 %
bx


232 
p›
 %
es


233 
ªt


235 .
‹g
 510

236 .2b
yã
 0xaa55

	@boot/include/fat12hdr.h

1 
	gBS_OEMName
: .
ascii
 "VERY PIG"

3 
BPB_BytsPîSec
: .2b
yã
 512

4 
BPB_SecPîClu°î
: .
byã
 1

5 
BPB_ResvdSecC¡
: .2b
yã
 1

6 
BPB_NumFATs
: .
byã
 2

7 
BPB_RoŸE¡C¡
: .2b
yã
 224

8 
BPB_TŸSec16
: .2b
yã
 2880

9 
BPB_Medü
: .
byã
 0xf0

10 
BPB_FATSz16
: .2b
yã
 9

11 
BPB_SecPîTrk
: .2b
yã
 18

12 
BPB_NumHóds
: .2b
yã
 2

13 
BPB_HiddSec
: .4b
yã
 0

14 
BPB_TŸSec32
: .4b
yã
 0

16 
BS_DrvNum
: .
byã
 0

17 
BS_Re£rved1
: .
byã
 0

18 
BS_BoŸSig
: .
byã
 0x29

19 
BS_VﬁID
: .4b
yã
 0

20 
BS_VﬁLab
: .
ascii
 "mypig 0.01"

21 
BS_FûeSysTy≥
: .
ascii
 "FAT12"

24 .
£t
 
FATs
, 9

25 .
£t
 
	gRoŸDúSe˘‹s
, 14

26 .
£t
 
	gSecNoOfRoŸDú
, 19

27 .
£t
 
	gSecNoOfFAT1
, 1

28 .
£t
 
	gDñèSecNo
, 17

	@boot/include/lib.h

1 
	gDi•AL
:

2 
push
 %
ecx


3 
push
 %
edx


4 
push
 %
edi


6 
mov
 (
dwDi•Pos
),%
edi


7 
mov
 
	g$0x0f
,%
ah


8 
	gmov
 %
	gÆ
,%
dl


9 
shr
 
	g$4
,%
Æ


10 
mov
 
	g$2
,%
	gecx


11 .
	gbegö
:

12 
™d
 
$0b01111
,%
Æ


13 
cmp
 
	g$9
,%
Æ


14 
ja
 
b1


15 
add
 
	g$
'0',%
Æ


16 
jmp
 
b2


17 
	gb1
:

18 
sub
 
$0x0a
,%
Æ


19 
add
 
	g$
'A',%
Æ


20 
	gb2
:

21 
mov
 %
ax
,%
	ggs
:(%
edi
)

22 
add
 
$2
,%
edi


23 
	gmov
 %
	gdl
,%
Æ


24 
	glo›
 .
begö


26 
	gmov
 %
	gedi
,(
	gdwDi•Pos
)

28 
	gp›
 %
edi


29 
	gp›
 %
edx


30 
	gp›
 %
ecx


31 
ªt


34 
	gDi•I¡
:

35 
mov
 4(%
e•
),%
óx


36 
shr
 
	g$24
,%
óx


37 
ˇŒ
 
Di•AL


39 
	gmov
 4(%
	ge•
),%
óx


40 
shr
 
	g$16
,%
óx


41 
ˇŒ
 
Di•AL


43 
	gmov
 4(%
	ge•
),%
óx


44 
shr
 
	g$8
,%
óx


45 
ˇŒ
 
Di•AL


47 
	gmov
 4(%
	ge•
),%
óx


48 
ˇŒ
 
Di•AL


50 
mov
 
	g$0x07
,%
ah


51 
mov
 
	g$
'h',%
Æ


52 
	gpush
 %
edi


53 
mov
 (
dwDi•Pos
),%
edi


54 
	gmov
 %
	gax
,%
	ggs
:(%
edi
)

55 
add
 
$4
,%
edi


56 
	gmov
 %
	gedi
,(
	gdwDi•Pos
)

57 
	gp›
 %
edi


59 
ªt


62 
	gDi•Så
:

63 
push
 %
ebp


64 
mov
 %
e•
,%
ebp


65 
	gpush
 %
ebx


66 
	gpush
 %
esi


67 
	gpush
 %
edi


69 
	gmov
 8(%
	gebp
),%
esi


70 
mov
 (
dwDi•Pos
),%
edi


71 
mov
 
	g$0x0f
,%
ah


72 
	gD1
:

73 
lodsb


74 
ã°
 %
Æ
,%al

75 
jz
 
D2


76 
cmp
 
	g$0x0a
,%
Æ


77 
jnz
 
D3


78 
	gpush
 %
óx


79 
	gmov
 %
	gedi
,%
óx


80 
mov
 
	g$160
,%
bl


81 
	gdiv
 %
bl


82 
™d
 
	g$0xff
,%
óx


83 
	göc
 %
óx


84 
mov
 
	g$160
,%
bl


85 
	gmul
 %
bl


86 
	gmov
 %
	góx
,%
edi


87 
	gp›
 %
óx


88 
jmp
 
D1


89 
	gD3
:

90 
mov
 %
ax
,%
	ggs
:(%
edi
)

91 
add
 
$2
,%
edi


92 
jmp
 
D1


94 
	gD2
:

95 
mov
 %
edi
,(
	gdwDi•Pos
)

96 
	gp›
 %
edi


97 
	gp›
 %
esi


98 
	gp›
 %
ebx


99 
	gp›
 %
ebp


100 
ªt


102 
	gDi•Rëu∫
:

103 
push
 
$szRëu∫


104 
ˇŒ
 
Di•Så


105 
add
 
$4
,%
e•


106 
ªt


108 
	gMemC›y
:

109 
push
 %
ebp


110 
mov
 %
e•
,%
ebp


112 
	gpush
 %
esi


113 
	gpush
 %
edi


114 
	gpush
 %
ecx


116 
	gmov
 8(%
	gebp
),%
edi


117 
	gmov
 12(%
	gebp
),%
esi


118 
	gmov
 16(%
	gebp
),%
	gecx


119 .
	gM1
:

120 
cmp
 
$0
,%
ecx


121 
	gjz
 .
M2


123 
	gmov
 %
	gds
:(%
esi
),%
Æ


124 
	göc
 %
esi


126 
	gmov
 %
	gÆ
,%
	ges
:(%
edi
)

127 
öc
 %
edi


129 
dec
 %
ecx


130 
jmp
 .
M1


131 .
M2
:

133 
mov
 8(%
ebp
),%
óx


135 
	gp›
 %
ecx


136 
	gp›
 %
edi


137 
	gp›
 %
esi


139 
	gmov
 %
	gebp
,%
e•


140 
	gp›
 %
ebp


142 
	gªt


	@boot/include/loader.h

1 .
£t
 
	gBa£OfKî√lFûe
,0x5000

2 .
£t
 
	gOff£tOfKî√lFûe
,0

4 .
£t
 
	gBa£OfLﬂdî
,0x9000

5 .
£t
 
	gOff£tOfLﬂdî
,0x100

6 .
£t
 
	gBa£OfLﬂdîPhyAddr
,0x9000 * 0x10

8 .
£t
 
	gBa£OfSèck
,0x100

10 .
£t
 
	gBa£OfKî√lFûePhyAddr
,
	gBa£OfKî√lFûe
*0x10

11 .
£t
 
	gKî√lE¡ryPoötPhyAddr
,0x30400

13 .
£t
 
	gPageDúBa£
,0x100000

14 .
£t
 
	gPageTblBa£
,0x101000

16 .
£t
 
	gBoŸP¨amAddr
,0x900

17 .
£t
 
	gBoŸP¨amMagic
,0xB007

	@boot/include/pm.h

13 .
£t
 
	gDA_32
, 0x4000

14 .
£t
 
	gDA_LIMIT_4K
,0X8000

16 .
£t
 
	gDA_DPL0
, 0x00

17 .
£t
 
	gDA_DPL1
, 0x20

18 .
£t
 
	gDA_DPL2
, 0x40

19 .
£t
 
	gDA_DPL3
, 0x60

22 .
£t
 
	gDA_DR
, 0x90

23 .
£t
 
	gDA_DRW
, 0x92

24 .
£t
 
	gDA_DRWA
, 0x93

25 .
£t
 
	gDA_C
, 0x98

26 .
£t
 
	gDA_CR
, 0x9A

27 .
£t
 
	gDA_CCO
, 0x9C

28 .
£t
 
	gDA_CCOR
, 0x9E

31 .
£t
 
	gDA_LDT
, 0x82

32 .
£t
 
	gDA_TaskG©e
, 0x85

33 .
£t
 
	gDA_386TSS
, 0x89

34 .
£t
 
	gDA_386CG©e
, 0x8C

35 .
£t
 
	gDA_386IG©e
, 0x8E

36 .
£t
 
	gDA_386TG©e
, 0x8F

39 .
£t
 
	gSA_RPL0
, 0

40 .
£t
 
	gSA_RPL1
, 1

41 .
£t
 
	gSA_RPL2
, 2

42 .
£t
 
	gSA_RPL3
, 3

43 .
£t
 
	gSA_TIG
, 0

44 .
£t
 
	gSA_TIL
, 4

47 .
£t
 
	gPG_P
,1

48 .
£t
 
	gPG_RWR
,0

49 .
£t
 
	gPG_RWW
,2

50 .
£t
 
	gPG_USS
,0

51 .
£t
 
	gPG_USU
,4

59 .
ma¸o
 
Des¸ùt‹
 
	gBa£
, 
	gLimô
, 
	gAâr


60 .2b
	gyã
 \
	gLimô
 & 0xFFFF

61 .2b
	gyã
 \
	gBa£
 & 0xFFFF

62 .
byã
 (\
Ba£
 >> 16) & 0xFF

63 .2b
yã
 ((\
Limô
 >> 8Ë& 0xF00Ë| (\
	gAâr
 & 0xF0FF)

64 .
byã
 (\
Ba£
 >> 24) & 0xFF

65 .
	gídm


73 .
ma¸o
 
G©e
 
	gSñe˘‹
, 
	gOff£t
, 
	gPCou¡
, 
	gAâr


74 .2b
yã
 (\
Off£t
 & 0xFFFF)

75 .2b
	gyã
 \
	gSñe˘‹


76 .2b
yã
 (\
PCou¡
 & 0x1FË| ((\
	gAâr
 << 8) & 0xFF00)

77 .2b
yã
 ((\
Off£t
 >> 16) & 0xFFFF)

78 .
	gídm


80 .
ma¸o
 
InôDesc
 
	gSegLabñ
,
SegDesc


81 
	gx‹
 %
	góx
,%
óx


82 
	gmov
 %
	gcs
,%
óx


83 
shl
 
	g$4
,%
óx


84 
addl
 
$
(\
SegLabñ
),%
óx


85 
	gmovw
 %
	gax
,(\
	gSegDesc
 +2)

86 
shr
 
	g$16
,%
óx


87 
	gmovb
 %
	gÆ
,(\
	gSegDesc
 +4)

88 
	gmovb
 %
	gah
,(\
	gSegDesc
 +7)

89 .
	gídm


	@boot/loader.S

1 .
	gcode16


2 .
ãxt


3 
jmp
 
	gLABEL_BEGIN


4 
	~"Át12hdr.h
"

5 
	~"pm.h
"

6 
	~"lﬂdî.h
"

8 
	gLABEL_GDT
: 
Des¸ùt‹
 0, 0, 0

9 
	gLABEL_DESC_FLAT_C
: 
Des¸ùt‹
 0, 0xfffff, (
	gDA_CR
 + 
	gDA_32
 + 
	gDA_LIMIT_4K
)

10 
	gLABEL_DESC_FLAT_RW
: 
Des¸ùt‹
 0, 0xfffff, (
	gDA_DRW
 + 
	gDA_32
 + 
	gDA_LIMIT_4K
)

11 
	gLABEL_DESC_VIDEO
: 
Des¸ùt‹
 0xb8000, 0xffff,(
	gDA_DRW
 + 
	gDA_DPL3
)

13 .
£t
 
	gGdtLí
, .-
LABEL_GDT


14 
	gGdtPå
: .2b
yã
 
GdtLí
-1

15 .4b
yã
 
Ba£OfLﬂdî
*0x10+
LABEL_GDT


17 .
£t
 
Sñe˘FœtC
, (
	gLABEL_DESC_FLAT_C
 - 
	gLABEL_GDT
)

18 .
£t
 
	gSñe˘FœtRW
, (
	gLABEL_DESC_FLAT_RW
 - 
	gLABEL_GDT
)

19 .
£t
 
	gSñe˘Video
, (
	gLABEL_DESC_VIDEO
 - 
	gLABEL_GDT
+
	gSA_RPL3
)

23 
	gLABEL_BEGIN
:

24 
mov
 %
cs
, %
ax


25 
	gmov
 %
	gax
, %
ds


26 
	gmov
 %
	gax
, %
es


27 
	gmov
 %
	gax
, %
ss


28 
mov
 
	g$0x100
, %
•


29 
movb
 
	g$0
,%
dh


30 
ˇŒ
 
Di•SåRólMode


33 
mov
 
	g$0
,%
ebx


34 
mov
 
	g$_MemChkBuf
,%
di


35 
	gMemChkLo›
:

36 
mov
 
$0xe820
,%
óx


37 
mov
 
	g$20
,%
ecx


38 
mov
 
	g$0x534d4150
,%
edx


39 
$0x15


40 
jc
 
MemChkFaû


41 
add
 
	g$20
,%
di


42 
	$ö˛
 (
_dwMCRNumbî
)

43 
cmp
 
$0
,%
ebx


44 
j√
 
MemChkLo›


45 
jmp
 
MemChkOK


46 
MemChkFaû
:

47 
movl
 
$0
,(
_dwMCRNumbî
)

48 
MemChkOK
:

53 
movw
 
$SecNoOfRoŸDú
,(
wSe˘‹No
)

55 
x‹b
 %
ah
,%ah

56 
x‹b
 %
dl
,%dl

57 
$0x13


59 
LABEL_SEARCH_IN_ROOT_DIR_BEGIN
:

61 
cmpw
 
$0
,(
wRoŸDúSizeF‹Lo›
)

62 
jz
 
LABEL_NO_KERNELBIN


63 
	$decw
 (
wRoŸDúSizeF‹Lo›
)

64 
mov
 
$Ba£OfKî√lFûe
,%
ax


65 
mov
 %
ax
,%
es


66 
mov
 
$Off£tOfKî√lFûe
,%
bx


67 
	`mov
 (
wSe˘‹No
),%
ax


68 
movb
 
$1
,%
˛


69 
ˇŒ
 
RódSe˘‹


70 
mov
 
$Kî√lFûeName
,%
si


71 
mov
 
$Off£tOfKî√lFûe
,%
di


72 
˛d


73 
mov
 
$0x10
,%
dx


74 
LABEL_SEARCH_FOR_KERNELBIN
:

76 
cmp
 
$0
,%
dx


77 
jz
 
LABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR


78 
dec
 %
dx


79 
mov
 
$11
,%
cx


80 
LABEL_CMP_FILENAME
:

81 
cmp
 
$0
,%
cx


82 
jz
 
LABEL_FILENAME_FOUND


83 
dec
 %
cx


84 
lodsb


85 
cmp
 %
es
:(%
di
),%
Æ


86 
jz
 
LABEL_GO_ON


87 
jmp
 
LABEL_DIFFERENT


88 
LABEL_GO_ON
:

89 
öc
 %
di


90 
jmp
 
LABEL_CMP_FILENAME


91 
LABEL_DIFFERENT
:

92 
™d
 
$0xf„0
,%
di


93 
add
 
$0x20
,%
di


94 
mov
 
$Kî√lFûeName
,%
si


95 
jmp
 
LABEL_SEARCH_FOR_KERNELBIN


96 
LABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR
:

97 
addw
 
$1
,(
wSe˘‹No
)

98 
jmp
 
LABEL_SEARCH_IN_ROOT_DIR_BEGIN


99 
LABEL_NO_KERNELBIN
:

100 
mov
 
$2
,%
dh


101 
ˇŒ
 
Di•SåRólMode


102 
jmp
 .

103 
LABEL_FILENAME_FOUND
:

104 
mov
 
$RoŸDúSe˘‹s
,%
ax


105 
™d
 
$0xf„0
,%
di


106 
add
 
$0x1a
,%
di


107 
mov
 %
es
:(%
di
),%
cx


108 
push
 %
cx


109 
add
 %
ax
,%
cx


110 
add
 
$DñèSecNo
,%
cx


111 
mov
 
$Ba£OfKî√lFûe
,%
ax


112 
mov
 %
ax
,%
es


113 
mov
 
$Off£tOfKî√lFûe
,%
bx


114 
mov
 %
cx
,%
ax


115 
LABEL_GOON_LOADING_FILE
:

116 
push
 %
ax


117 
push
 %
bx


118 
movb
 
$0x0e
,%
ah


119 
movb
 
$
'.',%
Æ


120 
movb
 
$0x0f
,%
bl


121 
$0x10


122 
p›
 %
bx


123 
p›
 %
ax


125 
mov
 
$1
,%
˛


126 
ˇŒ
 
RódSe˘‹


127 
p›
 %
ax


128 
ˇŒ
 
GëFATE¡ry


129 
cmp
 
$0x0fff
,%
ax


130 
jz
 
LABEL_FILE_LOADED


131 
push
 %
ax


132 
mov
 
$RoŸDúSe˘‹s
,%
dx


133 
add
 %
dx
,%
ax


134 
add
 
$DñèSecNo
,%
ax


135 
	`add
 (
BPB_BytsPîSec
),%
bx


136 
jc
 .
z1


137 
jmp
 .
z2


138 .
z1
:

139 
push
 %
ax


140 
mov
 %
es
,%
ax


141 
add
 
$0x1000
,%
ax


142 
mov
 %
ax
,%
es


143 
p›
 %
ax


144 .
z2
:

145 
jmp
 
LABEL_GOON_LOADING_FILE


146 
LABEL_FILE_LOADED
:

147 
ˇŒ
 
KûlMŸ‹


148 
movb
 
$1
,%
dh


149 
ˇŒ
 
Di•SåRólMode


151 
LABEL_JMP_PROTECT
:

153 
lgdtw
 
GdtPå


154 
˛i


155 
mov
 
$2
,%
dh


156 
ö
 
$0x92
,%
Æ


157 
‹
 
$0x02
,%
Æ


158 
out
 %
Æ
,
$0x92


160 
mov
 %
¸0
,%
óx


161 
‹
 
$1
,%
óx


162 
mov
 %
óx
,%
¸0


163 
mov
 
$2
,%
dh


165 
ljm∂
 
$Sñe˘FœtC
, 
$LABEL_PM_START
 +0x90000

166 
jmp
 .

170 
wSe˘‹No
: .2b
yã
 0

171 
wRoŸDúSizeF‹Lo›
: .2b
yã
 
RoŸDúSe˘‹s


172 
bOdd
: .
byã
 0

173 
dwKî√lSize
: .4b
yã
 0

175 
Kî√lFûeName
: .
asciz
 "KERNEL BIN"

176 .
£t
 
MesßgeLígth
, 9

177 
LﬂdMesßge
: .
ascii
 "Loading "

178 
Mesßge1
: .
ascii
 "Ready. "

179 
Mesßge2
: .
ascii
 "NoKERNEL "

182 
Di•SåRólMode
:

183 
mov
 
$MesßgeLígth
,%
ax


184 
mulb
 %
dh


185 
add
 
$LﬂdMesßge
,%
ax


186 
mov
 %
ax
,%
bp


187 
mov
 %
ds
,%
ax


188 
mov
 %
ax
,%
es


189 
mov
 
$MesßgeLígth
,%
cx


190 
mov
 
$0x1301
,%
ax


191 
mov
 
$0x7
,%
bx


192 
movb
 
$0x0
,%
dl


193 
addb
 
$3
,%
dh


194 
$0x10


195 
ªt


197 
RódSe˘‹
:

198 
push
 %
ebp


199 
mov
 %
e•
,%
ebp


200 
sub
 
$2
,%
e•


202 
movb
 %
˛
,-2(%
ebp
)

203 
push
 %
bx


204 
	`movb
 (
BPB_SecPîTrk
),%
bl


205 
div
 %
bl


206 
öcb
 %
ah


207 
mov
 %
ah
,%
˛


208 
mov
 %
Æ
,%
dh


209 
shrb
 
$1
,%
Æ


210 
movb
 %
Æ
,%
ch


211 
™db
 
$1
,%
dh


212 
p›
 %
bx


214 
	`movb
 (
BS_DrvNum
),%
dl


215 
GoOnRódög
:

216 
movb
 
$2
,%
ah


217 
movb
 -2(%
ebp
),%
Æ


218 
$0x13


219 
jc
 
GoOnRódög


220 
add
 
$2
,%
e•


221 
p›
 %
ebp


222 
ªt


224 
GëFATE¡ry
:

225 
push
 %
es


226 
push
 %
bx


227 
push
 %
ax


228 
mov
 
$Ba£OfKî√lFûe
,%
ax


229 
sub
 
$0x100
,%
ax


230 
mov
 %
ax
,%
es


231 
p›
 %
ax


232 
mov
 
$3
,%
bx


233 
mul
 %
bx


234 
mov
 
$2
,%
bx


235 
div
 %
bx


236 
movb
 %
dl
,(
bOdd
)

237 
LABEL_EVEN
:

238 
x‹
 %
dx
,%dx

239 
	`mov
 (
BPB_BytsPîSec
),%
bx


240 
div
 %
bx


242 
push
 %
dx


243 
mov
 
$0
,%
bx


244 
add
 
$SecNoOfFAT1
,%
ax


245 
mov
 
$2
,%
˛


246 
ˇŒ
 
RódSe˘‹


247 
p›
 %
dx


248 
add
 %
dx
,%
bx


249 
mov
 %
es
:(%
bx
),%
ax


250 
cmpb
 
$0
,(
bOdd
)

251 
jz
 
LABEL_EVEN_2


252 
shr
 
$4
,%
ax


253 
LABEL_EVEN_2
:

254 
™d
 
$0xfff
,%
ax


255 
LABEL_GET_FAT_ENTRY_OK
:

256 
p›
 %
bx


257 
p›
 %
es


258 
ªt


259 
KûlMŸ‹
:

260 
push
 %
dx


261 
mov
 
$0x3f2
,%
dx


262 
mov
 
$0
,%
Æ


263 
out
 %
Æ
,%
dx


264 
p›
 %
dx


265 
ªt


267 .
code32


268 .
Æign
 32

269 
LABEL_PM_START
:

270 
mov
 
$Sñe˘Video
,%
ax


271 
mov
 %
ax
,%
gs


273 
mov
 
$Sñe˘FœtRW
,%
ax


274 
mov
 %
ax
,%
ds


275 
mov
 %
ax
,%
es


276 
mov
 %
ax
,%
fs


277 
mov
 %
ax
,%
ss


278 
mov
 
$T›OfSèck
,%
e•


280 
pushl
 
$szMemChkTôÀ


281 
ˇŒ
 
Di•Så


282 
add
 
$4
,%
e•


284 
ˇŒ
 
Di•MemInfo


285 
ˇŒ
 
SëupPagög


287 
mov
 
$0x0f
,%
ah


288 
mov
 
$
'P',%
Æ


289 
mov
 %
Æ
,%
gs
:((80 *0 +39)*2)

290 
ˇŒ
 
InôKî√l


292 
jmp
 
$Sñe˘FœtC
 , 
$Kî√lE¡ryPoötPhyAddr


293 
movl
 
$BoŸP¨amMagic
, (
BoŸP¨amAddr
)

294 
	`mov
 (
dwMemSize
), %
óx


295 
mov
 %
óx
, (
BoŸP¨amAddr
 + 4)

296 
mov
 
$Ba£OfKî√lFûe
, %
óx


297 
shl
 
$4
, %
óx


298 
add
 
$Off£tOfKî√lFûe
, %
óx


299 
mov
 %
óx
, (
BoŸP¨amAddr
 + 8)

301 
jmp
 .

303 
PrötF
:

304 
mov
 
$0x0F
,%
ah


305 
mov
 
$
'F',%
Æ


306 
mov
 %
Æ
,%
gs
:((80 *2+39)*2)

307 
ªt


308 
	~"lib.h
"

309 
Di•MemInfo
:

310 
push
 %
esi


311 
push
 %
edi


312 
push
 %
ecx


314 
mov
 
$MemChkBuf
,%
esi


315 
	`mov
 (
dwMCRNumbî
),%
ecx


316 .
lo›
:

317 
mov
 
$5
,%
edx


318 
mov
 
$ARDSåu˘
,%
edi


319 .
l1
:

320 
	`pushl
 (%
esi
)

321 
ˇŒ
 
Di•I¡


322 
p›
 %
óx


323 
°o¶


324 
add
 
$4
,%
esi


325 
dec
 %
edx


326 
cmp
 
$0
,%
edx


327 
jnz
 .
l1


328 
ˇŒ
 
Di•Rëu∫


329 
cm∂
 
$1
,(
dwTy≥
)

330 
j√
 .
l2


331 
	`mov
 (
dwBa£AddrLow
),%
óx


332 
	`add
 (
dwLígthLow
),%
óx


333 
	`cmp
 (
dwMemSize
),%
óx


334 
jb
 .
l2


335 
mov
 %
óx
,(
dwMemSize
)

336 .
l2
:

337 
lo›
 .loop

339 
ˇŒ
 
Di•Rëu∫


340 
push
 
$szRAMSize


341 
ˇŒ
 
Di•Så


342 
add
 
$4
,%
e•


344 
	$pushl
 (
dwMemSize
)

345 
ˇŒ
 
Di•I¡


346 
add
 
$4
,%
e•


348 
p›
 %
ecx


349 
p›
 %
edi


350 
p›
 %
esi


351 
ªt


353 
SëupPagög
:

354 
x‹
 %
edx
,%edx

355 
	`mov
 (
dwMemSize
),%
óx


356 
mov
 
$0x400000
,%
ebx


357 
div
 %
ebx


358 
mov
 %
óx
,%
ecx


359 
ã°
 %
edx
,%edx

360 
jz
 .
no_ªmaödî


361 
öc
 %
ecx


362 .
no_ªmaödî
:

363 
push
 %
ecx


365 
mov
 
$Sñe˘FœtRW
,%
ax


366 
mov
 %
ax
,%
es


367 
mov
 
$PageDúBa£
,%
edi


368 
x‹
 %
óx
,%eax

369 
mov
 
	`$
(
PageTblBa£
 | 
PG_P
 | 
PG_USU
 | 
PG_RWW
),%
óx


370 .
S1
:

371 
°o¶


372 
add
 
$4096
,%
óx


373 
lo›
 .
S1


375 
p›
 %
óx


376 
mov
 
$1024
,%
ebx


377 
mul
 %
ebx


378 
mov
 %
óx
,%
ecx


379 
mov
 
$PageTblBa£
,%
edi


380 
x‹
 %
óx
,%eax

381 
mov
 
	`$
(
PG_P
 | 
PG_USU
 | 
PG_RWW
),%
óx


382 .
S2
:

383 
°o¶


384 
add
 
$4096
,%
óx


385 
lo›
 .
S2


387 
mov
 
$PageDúBa£
,%
óx


388 
mov
 %
óx
,%
¸3


389 
mov
 %
¸0
,%
óx


390 
‹
 
$0x80000000
,%
óx


391 
mov
 %
óx
,%
¸0


392 
ªt


395 
InôKî√l
:

396 
x‹
 %
esi
,%esi

397 
mov
 
	`$
(
Ba£OfKî√lFûePhyAddr
)+0x2c,%
ecx


399 
	`mov
 (%
ecx
),%
cx


400 
movzx
 %
cx
,%
ecx


402 
mov
 
	`$
(
Ba£OfKî√lFûePhyAddr
)+ 0x1c,%
esi


403 
	`mov
 (%
esi
),%esi

404 
add
 
	`$
(
Ba£OfKî√lFûePhyAddr
),%
esi


406 .
Begö
:

407 
	`mov
 (%
esi
),%
óx


408 
cmp
 
$0
,%
óx


409 
jz
 .
NoA˘i⁄


410 
pushl
 0x10(%
esi
)

411 
mov
 0x4(%
esi
),%
óx


412 
add
 
$Ba£OfKî√lFûePhyAddr
,%
óx


413 
push
 %
óx


415 
pushl
 0x08(%
esi
)

416 
ˇŒ
 
MemC›y


418 
add
 
$12
,%
e•


419 .
NoA˘i⁄
:

420 
add
 
$0x20
,%
esi


421 
dec
 %
ecx


422 
jnz
 .
Begö


424 
ªt


426 .
d©a


427 .
Æign
 32

428 
LABEL_DATA
:

429 
_szMemChkTôÀ
: .
asciz
 "BaseAddrL BaseAddrH LengthLow LengthHigh Type\n"

430 
_szRAMSize
: .
asciz
 "RAM size:"

431 
_szRëu∫
: .
byã
 0x0a,0

433 
_dwMCRNumbî
: .4b
yã
 0

434 
_dwDi•Pos
: .4b
	`yã
 (80 *6 ) *2

435 
_dwMemSize
: .4b
yã
 0

436 
_ARDSåu˘
:

437 
_dwBa£AddrLow
: .4b
yã
 0

438 
_dwBa£AddrHigh
: .4b
yã
 0

439 
_dwLígthLow
: .4b
yã
 0

440 
_dwLígthHigh
: .4b
yã
 0

441 
_dwTy≥
: .
byã
 0

442 
_MemChkBuf
: .
fûl
 256

446 .
£t
 
szMemChkTôÀ
, 
Ba£OfLﬂdîPhyAddr
 + 
_szMemChkTôÀ


447 .
£t
 
szRAMSize
, 
Ba£OfLﬂdîPhyAddr
 + 
_szRAMSize


448 .
£t
 
szRëu∫
, 
Ba£OfLﬂdîPhyAddr
 + 
_szRëu∫


449 .
£t
 
dwDi•Pos
, 
Ba£OfLﬂdîPhyAddr
 + 
_dwDi•Pos


450 .
£t
 
dwMemSize
, 
Ba£OfLﬂdîPhyAddr
 + 
_dwMemSize


451 .
£t
 
dwMCRNumbî
, 
Ba£OfLﬂdîPhyAddr
 + 
_dwMCRNumbî


452 .
£t
 
ARDSåu˘
, 
Ba£OfLﬂdîPhyAddr
 + 
_ARDSåu˘


453 .
£t
 
dwBa£AddrLow
, 
Ba£OfLﬂdîPhyAddr
 + 
_dwBa£AddrLow


454 .
£t
 
dwBa£AddrHigh
, 
Ba£OfLﬂdîPhyAddr
 + 
_dwBa£AddrHigh


455 .
£t
 
dwLígthLow
, 
Ba£OfLﬂdîPhyAddr
 + 
_dwLígthLow


456 .
£t
 
dwLígthHigh
, 
Ba£OfLﬂdîPhyAddr
 + 
_dwLígthHigh


457 .
£t
 
dwTy≥
, 
Ba£OfLﬂdîPhyAddr
 + 
_dwTy≥


458 .
£t
 
MemChkBuf
, 
Ba£OfLﬂdîPhyAddr
 + 
_MemChkBuf


460 
SèckS∑˚
: .
fûl
 1024

461 .
£t
 
T›OfSèck
, 
Ba£OfLﬂdî
*0x10+ .

	@cmd/cat.c

1 
	~"lib/f˙é.h
"

	@cmd/hello.c

1 
	~"lib/°dio.h
"

3 
	$maö
–
¨gc
, *
¨gv
[] )

5 
i
;

6 
	`¥ötf
("%d\n", 
¨gc
 );

8 
	`¥ötf
("hello world\n");

9  
i
=0; i<
¨gc
; i++ )

10 
	`¥ötf
("%s%s", " ", 
¨gv
[
i
]);

11 
	`¥ötf
("\n");

13 
	}
}

	@cmd/start.s

1 .
maö


2 .
exô


4 .
ãxt


5 .
globÆ
 
_°¨t


7 
_°¨t
:

8 
push
 %
óx


9 
push
 %
ecx


11 
ˇŒ
 
maö


13 
push
 %
óx


14 
ˇŒ
 
exô


16 
h…


	@fs/b_tree.c

1 
	~"ty≥.h
"

2 
	~"°rög.h
"

3 
	~"fs.h
"

5 
	#MAX_ENTRY
 63

	)

6 
	#HASH_TYPE
 1

	)

8 
u32
 
	g¸y±_èbÀ
[0x500];

9 
do_båì_ö£π
–
m_öode
 *
öode
, 
d_båì_node
 *
p_bnode
, 
Àvñ
, 
u32
 
key
, u32 
öode_num
 );

10 
d_båì_node
 *
båì_öô
–
buf„r_hód
 *
bh
 );

11 
gë_öode_em±y_£˘‹
–
m_öode
 *
öode
 );

12 
do_båì_•lô_roŸ
–
m_öode
 *
öode
, 
d_båì_node
 *
p_bnode
 );

13 
do_båì_•lô
–
m_öode
 *
öode
, 
d_båì_node
 *
p_bnode
);

14 
båì_föd_pos
–
d_båì_node
 *
p_bnode
, 
u32
 
key
 );

15 
ö£π_∑ú
–
d_båì_node
 *
p_bnode
, 
u32
 
key
, u32 
vÆue
 );

16 
do_båì_föd
–
m_öode
 *
öode
, 
d_båì_node
 *
p_bnode
, 
Àvñ
, 
key
 );

17 
do_båì_ªmove
–
m_öode
 *
öode
, 
d_båì_node
 *
p_node
, 
Àvñ
, 
key
 );

18 
	$öô_hash
()

20 
u32
 
£ed
 = 0x00100001, 
ödex1
 = 0, 
ödex2
 = 0, 
i
;

21  
ödex1
=0; index1<0x100; index1++ )

23  
ödex2
=
ödex1
,
i
=0; i<5; i++,index2+=0x100 )

25 
u32
 
tmp1
,
tmp2
;

26 
£ed
 = (seed*125+3) %0x2aaaab;

27 
tmp1
 = (
£ed
&0xffff) << 0x10;

28 
£ed
 = (seed*125+3) %0x2aaaab;

29 
tmp2
 = (
£ed
&0xffff);

30 
¸y±_èbÀ
[
ödex2
] = ( 
tmp1
 | 
tmp2
 );

33 
	}
}

35 
u32
 
	$hash_°rög
–*
«me
, 
u8
 
hash_ty≥
 )

37 
u32
 
£ed1
 = 0x7„d7„d, 
£ed2
 = 0xeeeeeeee;

38  *
«me
 != 0 )

40 
£ed1
 = 
¸y±_èbÀ
[(
hash_ty≥
<<8Ë+*
«me
] ^ (£ed1 +
£ed2
);

41 
£ed2
 = *
«me
 +
£ed1
 + seed2 + (seed2 << 5) +3;

42 
«me
++ ;

44  
£ed1
;

45 
	}
}

47 
d_båì_node
 *
	$båì_√w_roŸ
–
buf„r_hód
 *
bh
, 
d_«me_vÆue_∑ú
 *
pkv
, 
num
 )

49 
tmp
[20] = {0};

50 
i
;

51 
d_båì_node
 *
bt_roŸ
 = 
	`båì_öô
–
bh
 );

52 
	`mem£t
–
bh
->
pd©a
, 0, (
d_båì_node
Ë*(1<<bh->
size
) );

54 
bt_roŸ
->
num
 = 0;

55 
bt_roŸ
->
i§oŸ
 = 1;

56 
bt_roŸ
->
Àvñ
 = 0;

57 
bt_roŸ
->
¥ev_node_ödex
 = 0;

58 
bt_roŸ
->
√xt_node_ödex
 = 0;

59  
i
=0; i<
num
; i++ )

61 
	`mem˝y
–
tmp
, 
pkv
[
i
].
«me
, 19 );

62 if–
	`ö£π_∑ú
–
bt_roŸ
, 
	`hash_°rög
–
tmp
, 
HASH_TYPE
 ), 
pkv
[
i
].
vÆue
 ) == -1 )

63  
NULL
;

65  
bt_roŸ
;

66 
	}
}

68 
d_båì_node
 *
	$båì_öô
–
buf„r_hód
 *
bh
 )

70 
d_båì_node
 *
p_båì
 = (d_båì_nodê*)(
bh
->
pd©a
);

71  
p_båì
;

72 
	}
}

74 
	$båì_föd
–
m_öode
 *
öode
, *
«me
 )

76 
ªt
 = -1;

77 
tmp
[20] = {0};

78 
	`mem˝y
–
tmp
, 
«me
, 19 );

79 
u32
 
key
 = 
	`hash_°rög
–
tmp
, 
HASH_TYPE
 );

80 
buf„r_hód
 *
bh
 = 
	`gë_öode_d©a
–
öode
->
dev
, inode->
öode_num
 );

81 
ªt
 = 
	`do_båì_föd
–
öode
, 
NULL
, 0, 
key
 );

82 
	`bªl£
–
bh
 );

83  
ªt
;

84 
	}
}

85 
	$do_båì_föd
–
m_öode
 *
öode
, 
d_båì_node
 *
p_bnode
, 
Àvñ
, 
key
 )

87 
buf„r_hód
 *
bh
 = 
	`gë_öode_d©a
–
öode
->
dev
, inode->
öode_num
 );

88 
d_båì_node
 *
bt_roŸ
 = 
	`båì_öô
–
bh
 );

89 if–
p_bnode
 =
NULL
 )

90 
p_bnode
 = 
bt_roŸ
;

91 if–
p_bnode
->
Àvñ
 >Üevel)

93 
pos
 = 
	`båì_föd_pos
–
p_bnode
, 
key
 );

94 if–
pos
 == -1 )

96  
	`do_båì_föd
–
öode
, 
bt_roŸ
 + 
p_bnode
->
kv
[
pos
].
vÆue
, 
Àvñ
, 
key
 );

98 if–
p_bnode
->
Àvñ
 ==Üevel )

100 
pos
 = 
	`båì_föd_pos
–
p_bnode
, 
key
 );

101 if–
pos
 == -1 )

103 if–
p_bnode
->
kv
[
pos
].
key
 == key )

104  
p_bnode
->
kv
[
pos
].
vÆue
 ;

109 
	`∑nic
("do_btree_findÉrror!\n");

111 
	}
}

113 
	$båì_ªmove
–
m_öode
 *
öode
, *
«me
 )

115 
ªt
 = -1;

116 
tmp
[20] = {0};

117 
	`mem˝y
–
tmp
, 
«me
, 19 );

118 
u32
 
key
 = 
	`hash_°rög
–
tmp
, 
HASH_TYPE
 );

119 
buf„r_hód
 *
bh
 = 
	`gë_öode_d©a
–
öode
->
dev
, inode->
öode_num
 );

120 
ªt
 = 
	`do_båì_ªmove
–
öode
, 
NULL
, 0, 
key
 );

121 
	`bwrôe
–
bh
 );

122  
ªt
;

123 
	}
}

124 
	$do_båì_ªmove
–
m_öode
 *
öode
, 
d_båì_node
 *
p_bnode
, 
Àvñ
, 
key
 )

126 
buf„r_hód
 *
bh
 = 
	`gë_öode_d©a
–
öode
->
dev
, inode->
öode_num
 );

127 
d_båì_node
 *
bt_roŸ
 = 
	`båì_öô
–
bh
 );

128 
	`bªl£
–
bh
 );

129 if–
p_bnode
 =
NULL
 )

130 
p_bnode
 = 
bt_roŸ
;

131 if–
p_bnode
->
Àvñ
 >Üevel )

133 
pos
 = 
	`båì_föd_pos
–
p_bnode
, 
key
 );

134 if–
pos
 == -1 )

136  
	`do_båì_ªmove
–
öode
, 
bt_roŸ
 + 
p_bnode
->
kv
[
pos
].
vÆue
, 
Àvñ
, 
key
 );

138 if–
p_bnode
->
Àvñ
 ==Üevel )

140 
pos
 = 
	`båì_föd_pos
–
p_bnode
, 
key
 );

141 if–
pos
 == -1 )

143 if–
p_bnode
->
kv
[
pos
].
key
 == key )

145 
p_bnode
->
kv
[
pos
].
key
 = 0;

146  
p_bnode
->
kv
[
pos
].
vÆue
 ;

152 
	`∑nic
("do_btree_findÉrror!\n");

154 
	}
}

157 
	$båì_ö£π
–
m_öode
 *
öode
, c⁄° *
«me
, 
u32
 
öode_num
 )

159 
ªt
 = -1;

160 
tmp
[20] = {0};

161 
	`mem˝y
–
tmp
, 
«me
, 19 );

162 
u32
 
key
 = 
	`hash_°rög
–
tmp
, 
HASH_TYPE
 );

163 
buf„r_hód
 *
bh
 = 
	`gë_öode_d©a
–
öode
->
dev
, inode->
öode_num
 );

164 
ªt
 = 
	`do_båì_ö£π
–
öode
, 
NULL
, 0, 
key
, 
öode_num
 );

165 
	`bwrôe
–
bh
 );

166  
ªt
;

167 
	}
}

169 
	$do_båì_ö£π
–
m_öode
 *
öode
, 
d_båì_node
 *
p_bnode
, 
Àvñ
, 
u32
 
key
, u32 
öode_num
 )

171 
buf„r_hód
 *
bh
 = 
	`gë_öode_d©a
–
öode
->
dev
, inode->
öode_num
 );

172 
d_båì_node
 *
bt_roŸ
 = 
	`båì_öô
–
bh
 );

173 
	`bªl£
–
bh
 );

174 if–
p_bnode
 =
NULL
 )

176 
p_bnode
 = 
bt_roŸ
;

178 if–
p_bnode
->
Àvñ
 >Üevel )

180 
pos
 = 
	`båì_föd_pos
–
p_bnode
, 
key
 );

181 if–
pos
 == -1 )

183 
p_bnode
->
kv
[0].
key
 = key;

184 
pos
 = 0;

186 if–
p_bnode
->
kv
[
pos
].
vÆue
 > (1 << 
öode
->
size
) )

188 
m_öode
 *
n_öode
 = 
	`√w_öode
–
öode
->
dev
, inode->
size
 + 1 );

189 
	`mov_öode_d©a
–
n_öode
, 
öode
 );

190 
m_öode
 *
p_öode
 = 
	`gë_öode
–
öode
->
dev
, 
	`båì_föd
( inode, ".." ) );

191 
	`båì_ªmove
–
p_öode
, 
öode
->
«me
 );

192 
	`båì_ö£π
–
p_öode
, 
n_öode
->
«me
, 
öode
->
öode_num
 );

195 if–64 =
	`do_båì_ö£π
–
öode
, 
bt_roŸ
 + 
p_bnode
->
kv
[
pos
].
vÆue
, 
Àvñ
, 
key
, 
öode_num
 ) )

197 
	`do_båì_•lô
–
öode
, 
p_bnode
 );

198  
	`do_båì_ö£π
–
öode
, 
NULL
, 0, 
key
, 
öode_num
 );

201 if–
p_bnode
->
Àvñ
 ==Üevel )

202  
	`ö£π_∑ú
–
p_bnode
, 
key
, 
öode_num
 );

204 
	`∑nic
("do_btree_insertÉrror!\n");

206 
	}
}

208 
	$gë_öode_em±y_£˘‹
–
m_öode
 *
öode
 )

210 
i
;

211  
i
=0; i<(1<<
öode
->
size
); i++)

212 if–~
öode
->
bôm≠
 & (1<<
i
) )

214 
öode
->
bôm≠
 = inode->bôm≠ | (1<<
i
);

215 
öode
->
dút
 = 1;

216  
i
;

219 
	}
}

221 
	$do_båì_•lô_roŸ
–
m_öode
 *
öode
, 
d_båì_node
 *
p_bnode
 )

223 
i
,
À·
,
right
;

224 
buf„r_hód
 *
bh
 = 
	`gë_öode_d©a
–
öode
->
dev
, inode->
öode_num
 );

225 
d_båì_node
 *
bt_roŸ
 = 
	`båì_öô
–
bh
 );

226 
À·
 = 
	`gë_öode_em±y_£˘‹
–
öode
 );

227 
right
 = 
	`gë_öode_em±y_£˘‹
–
öode
 );

228 
d_båì_node
 *
p_À·
 = 
bt_roŸ
 + 
À·
;

229 
d_båì_node
 *
p_right
 = 
bt_roŸ
 + 
right
;

230  
i
=0; i<
p_bnode
->
num
/2; i++)

232 
p_À·
->
i§oŸ
 = 0;

233 
p_À·
->
Àvñ
 = 
p_bnode
->level;

234 
p_À·
->
kv
[
i
] = 
p_bnode
->kv[i];

235 
p_bnode
->
kv
[
i
].
key
 = 0;

236 
p_À·
->
num
++;

237 
p_À·
->
√xt_node_ödex
 = 
right
;

239  ; 
i
<
p_bnode
->
num
; i++ )

241 
p_right
->
i§oŸ
 = 0;

242 
p_right
->
Àvñ
 = 
p_bnode
->level;

243 
p_right
->
kv
[
i
] = 
p_bnode
->kv[i];

244 
p_bnode
->
kv
[
i
].
key
 = 0;

245 
p_right
->
num
++;

246 
p_right
->
¥ev_node_ödex
 = 
À·
;

248 
p_bnode
->
Àvñ
++;

249 
p_bnode
->
num
 = 0;

250 if–
	`ö£π_∑ú
–
p_bnode
, 
p_À·
->
kv
[0].
key
, 
À·
 ) == -1)

252 if–
	`ö£π_∑ú
–
p_bnode
, 
p_right
->
kv
[0].
key
, 
right
 ) == -1 );

254 
	}
}

255 
	$do_båì_•lô
–
m_öode
 *
öode
, 
d_båì_node
 *
p_bnode
)

257 
buf„r_hód
 *
bh
 = 
	`gë_öode_d©a
–
öode
->
dev
, inode->
öode_num
 );

258 
d_båì_node
 *
bt_roŸ
 = 
	`båì_öô
–
bh
 );

259 
	`bªl£
–
bh
 );

260 
i
;

261 if–
p_bnode
->
i§oŸ
 == 1 )

263 
	`do_båì_•lô_roŸ
–
öode
, 
p_bnode
);

266 
right
 = 
	`gë_öode_em±y_£˘‹
–
öode
 );

267 
d_båì_node
 *
p_right
 = 
bt_roŸ
 + 
right
;

268  
i
=
p_bnode
->
num
/2; i<p_bnode->num; i++ )

270 
p_right
->
kv
[
i
].
key
 = 
p_bnode
->kv[i].key;

271 
p_bnode
->
kv
[
i
].
key
 = 0;

272 
p_right
->
kv
[
i
].
vÆue
 = 
p_bnode
->kv[i].value;

273 
p_bnode
->
kv
[
i
].
vÆue
 = 0;

274 
p_right
->
num
++;

275 
p_bnode
->
num
--;

276 
p_right
->
Àvñ
 = 
p_bnode
->level;

278 
p_right
->
√xt_node_ödex
 = 
p_bnode
->next_node_index;

279 
p_right
->
¥ev_node_ödex
 = 
p_bnode
 - 
bt_roŸ
;

280 (
bt_roŸ
 + 
p_bnode
->
√xt_node_ödex
)->
¥ev_node_ödex
 = 
p_right
 - bt_root;

281 
p_bnode
->
√xt_node_ödex
 = 
p_right
 - 
bt_roŸ
;

283  
	`do_båì_ö£π
–
öode
, 
NULL
, 
p_bnode
->
Àvñ
 + 1, 
p_right
->
kv
[0].
key
,Ö_right->kv[0].
vÆue
 );

284 
	}
}

286 
	$båì_föd_pos
–
d_båì_node
 *
p_bnode
, 
u32
 
key
 )

288 
i
;

289 if–
p_bnode
->
num
 == 0 )

291  
i
=0; i<
p_bnode
->
num
; i++ )

292 if–
p_bnode
->
kv
[
i
].
key
 > key )

293  
i
-1;

294  
p_bnode
->
num
 - 1;

295 
	}
}

296 
	$ö£π_∑ú
–
d_båì_node
 *
p_bnode
, 
u32
 
key
, u32 
vÆue
 )

298 if–
p_bnode
->
num
 == 63 )

300 
i
,
j
;

301 
i
 = 
	`båì_föd_pos
–
p_bnode
, 
key
 );

302  
j
=
p_bnode
->
num
; j>
i
+1; j-- )

304 
p_bnode
->
kv
[
j
].
key
 =Ö_bnode->kv[j-1].key;

305 
p_bnode
->
kv
[
j
].
vÆue
 =Ö_bnode->kv[j-1].value;

307 
p_bnode
->
kv
[
i
+1].
key
 = key;

308 
p_bnode
->
kv
[
i
+1].
vÆue
 = value;

309  
p_bnode
->
num
++;

310 
	}
}

	@fs/block_table.c

1 
	~"ty≥.h
"

2 
	~"hd.h
"

3 
	~"fs.h
"

5 
d_block_èbÀ_íåy
 *
	$gë_block_èbÀ
–
dev
, 
size
, 
n
 )

7 
i
,
j
=
n
;

8 
m_su≥r_block
 *
psb
 = 
	`gë_su≥r_block
–
dev
 );

9 if–
size
 <0 || size > 6 )

11 
	`¥ötk
–"gë_block_èbÀ sizêîr‹ %x.\n", 
size
);

12  
NULL
;

14  
i
=0; i<
NR_BLOCK_TABLE_ENTRY
; i++ )

16 
d_block_èbÀ_íåy
 *
bt
 = (
psb
->
p_block_èbÀ
)+
i
;

17 if–
bt
->
block_size
 =1<<
size
 && bt->
öode_cou¡
 != 0 )

19 if–
j
 == 0 )

20  (
d_block_èbÀ_íåy
 *)
bt
;

22 
j
--;

25 
	`¥ötk
("ˇn'àföd block_èbÀ %x.\n", 
size
 );

26  
	`gë_block_èbÀ
–
dev
, 
size
, 
n
 );

27 
	}
}

28 
	$ªad_block_èbÀ
–
m_su≥r_block
 *
psb
 )

30 
i
;

31 
buf„r_hód
 *
bh
 = 
	`bªad
–
psb
->
sb_dev
,Ösb->
fú°_block_èbÀ_£˘
, 1 );

32 
d_block_èbÀ_íåy
 *
pbt
 = (d_block_èbÀ_íåy *)
bh
->
pd©a
;

33  
i
=0; i<
NR_BLOCK_TABLE_ENTRY
; i++ )

34 
psb
->
p_block_èbÀ
[
i
] = 
pbt
[i];

35 
	`bªl£
–
bh
 );

36 
	}
}

	@fs/buffer.c

1 
	~"ty≥.h
"

2 
	~"hd.h
"

3 
	~"fs.h
"

4 
	~"°ddef.h
"

5 
	~"¥oc.h
"

6 
	~"c⁄°.h
"

8 
	#NR_HASH
 307

	)

9 
	#NR_BUFFER
 7

	)

11 
	#_hash‚
(
dev
,
block
,
size
Ë–(((
u32
)(dev^block))%
NR_HASH
Ë+ (size)*NR_HASH )

	)

12 
	#hash
(
bh
Ë
hash_èbÀ
[
	`_hash‚
((bh)->
dev
,(bh)->
blockƒ
,(bh)->
size
)]

	)

14 
buf„r_hód
 *
	g°¨t_buf„r
[
NR_BUFFER
] ;

15 
	gbuf„r_size
[
NR_BUFFER
];

16 * 
	gbuf„r_°¨t
 = (*)
K_MEMORY_BEGIN
 ;

17 
buf„r_hód
 *
	ghash_èbÀ
[
NR_HASH
*
NR_BUFFER
];

18 
buf„r_hód
 *
	g‰ì_li°
[
NR_BUFFER
];

19 
	gbuf„r_num
[
NR_BUFFER
] = { 0 };

20 
sync_dev
–
dev
 );

22 
	$öô_buf„r
–
u32
 
buf„r_íd
 )

24 
	`öô_hash
();

25 
i
;

26 *
b
 = (*)
buf„r_íd
;

27 
buf„r_hód
 *
h
;

28  
i
=0; i<
NR_BUFFER
; i++ )

30 
°¨t_buf„r
[
i
] = 
buf„r_°¨t
 + i*0x20000;

31 
buf„r_size
[
i
] = 1 << i;

33 if–
buf„r_íd
 <= 1<<20 )

34 
	`∑nic
("bufferÉndÜessÅhan buffer start 1M!\n");

36  
i
=
NR_BUFFER
-1; i>=0; i-- )

38 
h
 = 
°¨t_buf„r
[
i
];

39  (
b
 -512*
buf„r_size
[
i
]Ë>(*)(
h
+1) )

41 
h
->
pd©a
 = (*)
b
;

42 
h
->
blockƒ
 = 0;

43 
h
->
dev
 = 0;

44 
h
->
size
 = 
i
;

45 
h
->
dút
 = 1;

46 
h
->
cou¡
 = 0;

47 
h
->
waô
 = 
NULL
;

48 
h
->
¥ev
 = 
NULL
;

49 
h
->
√xt
 = 
NULL
;

50 
h
->
¥ev_‰ì
 = h-1;

51 
h
->
√xt_‰ì
 = h+1;

52 
h
++;

53 
buf„r_num
[
i
]++;

55 
h
--;

56 
‰ì_li°
[
i
] = 
°¨t_buf„r
[i];

57 
‰ì_li°
[
i
]->
¥ev_‰ì
 = 
h
;

58 
h
->
√xt_‰ì
 = 
‰ì_li°
[
i
];

59 
b
 = 
°¨t_buf„r
[
i
];

61  
i
=0; i<
NR_HASH
*
NR_BUFFER
; i++ )

62 
hash_èbÀ
[
i
] = 
NULL
;

63 
	}
}

65 
ölöe
 
	$ªmove_‰om_queues
–
buf„r_hód
 *
bh
 )

68 if–
bh
->
√xt
 )

69 
bh
->
√xt
->
¥ev
 = bh->prev;

70 if–
bh
->
¥ev
 )

71 
bh
->
¥ev
->
√xt
 = bh->next;

72 if–
	`hash
(
bh
) == bh )

73 
	`hash
(
bh
Ëbh->
√xt
;

74 if–!(
bh
->
¥ev_‰ì
Ë|| !(bh->
√xt_‰ì
) )

75 
	`∑nic
("free blockÜistÉrror!\n");

77 
bh
->
¥ev_‰ì
->
√xt_‰ì
 = bh->next_free;

78 
bh
->
√xt_‰ì
->
¥ev_‰ì
 = bh->prev_free;

79 if–
‰ì_li°
[
bh
->
size
] == bh )

80 
‰ì_li°
[
bh
->
size
] = bh->
√xt_‰ì
 ;

81 
	}
}

83 
ölöe
 
	$ö£π_öto_queues
–
buf„r_hód
 *
bh
 )

86 
bh
->
√xt_‰ì
 = 
‰ì_li°
[bh->
size
];

87 
bh
->
¥ev_‰ì
 = 
‰ì_li°
[bh->
size
]->prev_free;

88 
‰ì_li°
[
bh
->
size
]->
¥ev_‰ì
->
√xt_‰ì
 = bh;

89 
‰ì_li°
[
bh
->
size
]->
¥ev_‰ì
 = bh;

92 
bh
->
√xt
 = 
NULL
;

93 
bh
->
¥ev
 = 
NULL
;

94 if–!
bh
->
dev
 )

96 
bh
->
√xt
 = 
	`hash
( bh );

97 
	`hash
(
bh
) = bh;

98 
bh
->
√xt
->
¥ev
 = bh;

99 
	}
}

101 
buf„r_hód
 *
	$föd_buf„r
–
dev
, 
block
, 
size
 )

103 
buf„r_hód
 *
tmp
,
bh
;

104 
bh
.
dev
 = dev;

105 
bh
.
blockƒ
 = 
block
;

106 
bh
.
size
 = size;

107  
tmp
=
	`hash
(&
bh
);Åmp!=
NULL
;Åm∞tmp->
√xt
 )

109 if–
tmp
->
dev
 =(
u16
)dev &&Åmp->
blockƒ
 =(
u64
)
block
 &&Åmp->
size
 =(
u8
)size )

110  
tmp
;

112  
NULL
;

113 
	}
}

114 
buf„r_hód
 *
	$gë_‰om_hash_èbÀ
–
dev
, 
block
, 
size
 )

116 
buf„r_hód
 *
bh
;

117 if–!(
bh
=
	`föd_buf„r
–
dev
, 
block
, 
size
)) )

118  
NULL
;

119 
bh
->
cou¡
++;

120 if–
bh
->
dev
 =dev && bh->
blockƒ
 =
block
 && bh->
size
 == size )

121  
bh
;

122  
NULL
;

123 
	}
}

125 
buf„r_hód
 *
	$gëblk
–
dev
, 
block
, 
size
 )

127 
buf„r_hód
 *
tmp
,*
bh
;

128 if–(
bh
 = 
	`gë_‰om_hash_èbÀ
–
dev
, 
block
, 
size
)Ë!
NULL
 )

130 if–
bh
->
dút
 != 0 )

132 
	`bwrôe
–
bh
 );

133 
bh
->
dút
 = 0;

135  
bh
;

137 
tmp
 = 
‰ì_li°
[
size
];

139 if–
tmp
->
cou¡
 )

141 
bh
 = 
tmp
;

143 } (
tmp
Òmp->
√xt_‰ì
Ë!
‰ì_li°
[
size
] );

144 if–!
bh
 )

145 
	`∑nic
("ˇn'àföd fªêblock, sizê%d.\n", 1<<
size
);

146 
bh
->
cou¡
 = 1;

147 
bh
->
dút
 = 1;

148 
	`ªmove_‰om_queues
(
bh
);

149 
bh
->
dev
 = dev;

150 
bh
->
blockƒ
 = 
block
;

151 
	`ö£π_öto_queues
(
bh
);

152  
bh
;

153 
	}
}

155 
	$bªl£
–
buf„r_hód
 *
bh
 )

157 if–
bh
 =
NULL
 )

160 if–
bh
->
cou¡
 == 0 )

162 
	`as£π
("tryingÅo free free buffer!\n");

165 
bh
->
cou¡
--;

166 if–
bh
->
dút
 != 0 )

168 
	`WR_SECT
–
bh
 );

169 
bh
->
dút
 = 0;

171 
	}
}

172 
	$bdúty
–
buf„r_hód
 *
bh
 )

174 if–!
bh
 )

176 
bh
->
dút
 = 1;

177 
	}
}

179 
buf„r_hód
 *
	$bªad
–
dev
, 
block
, 
size
 )

181 
buf„r_hód
 *
bh
;

182 if–!(
bh
=
	`gëblk
(
dev
,
block
,
size
)) )

183 
	`∑nic
("bread:getblkÑeturn NULL !\n");

184 if–
bh
->
dút
 != 0 )

186 
	`RD_SECT
–
bh
 );

187 
bh
->
dút
 = 0;

189  
bh
;

190 
	}
}

192 
	$bwrôe
–
buf„r_hód
 *
bh
 )

194 
	`bdúty
–
bh
 );

195 
	`bªl£
–
bh
 );

197 
	}
}

199 
	$sys_sync
()

201 
i
,
j
;

202 
buf„r_hód
 *
bh
;

204  
i
=0; i<
NR_BUFFER
; i++ )

206 
bh
 = 
°¨t_buf„r
[
i
];

207  
j
=0; j<
buf„r_num
[
i
]; j++, 
bh
++ )

208 if–
bh
->
dút
 )

209 
	`WR_SECT
(
bh
);

212 
	}
}

214 
	$sync_dev
–
dev
 )

216 
i
,
j
;

217 
buf„r_hód
 *
bh
;

219  
i
=0; i<
NR_BUFFER
; i++ )

221 
bh
 = 
°¨t_buf„r
[
i
];

222  
j
=0; j<
buf„r_num
[
i
]; j++, 
bh
++ )

224 if–
bh
->
dev
 != dev )

226 if–
bh
->
dev
 =dev && bh->
dút
 )

227 
	`WR_SECT
(
bh
);

231 
	}
}

	@fs/fs.c

2 
	~"ty≥.h
"

3 
	~"c⁄°.h
"

4 
	~"¥Ÿe˘.h
"

5 
	~"°rög.h
"

6 
	~"fs.h
"

7 
	~"¥oc.h
"

8 
	~"ây.h
"

9 
	~"c⁄sﬁe.h
"

10 
	~"¥Ÿo.h
"

11 
	~"lib/°dio.h
"

12 
	~"°rög.h
"

14 
	~"hd.h
"

16 
dev_drv_m≠
 
	gdd_m≠
[] = {

17 {
INVALID_DRIVER
},

18 {
INVALID_DRIVER
},

19 {
INVALID_DRIVER
},

20 {
TASK_HD
},

21 {
TASK_TTY
},

22 {
INVALID_DRIVER
},

25 
fûe_desc
 
	gfûe_desc_èbÀ
[
NR_FILE_DESC
];

26 
¥oc
 *
	gpˇŒî
;

27 
m_öode
 *
	groŸ_öode
;

29 
öô_fs
();

30 
mkfs
();

31 
fs_f‹k
–
MESSAGE
 *
msg
 );

32 
fs_exô
–
MESSAGE
 *
msg
 );

34 
	$èsk_fs
()

36 
	`¥ötk
("Task FS begins.\n");

38 
	`öô_buf„r
( 0x300000 );

39 
	`öô_fs
();

41 
MESSAGE
 
msg
;

45 
	`£nd_ªcv
–
RECEIVE
, 
ANY
, &
msg
 );

46 
§c
 = 
msg
.
sour˚
;

47 *
buf
 = 
msg
.
BUF
;

48 
msg
.
ty≥
)

50 
OPEN
:

51 
msg
.
FD
 = 
	`do_›í
( &msg );

53 
CLOSE
:

54 
msg
.
RETVAL
 = 
	`do_˛o£
( &msg );

56 
READ
:

57 
WRITE
:

58 
msg
.
CNT
 = 
	`do_rdwr
( &msg );

60 
RESUME_PROC
:

61 
§c
 = 
msg
.
PROC_NR
;

63 
FORK
:

64 
msg
.
RETVAL
 = 
	`fs_f‹k
( &msg );

66 
EXIT
:

67 
msg
.
RETVAL
 = 
	`fs_exô
( &msg );

70 
	`dump_msg
("FS:unknow mesßge:", &
msg
 );

71 
	`as£π
(0);

75 
buf
 = 
msg
.
BUF
;

76 if–
msg
.
ty≥
 !
SUSPEND_PROC
 )

78 
msg
.
ty≥
 = 
SYSCALL_RET
;

79 
	`£nd_ªcv
–
SEND
, 
§c
, &
msg
 );

82 
	`•ö
("FS");

83 
	}
}

85 
	$öô_fs
()

87 
i
;

88  
i
=0; i<
NR_FILE_DESC
; i++ )

89 
	`mem£t
–&
fûe_desc_èbÀ
[
i
], 0, (
fûe_desc
) );

90  
i
=0; i<
NR_INODE
; i++ )

91 
	`mem£t
–&
öode_èbÀ
[
i
], 0, (
m_öode
 ) );

93 
m_su≥r_block
 *
sb
 = 
su≥r_block_èbÀ
;

94  ; 
sb
<&
su≥r_block_èbÀ
[
NR_SUPER_BLOCK
]; sb++ )

95 
sb
->
sb_dev
 = 
NO_DEV
;

97 
MESSAGE
 
drivî_msg
;

98 
drivî_msg
.
ty≥
 = 
DEV_OPEN
;

99 
drivî_msg
.
DEVICE
 = 
	`MINOR
(
ROOT_DEV
);

100 
	`£nd_ªcv
(
BOTH
, 
dd_m≠
[
	`MAJOR
(
ROOT_DEV
)].
drivî_ƒ
, &
drivî_msg
);

102 
	`mkfs
();

104 
	`mou¡_roŸ
( );

105 
	}
}

107 
	$mkfs
()

109 
i
;

110 
MESSAGE
 
drivî_msg
;

112 
PART_INFO
 
geo
;

113 
drivî_msg
.
ty≥
 = 
DEV_IOCTL
;

114 
drivî_msg
.
DEVICE
 = 
	`MINOR
(
ROOT_DEV
);

115 
drivî_msg
.
REQUEST
 = 
DIOCTL_GET_GEO
;

116 
drivî_msg
.
BUF
 = &
geo
;

117 
drivî_msg
.
PROC_NR
 = 
TASK_FS
;

118 
	`£nd_ªcv
–
BOTH
, 
dd_m≠
[
	`MAJOR
(
ROOT_DEV
)].
drivî_ƒ
, &
drivî_msg
 );

120 
	`¥ötk
("dev size: 0x%x se˘‹s\n", 
geo
.
size
 );

123 
d_su≥r_block
 
sb
;

124 
sb
.
magic
 = 
MAGIC_V1
;

125 
sb
.
fú°_block_èbÀ_£˘
 = 
FIRST_BLOCK_TABLE
 ;

126 
sb
.
roŸ_öode
 = 
ROOT_INODE
 ;

127 
sb
.
z⁄e_mëe_£˘s
 = 
ZONE_METE_SECTS
;

128 
sb
.
z⁄e_d©a_£˘s
 = 
ZONE_DATA_SECTS
;

130 
buf„r_hód
 
bh
 ;

131 
bh
.
pd©a
 = (*)
	`kmÆloc
–
SECTOR_SIZE
 );

132 
bh
.
dev
 = 
ROOT_DEV
;

133 
bh
.
blockƒ
 = 
FIRST_SUPER_BLOCK
;

134 
bh
.
size
 = 1;

135 
	`mem£t
–
bh
.
pd©a
, 0x60, 
SECTOR_SIZE
 * 2 );

136 
	`mem˝y
–
bh
.
pd©a
, &
sb
, (
d_su≥r_block
) );

137 
	`WR_SECT
–&
bh
 );

139 
	`¥ötk
("devbase: 0x%x00, sb:0x%x00, btable:0x%x00, first zone:0x%x00, "

141 
geo
.
ba£
 * 2,

142 (
geo
.
ba£
 +2) * 2,

143 (
geo
.
ba£
 +4) * 2,

144 (
geo
.
ba£
 +6) * 2,

145 (
geo
.
ba£
 +6) * 2,

146 (
geo
.
ba£
 +6 +
ZONE_METE_SECTS
) *2 );

149 
	`mem£t
–
bh
.
pd©a
, 0, 
SECTOR_SIZE
 * 2 );

150 
d_block_èbÀ_íåy
 
bt
;

151  
i
=0; i<
NR_BLOCK_TABLE_ENTRY
; i++ )

153 
bt
.
block_size
 = 1 << 
i
;

154 if–
i
 == 0 )

156 
bt
.
fú°_öode_num
 = 1;

160 
d_block_èbÀ_íåy
 *
pbt
 = (d_block_èbÀ_íåy *)
bh
.
pd©a
;

161 
bt
.
fú°_öode_num
 = 
pbt
[
i
-1].fú°_öode_num +pbt[i-1].
öode_cou¡
 ;

163 
bt
.
‰ì_öode_num
 = bt.
fú°_öode_num
 ;

164 
bt
.
öode_cou¡
 = 
ZONE_DATA_SECTS
 / bt.
block_size
;

165 
bt
.
°¨t_im≠_ƒ
 = 
ZONE_ALL_SECTS
 * 
i
 + 
FIRST_ZONE
;

166 
bt
.
°¨t_ôabÀ_ƒ
 = bt.
°¨t_im≠_ƒ
 + 
ZONE_IMAP_SECTS
;

167 
bt
.
°¨t_d©a_ƒ
 = bt.
°¨t_im≠_ƒ
 + 
ZONE_METE_SECTS
;

168 
bt
.
dev
 = 
ROOT_DEV
;

169 
	`mem˝y
–
bh
.
pd©a
 + 
i
 * (
d_block_èbÀ_íåy
Ë, &
bt
, (d_block_table_entry) );

171 
bh
.
blockƒ
 = 
FIRST_BLOCK_TABLE
 ;

172 
	`WR_SECT
–&
bh
 );

175 
	`mem£t
–
bh
.
pd©a
, 0, 
SECTOR_SIZE
 );

176  
i
=0; i< (
NR_CONSOLES
 +2); i++ )

177 ((
u8
 *)(
bh
.
pd©a
))[0] |1<< 
i
;

178 
	`as£π
–((
u8
 *)(
bh
.
pd©a
))[0] == 0x1f );

179 
bh
.
blockƒ
 = 
FIRST_ZONE
 ;

180 
bh
.
size
 = 0;

181 
	`WR_SECT
–&
bh
 );

182 
	`mem£t
–
bh
.
pd©a
, 0, 
SECTOR_SIZE
 );

183 ((
u8
 *)(
bh
.
pd©a
))[0] = 0x1f;

184 
bh
.
blockƒ
 = 
bt
.
°¨t_im≠_ƒ
 ;

185 
bh
.
size
 = 0;

186 
	`WR_SECT
–&
bh
 );

188 
	`mem£t
–
bh
.
pd©a
, 0, 
SECTOR_SIZE
 );

189  
i
=1; i<
bt
.
öode_cou¡
/
SECTOR_SIZE
 + 1; i++ )

191 
bh
.
blockƒ
 = 
FIRST_ZONE
 + 
i
;

192 
	`WR_SECT
–&
bh
 );

196 
	`mem£t
–
bh
.
pd©a
, 0, 
SECTOR_SIZE
 );

197 
d_öode
 *
pi
 = (d_öodê*)
bh
.
pd©a
;

198 
pi
->
mode
 = 
I_DIRECTORY
;

199 
pi
->
size
 = 0;

200 
pi
->
°¨t_d©a_£˘
 = 
FIRST_ZONE
 + 
ZONE_METE_SECTS
 ;

201 
pi
->
√xt_öode_id
 = 0;

202 
pi
->
∆öks
 = 1;

203 
pi
->
bôm≠
 = 1;

204 
	`mem˝y
–
pi
->
«me
, "/", ("/") );

206  
i
=0; i<
NR_CONSOLES
; i++ )

208 
pi
++;

209 
pi
->
mode
 = 
I_CHAR_SPECIAL
;

210 
pi
->
size
 = 0;

211 
pi
->
°¨t_d©a_£˘
 = 
	`MAKE_DEV
–
DEV_CHAR_TTY
, 
i
);

212 
pi
->
√xt_öode_id
 = 0;

213 
pi
->
∆öks
 = 1;

214 
pi
->
bôm≠
 = 0;

215 
	`•rötf
–
pi
->
«me
, "dev_ây%d", 
i
+1 );

217 
bh
.
blockƒ
 = 
FIRST_ZONE
 + 
ZONE_IMAP_SECTS
 ;

218 
	`WR_SECT
–&
bh
 );

220 
	`mem£t
–
bh
.
pd©a
, 0, 
SECTOR_SIZE
 );

221 *
«mes
[] ={

225 c⁄° 
cmd_˙t
 = 2;

226 
pi
 = (
d_öode
 *)
bh
.
pd©a
;

227  
i
=0; i<
cmd_˙t
; i++ )

229 
pi
->
mode
 = 
I_REGULAR
;

230 
pi
->
size
 = 6;

231 
pi
->
°¨t_d©a_£˘
 = 
bt
.
°¨t_d©a_ƒ
 + 
i
*bt.
block_size
 ;

232 
pi
->
√xt_öode_id
 = 0;

233 
pi
->
∆öks
 = 1;

234 
pi
->
bôm≠
 = 0;

235 
	`•rötf
–
pi
->
«me
, 
«mes
[
i
] );

236 
pi
++;

238 
bh
.
blockƒ
 = 
bt
.
°¨t_ôabÀ_ƒ
;

239 
	`WR_SECT
–&
bh
 );

245 
	`mem£t
–
bh
.
pd©a
, 0, 
SECTOR_SIZE
 );

246 
bh
.
blockƒ
 = 
FIRST_ZONE
 + 
ZONE_METE_SECTS
 ;

247 
d_«me_vÆue_∑ú
 
kv_∑ú
[] ={

253 { "hñlo", 
bt
.
fú°_öode_num
 },

254 { "ˇt", 
bt
.
fú°_öode_num
 + 1}

256 
	`båì_√w_roŸ
–&
bh
, 
kv_∑ú
, (kv_pair)/(kv_pair[0]) );

257 
	`WR_SECT
–&
bh
 );

259 
	`k‰ì
–
bh
.
pd©a
 );

260 
	}
}

262 
	$fs_f‹k
–
MESSAGE
 *
msg
 )

264 
i
;

265 
¥oc
 *
chûd
 = 
¥oc_èbÀ
 + 
msg
->
PID
;

266  
i
=0; i< 
NR_FILES
; i++ )

268 if–
chûd
->
fûp
[
i
] )

270 
chûd
->
fûp
[
i
]->
fd_cou¡
++;

271 
chûd
->
fûp
[
i
]->
fd_öode
->
cou¡
++;

275 
	}
}

277 
	$fs_exô
–
MESSAGE
 *
msg
 )

279 
i
;

280 
¥oc
 *
p
 = 
¥oc_èbÀ
 + 
msg
->
PID
;

281  
i
=0; i<
NR_FILES
; i++ )

283 if–
p
->
fûp
[
i
] )

285 
p
->
fûp
[
i
]->
fd_öode
->
cou¡
--;

286 if–--
p
->
fûp
[
i
]->
fd_cou¡
 == 0 )

287 
p
->
fûp
[
i
]->
fd_öode
 = 0;

288 
p
->
fûp
[
i
] = 0;

292 
	}
}

	@fs/inode.c

1 
	~"ty≥.h
"

2 
	~"°rög.h
"

3 
	~"fs.h
"

5 
m_öode
 
	göode_èbÀ
[
NR_INODE
];

6 
£t_im≠_fú°_zîo
–
d_block_èbÀ_íåy
 *
bt
, 
m_öode
 *
öode
 );

7 
˛r_im≠_bô
–
d_block_èbÀ_íåy
 *
bt
, 
m_öode
 *
öode
 );

8 
d_block_èbÀ_íåy
 *
gë_block_èbÀ_‰om_ƒ
–
dev
, 
ƒ
 );

9 
gë_öode_öfo_‰om_ƒ
–
m_öode
 *
öode
, 
dev
, 
ƒ
 );

12 
‰ì_memîy_öode
–
m_öode
 *
öode
 );

13 
m_öode
 *
Æloc_memîy_öode
( );

14 
d_öode
 *
gë_öode_ôabÀ
–
dev
, 
ƒ
 );

15 
put_öode_ôabÀ
–
m_öode
 *
öode
 );

16 
‰ì_öode
–
m_öode
 *
öode
 );

17 
put_öode_d©a
–
m_öode
 *
öode
 );

19 
	$övÆid©e_öode
–
dev
 )

21 
i
;

22 
m_öode
 *
pöode
;

23 
buf„r_hód
 *
bh
 ;

24 
pöode
 = 
öode_èbÀ
;

25  
i
=0; i<
NR_INODE
; i++,
pöode
++ )

27 if–
pöode
->
dev
 == dev )

29 if–
pöode
->
cou¡
 )

30 
	`¥ötk
("inode used onÑemoved disk!\n");

31 
pöode
->
dev
 =Ööode->
dút
 = 0;

32 
bh
 = 
	`bªad
–
pöode
->
dev
,Ööode->
°¨t_d©a_£˘
,Ööode->
size
 );

33 
	`bwrôe
–
bh
 );

34 
	`bªl£
–
bh
 );

37 
	}
}

38 
	$‰ì_öode
–
m_öode
 *
öode
 )

40 
	`‰ì_memîy_öode
–
öode
 );

41 
	}
}

42 
m_öode
 *
	$gë_öode
–
dev
, 
ƒ
 )

44 
m_öode
 *
öode
 = 
NULL
;

45 
i
;

46 if–
ƒ
 == 0 )

47  
NULL
;

48  
i
=0; i<
NR_INODE
; i++ )

50 if–
öode_èbÀ
[
i
].
dev
 =dev && inode_èbÀ[i].
öode_num
 =
ƒ
 )

51 
öode
 = 
öode_èbÀ
 + 
i
;

53 if–
öode
 =
NULL
 )

55 
öode
 = 
	`Æloc_memîy_öode
();

56 
	`gë_öode_öfo_‰om_ƒ
–
öode
, 
dev
, 
ƒ
 );

57 *((
d_öode
 *)
öode
Ë*
	`gë_öode_ôabÀ
–
dev
, 
ƒ
 );

59  
öode
;

60 
	}
}

61 
	$put_öode
–
m_öode
 *
öode
 )

63 
	`put_öode_ôabÀ
–
öode
 );

64 
	`put_öode_d©a
–
öode
 );

65 
	`‰ì_memîy_öode
–
öode
 );

66 
	}
}

68 
	$mov_öode_d©a
–
m_öode
 *
des
, m_öodê*
§c
 )

70 
buf„r_hód
 *
d_bh
 = 
	`bªad
–
des
->
dev
, des->
°¨t_d©a_£˘
, des->
size
 );

71 
buf„r_hód
 *
s_bh
 = 
	`bªad
–
§c
->
dev
, src->
°¨t_d©a_£˘
, src->
size
 );

72 
	`mem˝y
–
d_bh
->
pd©a
, 
s_bh
->pd©a, 
SECTOR_SIZE
 * (1<<
§c
->
size
) );

73 
	`mem£t
–
s_bh
->
pd©a
, 0, 
SECTOR_SIZE
 * (1<< 
§c
->
size
) );

74 
	`bwrôe
–
d_bh
 );

75 
	`bwrôe
–
s_bh
 );

76 
	}
}

78 
buf„r_hód
 *
	$gë_öode_d©a
–
dev
, 
ƒ
 )

80 
m_öode
 
öode
;

81 
	`gë_öode_öfo_‰om_ƒ
–&
öode
, 
dev
, 
ƒ
 );

82 
buf„r_hód
 *
bh
 = 
	`bªad
–
öode
.
dev
, inode.
°¨t_d©a_£˘
, inode.
size
 );

83  
bh
;

84 
	}
}

86 
	$put_öode_d©a
–
m_öode
 *
öode
 )

88 
buf„r_hód
 *
bh
 = 
	`gë_öode_d©a
–
öode
->
dev
, inode->
öode_num
 );

89  
	`bwrôe
–
bh
 );

90 
	}
}

92 
m_öode
 *
	$√w_öode
–
dev
, 
size
 )

94 
m_su≥r_block
 *
sb
;

95 
d_block_èbÀ_íåy
 *
bt
;

96 
m_öode
 *
öode
 = 
NULL
;

97 if–(
sb
=
	`gë_su≥r_block
(
dev
)Ë=
NULL
 )

98 
	`∑nic
("new_inode with unknow device!\n");

99 if–(
bt
=
	`gë_block_èbÀ
(
dev
, 
size
, 0)Ë=
NULL
 )

100 
	`∑nic
("new_inodeÇot find blockÅable!\n");

101 
öode
 = 
	`Æloc_memîy_öode
();

102 
	`£t_im≠_fú°_zîo
–
bt
, 
öode
 );

103  
öode
;

104 
	}
}

106 
	$dñëe_öode
–
m_öode
 *
öode
 )

108 
d_block_èbÀ_íåy
 *
bt
;

109 if–(
bt
=
	`gë_block_èbÀ
(
öode
->
dev
, inode->
size
, 0)Ë=
NULL
 )

110 
	`∑nic
("delete_inodeÇot find blockÅable!\n");

111 
	`˛r_im≠_bô
–
bt
, 
öode
 );

112 
öode
->
mode
 = 0;

113 
öode
->
size
 = 0;

114 
öode
->
°¨t_d©a_£˘
 = 0;

115 
öode
->
√xt_öode_id
 = 0;

116 
öode
->
∆öks
 = 0;

117 
öode
->
bôm≠
 = 0;

118 
	`put_öode_ôabÀ
–
öode
 );

119 
	`‰ì_memîy_öode
–
öode
 );

121 
	}
}

123 
m_öode
 *
	$Æloc_memîy_öode
( )

125 
i
;

126 
m_öode
 *
öode
 = 
NULL
;

127  
i
=0; i<
NR_INODE
; i++ )

131 if–
öode_èbÀ
[
i
].
cou¡
 == 0)

133 
öode
 = 
öode_èbÀ
 + 
i
 ;

134 
öode
->
cou¡
 = 1;

135  
öode
;

138 if–
öode
 =
NULL
 )

139 
	`¥ötk
("inode is used up!\n");

142 
	`mem£t
–
öode
, 0, –
m_öode
) );

143  
öode
;

145  
NULL
;

146 
	}
}

147 
	$‰ì_memîy_öode
–
m_öode
 *
öode
 )

149 if–
öode
->
cou¡
 > 0 )

150 
öode
->
cou¡
--;

153 
	}
}

154 
d_öode
 *
	$gë_öode_ôabÀ
–
dev
, 
ƒ
 )

156 
m_öode
 
öode
;

157 
buf„r_hód
 *
bh
;

158 
d_öode
 *
tmp
;

159 
	`gë_öode_öfo_‰om_ƒ
–&
öode
, 
dev
, 
ƒ
 );

160 
bh
 = 
	`bªad
–
öode
.
dev
, inode.
°¨t_ôabÀ_£˘
, 0 );

161 
tmp
 = (
d_öode
 *)(
bh
->
pd©a
);

162 
	`bªl£
–
bh
 );

163  
tmp
 + (
ƒ
 - 
öode
.
z⁄e_fú°_öode_num
)%8 ;

164 
	}
}

165 
	$put_öode_ôabÀ
–
m_öode
 *
öode
 )

167 
buf„r_hód
 *
bh
 = 
	`bªad
–
öode
->
dev
, inode->
°¨t_ôabÀ_£˘
, 0 );

168 
d_öode
 *
tmp
 = (d_öodê*)(
bh
->
pd©a
 );

169 
tmp
 =Åm∞+ (
öode
->
°¨t_ôabÀ_£˘
 - inode->
z⁄e_fú°_öode_num
)%8;

170 *
tmp
 = *((
d_öode
 *)
öode
);

171 
	`‰ì_öode
–
öode
 );

172 
	`bwrôe
–
bh
 );

173 
	}
}

176 
d_block_èbÀ_íåy
 *
	$gë_block_èbÀ_‰om_ƒ
–
dev
, 
ƒ
 )

178 
m_su≥r_block
 *
sb
;

179 
d_block_èbÀ_íåy
 *
bt
;

180 
i
;

181 if–(
sb
=
	`gë_su≥r_block
(
dev
)Ë=
NULL
 )

182 
	`∑nic
("new_inode with unknow device!\n");

183 
bt
 = 
sb
->
p_block_èbÀ
;

184  
i
=0; i<
NR_BLOCK_TABLE_ENTRY
; i++,
bt
++ )

186 if–
bt
->
fú°_öode_num
 <
ƒ
 &&Ç∏< bt->fú°_öode_num + bt->
öode_cou¡
 )

187  
bt
;

189  
NULL
;

190 
	}
}

192 
	$gë_öode_öfo_‰om_ƒ
–
m_öode
 *
öode
, 
dev
, 
ƒ
 )

194 
d_block_èbÀ_íåy
 *
bt
 = 
	`gë_block_èbÀ_‰om_ƒ
–
dev
, 
ƒ
 );

195 
i
=0,
size
 = 
bt
->
block_size
;

196  
size
 != 1 )

198 
size
 = size >> 1;

199 
i
++;

201 
öode
->
size
 = 
i
;

202 
öode
->
°¨t_im≠_£˘
 = 
bt
->
°¨t_im≠_ƒ
 + (
ƒ
 - bt->
fú°_öode_num
Ë/ 
SECTOR_SIZE
;

203 
öode
->
°¨t_ôabÀ_£˘
 = 
bt
->
°¨t_ôabÀ_ƒ
 + (
ƒ
 - bt->
fú°_öode_num
) /16;

204 
öode
->
°¨t_d©a_£˘
 = 
bt
->
°¨t_d©a_ƒ
 + (
ƒ
 - bt->
fú°_öode_num
Ë*bt->
block_size
;

205 
öode
->
z⁄e_fú°_öode_num
 = 
bt
->
fú°_öode_num
;

206 
öode
->
öode_num
 = 
ƒ
;

207 
öode
->
dev
 = dev;

208 
	}
}

222 
	$˛r_im≠_bô
–
d_block_èbÀ_íåy
 *
bt
, 
m_öode
 *
öode
 )

224 
im≠_ƒ
 = 
bt
->
°¨t_im≠_ƒ
;

225 
off
 = 
öode
->
öode_num
 - 
bt
->
fú°_öode_num
;

226 if–
öode
->
öode_num
 < 
bt
->
‰ì_öode_num
 )

227 
bt
->
‰ì_öode_num
 = 
öode
->
öode_num
;

228 
block
 = 
off
 / 
SECTOR_SIZE
;

229 
buf„r_hód
 *
bh
 = 
	`bªad
–
bt
->
dev
, 
im≠_ƒ
 + 
block
, 0 );

230 
i
 = 
off
 / 32;

231 
j
 = 
off
 % 32;

232 
u32
 *
tmp
 = (u32 *)(
bh
->
pd©a
);

233 
tmp
 =Åm∞+ 
i
;

234 *
tmp
 = *tm∞& ~(1<<
j
);

235 
	`bwrôe
–
bh
 );

237 
	}
}

238 
	$£t_im≠_fú°_zîo
–
d_block_èbÀ_íåy
 *
bt
, 
m_öode
 *
öode
 )

240 
im≠_ƒ
 = 
bt
->
°¨t_im≠_ƒ
 ;

241 
‰ì_block
 = (
bt
->
‰ì_öode_num
 - bt->
fú°_öode_num
 )/
SECTOR_SIZE
 ;

242 
i
,
j
,
öode_ƒ
;

243 
buf„r_hód
 *
bh
 ;

245  ; 
‰ì_block
 < 
bt
->
öode_cou¡
/
SECTOR_SIZE
 +1; free_block++ )

247 
bh
 = 
	`bªad
–
bt
->
dev
, 
im≠_ƒ
 + 
‰ì_block
, 0 );

248 
u32
 *
tmp
 = (u32 *)(
bh
->
pd©a
);

249  
i
=0; i<
SECTOR_SIZE
/32; i++,
tmp
++ )

251 if–*
tmp
 != 0xffffffff )

253  
j
=0; j<32; j++ )

254 if–(~(*
tmp
Ë& (1<<
j
)) != 0 )

256 
öode_ƒ
 = 
bt
->
‰ì_öode_num
 + 
‰ì_block
 *512 + 
i
 * 32 + 
j
;

257 if–
j
 > 
bt
->
‰ì_öode_num
 + bt->
öode_cou¡
 )

259 
	`¥ötk
("inode is used up!\n");

263 *
tmp
 = *tm∞| 1 << 
j
;

264 
	`bwrôe
–
bh
 );

266 
bt
->
‰ì_öode_num
 = 
öode_ƒ
 + 1;

267 
öode
->
dev
 = 
bt
->dev;

268 
öode
->
size
 = 
bt
->
block_size
;

269 
öode
->
öode_num
 = 
öode_ƒ
;

270 
öode
->
°¨t_d©a_£˘
 = 
bt
->
°¨t_d©a_ƒ
 + (
öode_ƒ
 - bt->
fú°_öode_num
Ë* bt->
block_size
;

271 
öode
->
°¨t_ôabÀ_£˘
 = 
bt
->
°¨t_ôabÀ_ƒ
 + (
öode_ƒ
 - bt->
fú°_öode_num
)/8;

272 
öode
->
°¨t_im≠_£˘
 = 
bt
->
°¨t_im≠_ƒ
 + (
öode_ƒ
 - bt->
fú°_öode_num
)/
SECTOR_SIZE
;

273 
öode
->
z⁄e_fú°_öode_num
 = 
bt
->
fú°_öode_num
;

274 
öode
->
√xt_öode_id
 = 0;

275 
öode
->
∆öks
 = 1;

276 
öode
->
upd©e
 = 1;

277 
öode
->
dút
 = 0;

278  
öode_ƒ
;

281 
	`bªl£
–
bh
 );

284 
	}
}

	@fs/k_memory.c

1 
	~"ty≥.h
"

2 
	~"c⁄°.h
"

3 
	~"°ddef.h
"

4 
	~"fs.h
"

7 
u32
 
	gkm_m≠
[
K_MEMORY_SECTS
/32] = { 0 };

8 * 
	gp_‰ì
 = (*)0x700000;

10 
£t_m≠
–*
p
 );

11 
˛ór_m≠
–*
p
 );

13 *
föd_√xt_‰ì
–*
p
 );

15 *
	$kmÆloc
–
size
 )

17 
blocks
 = (
size
 -1)/
SECTOR_SIZE
 + 1 ;

18 if–
p_‰ì
 >= (*)0x800000 )

19  
NULL
;

20 *
p
 = 
p_‰ì
;

21 
	`as£π
(
p
>=(*)0x700000);

22 if–
p
 < (*)0x800000 )

24 
	`£t_m≠
(
p
);

25 
p_‰ì
 = 
	`föd_√xt_‰ì
–
p
 );

26  
p
;

30 
p_‰ì
 = (*)0x800000;

31 
	`¥ötk
("K_MEMORY is used up\n");

32  
NULL
;

34 
	}
}

36 
	$k‰ì
–* 
p
 )

38 if–
p
 < 
p_‰ì
 )

39 
p_‰ì
 = 
p
;

40 
	`˛ór_m≠
–
p
 );

41 
	}
}

43 
	$£t_m≠
–*
p
 )

45 
u32
 
i
 = ((u32)
p
-
K_MEMORY_BEGIN
Ë/ 
SECTOR_SIZE
 / 32;

46 
u32
 
j
 = ((u32)
p
-
K_MEMORY_BEGIN
Ë/ 
SECTOR_SIZE
 %32;

47 
km_m≠
[
i
] |1 << 
j
;

48 
	}
}

49 
	$˛ór_m≠
–*
p
 )

51 
u32
 
i
 = ((u32)
p
-
K_MEMORY_BEGIN
Ë/ 
SECTOR_SIZE
 / 32;

52 
u32
 
j
 = ((u32)
p
-
K_MEMORY_BEGIN
Ë/ 
SECTOR_SIZE
 %32;

53 
km_m≠
[
i
] &~(1 << 
j
);

54 
	}
}

67 *
	$föd_√xt_‰ì
–*
p
 )

69 
u32
 
i
 = ((u32)
p
-
K_MEMORY_BEGIN
Ë/ 
SECTOR_SIZE
 / 32;

70 
u32
 
j
;

71  
km_m≠
[
i
] == 0xffffffff )

73 
i
++;

75 
	`as£π
–
km_m≠
[
i
] != 0xffffffff )

76  
j
=0; j<32; j++ )

77 if–
km_m≠
[
i
] & (1<<
j
) )

81  (*)((
i
*32+
j
)*
SECTOR_SIZE
 + 
K_MEMORY_BEGIN
 ) ;

82 
	}
}

	@fs/link.c

1 
	~"fs.h
"

3 
	$do_u∆ök
–
§c
, 
«me
, 
«me_Àn
)

5 
∑th_«me
[
MAX_PATH
];

6 
	`as£π
–
«me_Àn
 < 
MAX_PATH
 );

7 
	`°∫˝y
–(*)
	`va2œ
(
TASK_FS
,
∑th_«me
), (*)va2œ(
§c
,
«me
), 
«me_Àn
 );

8 
∑th«me
[
«me_Àn
] = 0;

10 if–
	`°rcmp
(
∑th«me
, "/") == 0 )

11 
	`¥ötf
("FS:do_unlink can't unlinkÑoot!\n");

12 *
fûe_«me
 = 
NULL
;

13 
dú_öode_ƒ
 = 0;

14 
fûe_öode_ƒ
 = 
	`föd_íåy
–
∑th_«me
, &
fûe_«me
, &
dú_öode_ƒ
 );

15 
m_öode
 *
fûe_öode
 = 
	`gë_öode
–
ROOT_DEV
, 
fûe_öode_ƒ
 );

17 if–
fûe_öode
->
mode
 !
I_REGULAR
 )

19 
	`¥ötf
("ˇn'àªmovêfûê%†beˇu£ iài†nŸáÑeguœ∏fûe.\n", 
fûe_«me
 );

22 if–
fûe_öode
->
cou¡
 > 1 )

24 
	`¥ötf
("ˇn'àªmovêfûê%†beˇu£ inodêcou¡ i†%s.\n", 
fûe_«me
, 
fûe_öode
->
cou¡
 );

25 
ªtuƒ
 -1;

28 
	}
}

	@fs/namei.c

1 
	~"fs.h
"

4 
	#MAY_EXEC
 1

	)

5 
	#MAY_WRITE
 2

	)

6 
	#MAY_READ
 4

	)

9 
	$föd_fûe_ö_dú
–*
«me
, 
dev
, 
dú_öode_ƒ
 )

11 
m_öode
 *
öode
 = 
	`gë_öode
–
dev
, 
dú_öode_ƒ
 );

12  
	`båì_föd
–
öode
, 
«me
 );

13 
	}
}

14 
	$föd_íåy
–*
∑th_«me
, **
fûe_«me
, *
dú_öode_ƒ
 )

16 *
«me_íd
 = 
NULL
;

17 if–*
∑th_«me
!= '/' )

20 *
fûe_«me
 = 
∑th_«me
+1;

21 *
dú_öode_ƒ
 = 1;

22  (
«me_íd
=
	`°rchr
(*
fûe_«me
, '/')Ë!
NULL
 )

24 *
«me_íd
 = 0;

25 
	`¥ötk
–"dú i†%s\n", *
fûe_«me
 );

26 *
dú_öode_ƒ
=
	`föd_fûe_ö_dú
(*
fûe_«me
, 
ROOT_DEV
, *dir_inode_nr);

27 if–*
dú_öode_ƒ
 < 0 )

29 *
fûe_«me
 = 
«me_íd
+1 ;

31 
fûe_öode_ƒ
 = 
	`föd_fûe_ö_dú
–*
fûe_«me
 , 
ROOT_DEV
, *
dú_öode_ƒ
 );

32 
	`¥ötk
–"«mê¨ê%s\n", *
fûe_«me
 );

33 
	`¥ötk
–"fûêöodê%d\n", 
fûe_öode_ƒ
 );

34  
fûe_öode_ƒ
;

35 
	}
}

	@fs/open.c

1 
	~"fs.h
"

2 
	~"°rög.h
"

3 
	~"lib/f˙é.h
"

5 
m_öode
 *
¸óã_fûe
–*
«me
, 
dev
, 
dú_öode_ƒ
, 
size
 );

7 
	$do_›í
–
MESSAGE
 *
msg
 )

9 
Êags
 = 
msg
->
FLAGS
;

10 
«me_Àn
 = 
msg
->
NAME_LEN
 ;

11 
§c
 = 
msg
->
sour˚
;

12 
∑th_«me
[
MAX_PATH
];

13 
	`as£π
–
«me_Àn
 < 
MAX_PATH
 );

14 
	`mem˝y
–(*)
	`va2œ
–
TASK_FS
, 
∑th_«me
 ), (*)va2œ–
§c
, 
msg
->
PATHNAME
 ), 
«me_Àn
 );

15 
∑th_«me
[
«me_Àn
] = 0;

16 
fd
 = -1;

17 
i
;

18 *
fûe_«me
=
NULL
;

19 
¥oc
 *
pˇŒî
 = 
¥oc_èbÀ
 + 
§c
 ;

20  
i
=0; i<
NR_FILES
; i++ )

21 if–
pˇŒî
->
fûp
[
i
] == 0 )

23 
fd
 = 
i
;

26 if–
fd
<0 || fd>
NR_FILES
 )

27 
	`∑nic
(" fûp[] i†fuŒ (PID:%d)\n", 
	`¥oc2pid
(
pˇŒî
) );

28  
i
=0; i<
NR_FILE_DESC
; i++ )

29 if–
fûe_desc_èbÀ
[
i
].
fd_öode
 == 0 )

31 if–
i
>
NR_FILE_DESC
 )

32 
	`∑nic
("fûe_desc_èbÀ[] i†fuŒ (PID:%d)\n", 
	`¥oc2pid
(
pˇŒî
) );

33 
dú_öode_ƒ
 = 0;

34 
fûe_öode_ƒ
 = 
	`föd_íåy
–
∑th_«me
, &
fûe_«me
, &
dú_öode_ƒ
 );

35 
m_öode
 *
fûe_öode
 = 
NULL
;

36 if–
Êags
 & 
O_CREAT
 )

38 if–
fûe_öode_ƒ
 > 0 )

40 
	`¥ötk
(" fileÉxists.\n");

43 
fûe_öode
 = 
	`¸óã_fûe
–
fûe_«me
, 
ROOT_DEV
, 
dú_öode_ƒ
, 0 );

47 
	`as£π
–
Êags
 & 
O_RDWR
 );

48 if–
fûe_öode_ƒ
 <= 0 )

50 
fûe_öode
 = 
	`gë_öode
–
ROOT_DEV
, 
fûe_öode_ƒ
 );

52 if–
fûe_öode
 !
NULL
)

54 
pˇŒî
->
fûp
[
fd
] = 
fûe_desc_èbÀ
+
i
;

55 
fûe_desc_èbÀ
[
i
].
fd_öode
 = 
fûe_öode
;

56 
fûe_desc_èbÀ
[
i
].
fd_mode
 = 
Êags
;

57 
fûe_desc_èbÀ
[
i
].
fd_pos
 = 0;

59 
imode
 = 
fûe_öode
->
mode
 & 
I_TYPE_MASK
;

60 if–
imode
 =
I_CHAR_SPECIAL
 )

62 
MESSAGE
 
msg
;

63 
msg
.
ty≥
 = 
DEV_OPEN
;

64 
dev
 = 
fûe_öode
->
°¨t_d©a_£˘
;

65 
msg
.
DEVICE
 = 
	`MINOR
(
dev
);

66 
	`as£π
–
	`MAJOR
(
dev
) == 4 );

67 
	`£nd_ªcv
–
BOTH
, 
dd_m≠
[
	`MAJOR
(
dev
)].
drivî_ƒ
, &
msg
 );

69 if–
imode
 =
I_DIRECTORY
 )

75 
	`as£π
–
fûe_öode
->
mode
 =
I_REGULAR
 );

82  
fd
;

83 
	}
}

85 
m_öode
 *
	$¸óã_fûe
–*
«me
, 
dev
, 
dú_öode_ƒ
, 
size
 )

87 
m_öode
 *
öode
 = 
	`√w_öode
–
dev
, 
size
 );

88 
	`°∫˝y
–
öode
->
«me
,Çame, 19 );

89 
öode
->
«me
[19] = 0;

90 
öode
->
mode
 = 
I_REGULAR
 ;

91 
m_öode
 *
dú_öode
 = 
	`gë_öode
–
dev
, 
dú_öode_ƒ
 );

92 
	`båì_ö£π
–
dú_öode
, 
«me
, 
öode
->
öode_num
 );

93 
	`put_öode
–
dú_öode
 );

94  
öode
;

95 
	}
}

98 
	$do_˛o£
–
MESSAGE
 *
msg
 )

100 
fd
 = 
msg
->
FD
;

101 
§c
 = 
msg
->
sour˚
;

102 
¥oc
 *
p
 = 
¥oc_èbÀ
 + 
§c
;

103 
	`put_öode
–
p
->
fûp
[
fd
]->
fd_öode
 );

104 
p
->
fûp
[
fd
]->
fd_öode
 = 0;

105 
p
->
fûp
[
fd
] = 0 ;

107 
	}
}

	@fs/read_write.c

1 
	~"fs.h
"

3 
	$rw_£˘‹
–
io_ty≥
, 
buf„r_hód
 *
bh
 )

5 if–
bh
->
blockƒ
 == 0 )

7 
MESSAGE
 
drivî_msg
;

9 
	`as£π
–
bh
->
dev
 =
ROOT_DEV
 );

10 
drivî_msg
.
sour˚
 = 
TASK_FS
;

11 
drivî_msg
.
ty≥
 = 
io_ty≥
;

12 
drivî_msg
.
DEVICE
 = 
	`MINOR
(
bh
->
dev
);

13 
drivî_msg
.
POSITION
 = 
bh
->
blockƒ
;

14 
drivî_msg
.
CNT
 = 1<<(
bh
->
size
);

15 
drivî_msg
.
PROC_NR
 = 
TASK_FS
;

16 
drivî_msg
.
BUF
 = 
bh
->
pd©a
;

18 
	`£nd_ªcv
–
BOTH
, 
dd_m≠
[
	`MAJOR
(
bh
->
dev
)].
drivî_ƒ
, &
drivî_msg
 );

20 
	}
}

22 
	$do_rdwr
–
MESSAGE
 *
msg
 )

24 
fd
 = 
msg
->
FD
;

25 
ty≥
 = 
msg
->type;

26 *
buf
 = 
msg
->
BUF
;

27 
Àn
 = 
msg
->
CNT
;

28 
§c
 = 
msg
->
sour˚
;

29 
¥oc
 *
p
 = 
¥oc_èbÀ
 + 
§c
;

30 
	`as£π
–
p
->
fûp
[
fd
] >
fûe_desc_èbÀ
 &&Ö->fûp[fd] < fûe_desc_èbÀ + 
NR_FILE_DESC
 );

31 if–!(
p
->
fûp
[
fd
]->
fd_mode
 & 
O_RDWR
) )

33 
pos
 = 
p
->
fûp
[
fd
]->
fd_pos
;

34 
m_öode
 *
öode
 = 
p
->
fûp
[
fd
]->
fd_öode
;

35 
	`as£π
–
öode
 >
öode_èbÀ
 && inodê< inode_èbÀ + 
NR_INODE
 );

37 
imode
 = 
öode
->
mode
 &
I_TYPE_MASK
;

38 if–
imode
 =
I_CHAR_SPECIAL
 )

40 
msg
->
ty≥
 =Åy≥ =
READ
 ? 
DEV_READ
 : 
DEV_WRITE
;

41 
dev
 = 
öode
->
°¨t_d©a_£˘
;

42 
	`as£π
–
	`MAJOR
(
dev
) == 4 );

43 
msg
->
DEVICE
 = 
	`MINOR
(
dev
);

44 
msg
->
BUF
 = 
buf
;

45 
msg
->
CNT
 = 
Àn
;

46 
msg
->
PROC_NR
 = 
§c
;

47 
	`£nd_ªcv
–
BOTH
, 
dd_m≠
[
	`MAJOR
(
dev
)].
drivî_ƒ
, 
msg
 );

48  
msg
->
CNT
;

52 
	`as£π
–
öode
->
mode
 =
I_REGULAR
 || inode->modê=
I_DIRECTORY
 );

53 
	`as£π
–
ty≥
 =
READ
 ||Åy≥ =
WRITE
 );

55 
Àn
 = 
	`MIN
–Àn, 
SECTOR_SIZE
 *(1<<
öode
->
size
) );

56 
buf„r_hód
 *
bh
 = 
	`gë_öode_d©a
–
öode
->
dev
, inode->
öode_num
 );

57 if–
ty≥
 =
READ
 )

59 
	`mem˝y
–(*)
	`va2œ
(
§c
,
buf
), (*)va2œ(
TASK_FS
,
bh
->
pd©a
+
pos
), 
Àn
 );

63 
	`mem˝y
–(*)
	`va2œ
(
TASK_FS
,
bh
->
pd©a
+
pos
), (*)va2œ(
§c
,
buf
), 
Àn
 );

65 
p
->
fûp
[
fd
]->
fd_pos
 +
Àn
;

67  
Àn
;

68 
	}
}

	@fs/super.c

1 
	~"ty≥.h
"

2 
	~"hd.h
"

3 
	~"fs.h
"

4 
	~"¥oc.h
"

5 
	~"°ddef.h
"

6 
	~"°rög.h
"

8 
m_su≥r_block
 
	gsu≥r_block_èbÀ
[
NR_SUPER_BLOCK
];

9 
ªad_block_èbÀ
–
m_su≥r_block
 *
psb
 );

10 
	$ªad_su≥r_block
(
dev
)

12 
i
;

13  
i
=0; i<
NR_SUPER_BLOCK
; i++)

14 if–
su≥r_block_èbÀ
[
i
].
sb_dev
 =
dev
 )

17 
buf„r_hód
 *
bh
 = 
	`bªad
–
dev
, 
FIRST_SUPER_BLOCK
, 1 );

19  
i
=0; i<
NR_SUPER_BLOCK
; i++ )

20 if–
su≥r_block_èbÀ
[
i
].
sb_dev
 =
NO_DEV
 )

22 if–
i
 =
NR_SUPER_BLOCK
 )

23 
	`∑nic
("super_block slots used up" );

24 
m_su≥r_block
 *
psb
 =(m_su≥r_block *)
bh
->
pd©a
;

25 
su≥r_block_èbÀ
[
i
] = *
psb
;

26 
su≥r_block_èbÀ
[
i
].
sb_dev
 = 
dev
;

27 
	`ªad_block_èbÀ
–
su≥r_block_èbÀ
 + 
i
 );

28 
	`bªl£
–
bh
 );

29 
	}
}

31 
m_su≥r_block
 *
	$gë_su≥r_block
–
dev
 )

33 
m_su≥r_block
 *
sb
 = 
su≥r_block_èbÀ
;

34  ; 
sb
<
su≥r_block_èbÀ
+
NR_SUPER_BLOCK
; sb++ )

35 if–
sb
->
sb_dev
 =
dev
 )

36  
sb
;

37 
	`∑nic
("su≥∏block o‡devõ %dÇŸ found.\n", 
dev
 );

38  
NULL
;

39 
	}
}

41 
	$‰ì_su≥r_block
–
dev
 )

43 
m_su≥r_block
 *
psb
;

45 if–
dev
 =
ROOT_DEV
 )

47 
	`¥ötk
("root diskette change!\n");

49 
psb
 = 
	`gë_su≥r_block
–
dev
 );

50 if–
psb
 !
NULL
 )

52 
psb
->
sb_dev
 = 
NO_DEV
;

54 
	}
}

56 
	$mou¡_roŸ
( )

58 
i
;

59 
m_su≥r_block
 *
p
;

61 if–64 !–
d_öode
 ))

62 
	`∑nic
(" bad inode size!\n");

63  
i
=0; i< 
NR_FILE_DESC
; i++ )

64 
fûe_desc_èbÀ
[
i
].
fd_cou¡
 = 0;

65  
p
=
su≥r_block_èbÀ
;Ö<su≥r_block_èbÀ+
NR_SUPER_BLOCK
;Ö++ )

67 
	`mem£t
–
p
, 0, (
m_su≥r_block
) );

69 
	`ªad_su≥r_block
–
ROOT_DEV
 );

70 if–!–
p
 = 
	`gë_su≥r_block
(
ROOT_DEV
)) )

71 
	`∑nic
("unableÅo mountÑoot!\n");

72 
	`ªad_block_èbÀ
–
p
 );

73 
	}
}

	@include/asm/io.h

1 
	#outb
(
vÆue
,
p‹t
) \

2 
	`__asm__
 ("outb %%Æ,%%dx"::"a" (
vÆue
),"d" (
p‹t
))

	)

5 
	#öb
(
p‹t
) ({ \

6 
_v
; \

7 
__asm__
 vﬁ©ûê("öb %%dx,%%Æ":"˜" (
_v
):"d" (
p‹t
)); \

8 
_v
; \

9 })

	)

11 
	#outb_p
(
vÆue
,
p‹t
) \

12 
	`__asm__
 ("outb %%al,%%dx\n" \

15 "1:"::"a" (
vÆue
),"d" (
p‹t
))

	)

17 
	#öb_p
(
p‹t
) ({ \

18 
_v
; \

19 
__asm__
 volatile ("inb %%dx,%%al\n" \

22 "1:":"˜" (
_v
):"d" (
p‹t
)); \

23 
_v
; \

24 })

	)

	@include/asm/segment.h

1 
ölöe
 
	$gë_fs_byã
(c⁄° * 
addr
)

3 
_v
;

5 
	`__asm__
 ("movb %%fs:%1,%0":"Ù" (
_v
):"m" (*
addr
));

6  
_v
;

7 
	}
}

9 
ölöe
 
	$gë_fs_w‹d
(c⁄° *
addr
)

11 
_v
;

13 
	`__asm__
 ("movw %%fs:%1,%0":"Ù" (
_v
):"m" (*
addr
));

14  
_v
;

15 
	}
}

17 
ölöe
 
	$gë_fs_l⁄g
(c⁄° *
addr
)

19 
_v
;

21 
	`__asm__
 ("mov»%%fs:%1,%0":"Ù" (
_v
):"m" (*
addr
)); \

22  
_v
;

23 
	}
}

25 
ölöe
 
	$put_fs_byã
(
vÆ
,*
addr
)

27 
	`__asm__
 ("movb %0,%%fs:%1"::"r" (
vÆ
),"m" (*
addr
));

28 
	}
}

30 
ölöe
 
	$put_fs_w‹d
(
vÆ
,* 
addr
)

32 
	`__asm__
 ("movw %0,%%fs:%1"::"r" (
vÆ
),"m" (*
addr
));

33 
	}
}

35 
ölöe
 
	$put_fs_l⁄g
(
vÆ
,* 
addr
)

37 
	`__asm__
 ("mov»%0,%%fs:%1"::"r" (
vÆ
),"m" (*
addr
));

38 
	}
}

47 
ölöe
 
	$gë_fs
()

49 
_v
;

50 
	`__asm__
("mov %%fs,%%ax":"˜" (
_v
):);

51  
_v
;

52 
	}
}

54 
ölöe
 
	$gë_ds
()

56 
_v
;

57 
	`__asm__
("mov %%ds,%%ax":"˜" (
_v
):);

58  
_v
;

59 
	}
}

61 
ölöe
 
	$£t_fs
(
vÆ
)

63 
	`__asm__
("mov %0,%%fs"::"a" ((Ë
vÆ
));

64 
	}
}

	@include/asm/system.h

1 
	#move_to_u£r_mode
() \

2 
	`__asm__
 ("movl %%esp,%%eax\n\t" \

14 :::"ax")

	)

16 
	#°i
(Ë
	`__asm__
 ("°i"::)

	)

17 
	#˛i
(Ë
	`__asm__
 ("˛i"::)

	)

18 
	#n›
(Ë
	`__asm__
 ("n›"::)

	)

20 
	#úë
(Ë
	`__asm__
 ("úë"::)

	)

22 
	#_£t_g©e
(
g©e_addr
,
ty≥
,
d∂
,
addr
) \

23 
	`__asm__
 ("movw %%dx,%%ax\n\t" \

28 : "i" ((Ë(0x8000+(
d∂
<<13)+(
ty≥
<<8))), \

29 "o" (*((*Ë(
g©e_addr
))), \

30 "o" (*(4+(*Ë(
g©e_addr
))), \

31 "d" ((*Ë(
addr
)),"a" (0x00080000))

	)

33 
	#£t_öå_g©e
(
n
,
addr
) \

34 
	`_£t_g©e
(&
idt
[
n
],14,0,
addr
)

	)

36 
	#£t_å≠_g©e
(
n
,
addr
) \

37 
	`_£t_g©e
(&
idt
[
n
],15,0,
addr
)

	)

39 
	#£t_sy°em_g©e
(
n
,
addr
) \

40 
	`_£t_g©e
(&
idt
[
n
],15,3,
addr
)

	)

42 
	#_£t_£g_desc
(
g©e_addr
,
ty≥
,
d∂
,
ba£
,
limô
) {\

43 *(
g©e_addr
Ë((
ba£
) & 0xff000000) | \

44 (((
ba£
) & 0x00ff0000)>>16) | \

45 ((
limô
) & 0xf0000) | \

46 ((
d∂
)<<13) | \

48 ((
ty≥
)<<8); \

49 *((
g©e_addr
)+1Ë(((
ba£
) & 0x0000ffff)<<16) | \

50 ((
limô
Ë& 0x0ffff); }

	)

52 
	#_£t_ts¶dt_desc
(
n
,
addr
,
ty≥
) \

53 
	`__asm__
 ("movw $104,%1\n\t" \

57 "movb $" 
ty≥
 ",%4\n\t" \

61 ::"a" (
addr
), "m" (*(
n
)), "m" (*(n+2)), "m" (*(n+4)), \

62 "m" (*(
n
+5)), "m" (*(n+6)), "m" (*(n+7)) \

63 )

	)

65 
	#£t_tss_desc
(
n
,
addr
Ë
	`_£t_ts¶dt_desc
(((*Ë“)),addr,"0x89")

	)

66 
	#£t_ldt_desc
(
n
,
addr
Ë
	`_£t_ts¶dt_desc
(((*Ë“)),addr,"0x82")

	)

	@include/console.h

1 #i‚de‡
_CONSOLE_H_


2 
	#_CONSOLE_H_


	)

4 
	#BLACK
 0x0

	)

5 
	#WHITE
 0x7

	)

6 
	#RED
 0x4

	)

7 
	#GREEN
 0x2

	)

8 
	#BLUE
 0x1

	)

9 
	#FLASH
 0x80

	)

10 
	#BRIGHT
 0x08

	)

11 
	#MAKE_COLOR
(
x
,
y
Ë((x<<4Ë| y)

	)

13 
	#V_MEM_BASE
 0xb8000

	)

14 
	#V_MEM_SIZE
 0x8000

	)

15 
	#NR_CONSOLES
 3

	)

17 
	sc⁄sﬁe


19 
u32
 
	mcuºít_°¨t_addr
;

20 
u32
 
	m‹igöÆ_addr
;

21 
u32
 
	mv_mem_limô
;

22 
u32
 
	mcurs‹
;

23 }
	tCONSOLE
;

25 
	#SCR_UP
 1

	)

26 
	#SCR_DN
 -1

	)

27 
	#SCREEN_SIZE
 (80*25)

	)

28 
	#SCREEN_WIDTH
 80

	)

29 
	#DEFAULT_CHAR_COLOR
 (
	`MAKE_COLOR
(
BLACK
,
WHITE
))

	)

30 
	#GRAY_CHAR
 (
	`MAKE_COLOR
(
BLACK
,BLACK)|
BRIGHT
)

	)

31 
	#RED_CHAR
 (
	`MAKE_COLOR
(
BLUE
,
RED
Ë| 
BRIGHT
)

	)

34 
di•_pos
;

35 
ƒ_cuºít_c⁄sﬁe
;

37 
s¸ﬁl_s¸ìn
(
CONSOLE
* 
p_c⁄
,
dúe˘i⁄
);

38 
£À˘_c⁄sﬁe
(
ƒ_c⁄sﬁe
);

39 
öô_s¸ìn
(
TTY
* 
p_ây
);

40 
is_cuºít_c⁄sﬁe
(
CONSOLE
* 
p_c⁄
);

41 
out_ch¨
(
CONSOLE
* 
p_c⁄
,
ch
);

	@include/const.h

1 #i‚def 
_CONST_H_


2 
	#_CONST_H_


	)

4 
	#PUBLIC


	)

5 
	#PRIVAT
 

	)

7 
	#STR_DEFAULT_LEN
 1024

	)

9 
	#TRUE
 1

	)

10 
	#FALSE
 0

	)

13 
	#PRIVILEGE_KERNEL
 0

	)

14 
	#PRIVILEGE_TASK
 1

	)

15 
	#PRIVILEGE_USER
 3

	)

18 
	#RPL_KERNEL
 
SA_RPL0


	)

19 
	#RPL_TASK
 
SA_RPL1


	)

20 
	#RPL_USER
 
SA_RPL3


	)

23 
	#LED_CODE
 0xed

	)

24 
	#KB_ACK
 0xÁ

	)

27 
	#ASSERT


	)

28 #ifde‡
ASSERT


29 
as£πi⁄_Áûuª
(*
exp
,*
fûe
,*
ba£_fûe
,
löe
);

30 
	#as£π
(
exp
) {if(exp);\

31 
	`as£πi⁄_Áûuª
(#exp,
__FILE__
,
__BASE_FILE__
,
__LINE__
);}

	)

33 
	#as£π
(
exp
)

	)

41 
	#MAG_CH_PANIC
 '\002'

	)

42 
	#MAG_CH_ASSERT
 '\003'

	)

59 
	#is_•ecül
(
m
Ë((((mË& 
I_TYPE_MASK
Ë=
I_BLOCK_SPECIAL
) || \

60 (((
m
Ë& 
I_TYPE_MASK
Ë=
I_CHAR_SPECIAL
))

	)

62 
	#NR_DEFAULT_FILE_SECTS
 2048

	)

	@include/ctype.h

1 #i‚de‡
_CTYPE_H


2 
	#_CTYPE_H


	)

4 
	#_U
 0x01

	)

5 
	#_L
 0x02

	)

6 
	#_D
 0x04

	)

7 
	#_C
 0x08

	)

8 
	#_P
 0x10

	)

9 
	#_S
 0x20

	)

10 
	#_X
 0x40

	)

11 
	#_SP
 0x80

	)

13 
_˘y≥
[];

14 
_˘mp
;

16 
	#iß um
(
c
Ë((
_˘y≥
+1)[c]&(
_U
|
_L
|
_D
))

	)

17 
	#ißÕha
(
c
Ë((
_˘y≥
+1)[c]&(
_U
|
_L
))

	)

18 
	#is˙ål
(
c
Ë((
_˘y≥
+1)[c]&(
_C
))

	)

19 
	#isdigô
(
c
Ë((
_˘y≥
+1)[c]&(
_D
))

	)

20 
	#isgøph
(
c
Ë((
_˘y≥
+1)[c]&(
_P
|
_U
|
_L
|
_D
))

	)

21 
	#i¶owî
(
c
Ë((
_˘y≥
+1)[c]&(
_L
))

	)

22 
	#i•röt
(
c
Ë((
_˘y≥
+1)[c]&(
_P
|
_U
|
_L
|
_D
|
_SP
))

	)

23 
	#i•un˘
(
c
Ë((
_˘y≥
+1)[c]&(
_P
))

	)

24 
	#is•a˚
(
c
Ë((
_˘y≥
+1)[c]&(
_S
))

	)

25 
	#isuµî
(
c
Ë((
_˘y≥
+1)[c]&(
_U
))

	)

26 
	#isxdigô
(
c
Ë((
_˘y≥
+1)[c]&(
_D
|
_X
))

	)

28 
	#ißscii
(
c
Ë(((Ëc)<=0x7f)

	)

29 
	#tﬂscii
(
c
Ë(((Ëc)&0x7f)

	)

31 
	#tﬁowî
(
c
Ë(
_˘mp
=c,
	`isuµî
(_˘mp)?_˘mp-('A'-'a'):_˘mp)

	)

32 
	#touµî
(
c
Ë(
_˘mp
=c,
	`i¶owî
(_˘mp)?_˘mp-('a'-'A'):_˘mp)

	)

	@include/errno.h

1 #i‚de‡
_ERRNO_H


2 
	#_ERRNO_H


	)

17 
î∫o
;

19 
	#ERROR
 99

	)

20 
	#EPERM
 1

	)

21 
	#ENOENT
 2

	)

22 
	#ESRCH
 3

	)

23 
	#EINTR
 4

	)

24 
	#EIO
 5

	)

25 
	#ENXIO
 6

	)

26 
	#E2BIG
 7

	)

27 
	#ENOEXEC
 8

	)

28 
	#EBADF
 9

	)

29 
	#ECHILD
 10

	)

30 
	#EAGAIN
 11

	)

31 
	#ENOMEM
 12

	)

32 
	#EACCES
 13

	)

33 
	#EFAULT
 14

	)

34 
	#ENOTBLK
 15

	)

35 
	#EBUSY
 16

	)

36 
	#EEXIST
 17

	)

37 
	#EXDEV
 18

	)

38 
	#ENODEV
 19

	)

39 
	#ENOTDIR
 20

	)

40 
	#EISDIR
 21

	)

41 
	#EINVAL
 22

	)

42 
	#ENFILE
 23

	)

43 
	#EMFILE
 24

	)

44 
	#ENOTTY
 25

	)

45 
	#ETXTBSY
 26

	)

46 
	#EFBIG
 27

	)

47 
	#ENOSPC
 28

	)

48 
	#ESPIPE
 29

	)

49 
	#EROFS
 30

	)

50 
	#EMLINK
 31

	)

51 
	#EPIPE
 32

	)

52 
	#EDOM
 33

	)

53 
	#ERANGE
 34

	)

54 
	#EDEADLK
 35

	)

55 
	#ENAMETOOLONG
 36

	)

56 
	#ENOLCK
 37

	)

57 
	#ENOSYS
 38

	)

58 
	#ENOTEMPTY
 39

	)

60 
•ö
(*
func_«me
);

61 
as£πi⁄_Áûuª
(*
exp
,*
fûe
,*
ba£_fûe
,
löe
);

62 
∑nic
(c⁄° *
fmt
,...);

	@include/fs.h

1 #i‚def 
_ORANGES_FS_H_


2 
	#_ORANGES_FS_H_


	)

4 
	~"ty≥.h
"

5 
	~"°rög.h
"

6 
	~"hd.h
"

7 
	~"¥oc.h
"

8 
	~"c⁄°.h
"

9 
	~"lib/f˙é.h
"

10 
	~"lib/°dio.h
"

11 
	#INVALID_INODE
 0

	)

12 
	#ROOT_INODE
 1

	)

14 
	#NO_DEV
 0

	)

15 
	#DEV_FLOPPY
 1

	)

16 
	#DEV_CDROM
 2

	)

17 
	#DEV_HD
 3

	)

18 
	#DEV_CHAR_TTY
 4

	)

19 
	#DEV_SCSI
 5

	)

21 
	#MAJOR_SHIFT
 8

	)

22 
	#MAKE_DEV
(
a
,
b
Ë–◊<<
MAJOR_SHIFT
Ë| b )

	)

23 
	#MAJOR
(
a
Ë–◊>>
MAJOR_SHIFT
Ë& 0xf‡)

	)

24 
	#MINOR
(
a
Ë–®& 0xf‡)

	)

26 
	#MAGIC_V1
 0x111

	)

27 
	#SUPER_BLOCK_SIZE
 56

	)

28 
	#INODE_SIZE
 32

	)

29 
	#MAX_FILENAME_LEN
 12

	)

31 
	#K_MEMORY_SIZE
 0x100000

	)

32 
	#K_MEMORY_SECTS
 (
K_MEMORY_SIZE
/
SECTOR_SIZE
)

	)

33 
	#K_MEMORY_BEGIN
 0x200000

	)

35 
	#NR_FILE_DESC
 64

	)

36 
	#NR_BLOCK_TABLE_ENTRY
 7

	)

37 
	#ZONE_DATA_SIZE
 0x100000

38 
	#ZONE_DATA_SECTS
 ( (
ZONE_DATA_SIZE
-1)/
SECTOR_SIZE
 +1 )

	)

39 
	#ZONE_IMAP_SECTS
 ( (
ZONE_DATA_SECTS
-1)/
SECTOR_SIZE
 +1 )

	)

40 
	#ZONE_METE_SECTS
 ( 
ZONE_IMAP_SECTS
 + (
ZONE_DATA_SECTS
 * 64 -1 )/
SECTOR_SIZE
 +1)

	)

41 
	#ZONE_ALL_SECTS
 (
ZONE_DATA_SECTS
 + 
ZONE_METE_SECTS
)

	)

43 
	#FIRST_SUPER_BLOCK
 2

	)

44 
	#FIRST_BLOCK_TABLE
 4

	)

45 
	#FIRST_ZONE
 6

	)

48 
	#I_TYPE_MASK
 0170000

	)

49 
	#I_REGULAR
 0100000

	)

50 
	#I_BLOCK_SPECIAL
 0060000

	)

51 
	#I_DIRECTORY
 0040000

	)

52 
	#I_CHAR_SPECIAL
 0020000

	)

53 
	#I_NAMED_PIPE
 0010000

	)

55 
	#MAX_PATH
 256

	)

57 
	sdev_drv_m≠
 {

58 
	mdrivî_ƒ
;

61 
	sbuf„r_hód
{

62 *
	mpd©a
;

63 
u64
 
	mblockƒ
;

64 
u16
 
	mdev
;

65 
u8
 
	msize
;

66 
u8
 
	mdút
;

67 
u8
 
	mcou¡
;

68 
u8
 
	mlock
;

69 
¥oc
 *
	mwaô
;

70 
buf„r_hód
 *
	m¥ev
;

71 
buf„r_hód
 *
	m√xt
;

72 
buf„r_hód
 *
	m¥ev_‰ì
;

73 
buf„r_hód
 *
	m√xt_‰ì
;

76 
	sd_block_èbÀ_íåy
{

77 
u32
 
	mblock_size
;

78 
u32
 
	mfú°_öode_num
;

79 
u32
 
	m‰ì_öode_num
;

80 
u32
 
	möode_cou¡
;

81 
u32
 
	m°¨t_im≠_ƒ
;

82 
u32
 
	m°¨t_ôabÀ_ƒ
;

83 
u32
 
	m°¨t_d©a_ƒ
;

84 
u32
 
	mdev
;

87 
	sd_su≥r_block
 {

88 
u32
 
	mmagic
;

89 
u32
 
	mfú°_block_èbÀ_£˘
;

90 
u32
 
	mroŸ_öode
;

91 
u32
 
	mz⁄e_mëe_£˘s
;

92 
u32
 
	mz⁄e_d©a_£˘s
;

95 
	sm_su≥r_block
{

96 
u32
 
	mmagic
;

97 
u32
 
	mfú°_block_èbÀ_£˘
;

98 
u32
 
	mroŸ_öode
;

99 
u32
 
	mz⁄e_mëe_£˘s
;

100 
u32
 
	mz⁄e_d©a_£˘s
;

103 
u16
 
	msb_dev
;

104 
u8
 
	mdút
;

105 
u64
 
	msize
;

106 
d_block_èbÀ_íåy
 
	mp_block_èbÀ
[
NR_BLOCK_TABLE_ENTRY
];

107 
buf„r_hód
 *
	mim≠
[8];

111 
	sd_öode
 {

112 
u32
 
	mmode
;

113 
u32
 
	msize
;

114 
u32
 
	m°¨t_d©a_£˘
;

115 
u32
 
	m√xt_öode_id
;

116 
u32
 
	muid
;

117 
u32
 
	mgid
;

118 
u64
 
	mmtime
;

119 
u32
 
	m∆öks
;

120 
u64
 
	mbôm≠
;

121 
	m«me
[20];

124 
	sm_öode
{

125 
u32
 
	mmode
;

126 
u16
 
	msize
;

127 
u32
 
	m°¨t_d©a_£˘
;

128 
u32
 
	m√xt_öode_id
;

129 
u32
 
	muid
;

130 
u32
 
	mgid
;

131 
u64
 
	mmtime
;

132 
u32
 
	m∆öks
;

133 
u64
 
	mbôm≠
;

134 
	m«me
[20];

136 
u16
 
	mdev
;

137 
u32
 
	möode_num
;

138 
u32
 
	m°¨t_ôabÀ_£˘
;

139 
u32
 
	m°¨t_im≠_£˘
;

140 
u32
 
	mz⁄e_fú°_öode_num
;

141 
u8
 
	mcou¡
;

142 
u8
 
	mlock
;

143 
u8
 
	mdút
;

144 
u8
 
	mupd©e
;

145 
u32
 
	m£ek
;

146 
u64
 
	m©ime
;

147 
u64
 
	m˘ime
;

149 
	sd_«me_vÆue_∑ú
{

150 *
	m«me
;

151 
u32
 
	mvÆue
;

154 
	sd_key_vÆue_∑ú
{

155 
u32
 
	mkey
;

156 
u32
 
	mvÆue
;

159 
	sd_båì_node
{

160 
u8
 
	mnum
;

161 
u8
 
	mi§oŸ
;

162 
u16
 
	mÀvñ
;

163 
d_key_vÆue_∑ú
 
	mkv
[63];

164 
u16
 
	m¥ev_node_ödex
;

165 
u16
 
	m√xt_node_ödex
;

168 
	sfûe_desc
 {

169 
u32
 
	mfd_mode
;

170 
u32
 
	mfd_Êags
;

171 
u32
 
	mfd_cou¡
;

172 
u32
 
	mfd_pos
;

173 
m_öode
* 
	mfd_öode
;

176 
fûe_desc
 
fûe_desc_èbÀ
[
NR_FILE_DESC
];

177 
m_öode
 
öode_èbÀ
[
NR_INODE
];

178 
m_su≥r_block
 
su≥r_block_èbÀ
[];

179 
MESSAGE
 
fs_msg
;

180 
¥oc
 *
pˇŒî
;

181 
m_öode
 *
roŸ_öode
;

182 
u8
 *
fsbuf
 ;

183 
dev_drv_m≠
 
dd_m≠
[];

185 *
kmÆloc
–
n_blocks
 );

186 
k‰ì
–* 
p
 );

187 
öô_hash
();

188 
öô_buf„r
–
u32
 
buf„r_íd
 );

191 
mou¡_roŸ
( );

192 
m_su≥r_block
 *
gë_su≥r_block
–
dev
 );

193 
d_block_èbÀ_íåy
 *
gë_block_èbÀ
–
dev
, 
size
, 
n
 );

195 
rw_£˘‹
–
io_ty≥
, 
buf„r_hód
 *
bh
 );

197 
buf„r_hód
 *
bªad
–
dev
, 
block
, 
size
 );

198 
bwrôe
–
buf„r_hód
 *
bh
 );

199 
övÆid©e_öode
–
dev
 );

200 
bªl£
–
buf„r_hód
 *
bh
 );

201 
bdúty
–
buf„r_hód
 *
bh
 );

203 
m_öode
 *
gë_öode
–
dev
, 
ƒ
 );

204 
put_öode
–
m_öode
 *
öode
 );

205 
buf„r_hód
 *
gë_öode_d©a
–
dev
, 
ƒ
 );

206 
m_öode
 *
√w_öode
–
dev
, 
size
 );

207 
mov_öode_d©a
–
m_öode
 *
des
, m_öodê*
§c
 );

209 
u32
 
hash_°rög
–*
«me
, 
u8
 
hash_ty≥
 );

210 
båì_föd
–
m_öode
 *
öode
, *
«me
 );

211 
d_båì_node
 *
båì_√w_roŸ
–
buf„r_hód
 *
bh
, 
d_«me_vÆue_∑ú
 *
pkv
, 
num
 );

212 
båì_ö£π
–
m_öode
 *
öode
, c⁄° *
«me
, 
u32
 
öode_num
 );

214 
föd_fûe_ö_dú
–*
«me
, 
dev
, 
dú_öode
 );

215 
föd_íåy
–*
∑th_«me
, **
fûe_«me
, *
dú_öode_ƒ
 );

217 
do_›í
–
MESSAGE
 *
msg
 );

218 
do_˛o£
–
MESSAGE
 *
msg
 );

219 
do_rdwr
–
MESSAGE
 *
msg
 );

220 
do_exec
–
MESSAGE
 *
msg
 );

222 
gëpid
();

223 
	#RD_SECT
(
bh
Ë
	`rw_£˘‹
(
DEV_READ
,bh)

	)

224 
	#WR_SECT
(
bh
Ë
	`rw_£˘‹
(
DEV_WRITE
,bh)

	)

	@include/hd.h

1 #i‚def 
_ORANGES_HD_H_


2 
	#_ORANGES_HD_H_


	)

5 
	~"ty≥.h
"

6 
	#NR_PART_PER_DRIVE
 4

	)

7 
	#NR_SUB_PER_PART
 16

	)

8 
	#NR_SUB_PER_DRIVE
 (
NR_SUB_PER_PART
*
NR_PART_PER_DRIVE
)

	)

9 
	#NR_PRIM_PER_DRIVE
 (
NR_PART_PER_DRIVE
 + 1)

	)

10 
	#MAX_PRIM
 
NR_PRIM_PER_DRIVE


	)

12 
	#REG_DATA
 0x1F0

	)

13 
	#REG_FEATURES
 0x1F1

	)

14 
	#REG_ERROR
 
REG_FEATURES


	)

16 
	#REG_NSECTOR
 0x1F2

	)

17 
	#REG_LBA_LOW
 0x1F3

	)

18 
	#REG_LBA_MID
 0x1F4

	)

19 
	#REG_LBA_HIGH
 0x1F5

	)

20 
	#REG_DEVICE
 0x1F6

	)

22 
	#REG_STATUS
 0x1F7

	)

24 
	#STATUS_BSY
 0x80

	)

25 
	#STATUS_DRDY
 0x40

	)

26 
	#STATUS_DFSE
 0x20

	)

27 
	#STATUS_DSC
 0x10

	)

28 
	#STATUS_DRQ
 0x08

	)

29 
	#STATUS_CORR
 0x04

	)

30 
	#STATUS_IDX
 0x02

	)

31 
	#STATUS_ERR
 0x01

	)

33 
	#REG_CMD
 
REG_STATUS


	)

36 
	#REG_DEV_CTRL
 0x3F6

	)

38 
	#REG_ALT_STATUS
 
REG_DEV_CTRL


	)

40 
	#REG_DRV_ADDR
 0x3F7

	)

42 
	#P_PRIMARY
 0

	)

43 
	#P_EXTENDED
 1

	)

45 
	#PIGS_PART
 0x99

	)

46 
	#NO_PART
 0x00

	)

47 
	#EXT_PART
 0x05

	)

49 
	#NR_INODE
 64

	)

50 
	#NR_SUPER_BLOCK
 8

	)

52 
	#SECTOR_SIZE
 512

	)

53 
	#SECTOR_BITS
 (
SECTOR_SIZE
 * 8)

	)

54 
	#SECTOR_SIZE_SHIFT
 9

	)

56 
	#MINOR_hd1a
 0x10

	)

57 
	#MINOR_hd2a
 0x20

	)

58 
	#MINOR_hd2b
 0x21

	)

59 
	#MINOR_hd3a
 0x30

	)

60 
	#MINOR_hd4a
 0x40

	)

61 
	#MINOR_BOOT
 
MINOR_hd2a


	)

63 
	#ROOT_DEV
 
	`MAKE_DEV
(
DEV_HD
, 
MINOR_BOOT
Ë

	)

65 
	s∑π_ít
 {

66 
u8
 
	mboŸ_öd
;

67 
u8
 
	m°¨t_hód
;

68 
u8
 
	m°¨t_£˘‹
;

69 
u8
 
	m°¨t_cyl
;

70 
u8
 
	msys_id
;

71 
u8
 
	míd_hód
;

72 
u8
 
	míd_£˘‹
;

73 
u8
 
	míd_cyl
;

74 
u32
 
	m°¨t_£˘
;

75 
u32
 
	mƒ_£˘s
;

76 } 
	tPART_ENTRY
;

78 
	s∑π_öfo
 {

79 
u32
 
	mba£
;

80 
u32
 
	msize
;

81 }
	tPART_INFO
;

83 
	shd_öfo
{

84 
	m›í_˙t
;

85 
PART_INFO
 
	m¥im¨y
[
NR_PRIM_PER_DRIVE
];

86 
PART_INFO
 
	mlogiˇl
[
NR_SUB_PER_DRIVE
];

87 }
	tHD_INFO
;

90 
	shd_cmd
 {

91 
u8
 
	m„©uªs
;

92 
u8
 
	mcou¡
;

93 
u8
 
	mlba_low
;

94 
u8
 
	mlba_mid
;

95 
u8
 
	mlba_high
;

96 
u8
 
	mdevi˚
;

97 
u8
 
	mcomm™d
;

101 
	#HD_TIMEOUT
 10000

	)

102 
	#PARTITION_TABLE_OFFSET
 0x1BE

	)

103 
	#ATA_IDENTIFY
 0xEC

	)

104 
	#ATA_READ
 0x20

	)

105 
	#ATA_WRITE
 0x30

	)

106 
	#DIOCTL_GET_GEO
 1

	)

108 
	#MAKE_DEVICE_REG
(
lba
,
drv
,
lba_highe°
) (((lba) << 6) | \

109 ((
drv
) << 4) | \

110 (
lba_highe°
 & 0xFË| 0xA0)

	)

114 
hd_h™dÀr
(
úq
);

	@include/i8259.h

1 #i‚de‡
_I8259_


2 
	#_I8259_


	)

4 
	#INT_M_CTL
 0x20

	)

5 
	#INT_M_CTLMASK
 0x21

	)

6 
	#INT_S_CTL
 0xA0

	)

7 
	#INT_S_CTLMASK
 0xA1

	)

9 
	#NR_IRQ
 16

	)

10 
	#CLOCK_IRQ
 0

	)

11 
	#KEYBOARD_IRQ
 1

	)

12 
	#CASCADE_IRQ
 2

	)

13 
	#ETHER_IRQ
 3

	)

14 
	#SECONDARY_IRQ
 3

	)

15 
	#RS232_IRQ
 4

	)

16 
	#XT_WINI_IRQ
 5

	)

17 
	#FLOPPY_IRQ
 6

	)

18 
	#PRINTER_IRQ
 7

	)

19 
	#AT_WINI_IRQ
 14

	)

21 
öô_8259A
();

22 
put_úq_h™dÀr
(
úq
,
úq_h™dÀr
 
h™dÀr
);

	@include/keyboard.h

1 #i‚de‡
_KEYBOARD_H_


2 
	#_KEYBOARD_H_


	)

4 
	#KB_IN_BYTES
 32

	)

5 
	#MAP_COLS
 3

	)

6 
	#NR_SCAN_CODES
 0x80

	)

8 
	#FLAG_BREAK
 0x0080

	)

9 
	#FLAG_EXT
 0x0100

	)

10 
	#FLAG_SHIFT_L
 0x0200

	)

11 
	#FLAG_SHIFT_R
 0x0400

	)

12 
	#FLAG_CTRL_L
 0x0800

	)

13 
	#FLAG_CTRL_R
 0x1000

	)

14 
	#FLAG_ALT_L
 0x2000

	)

15 
	#FLAG_ALT_R
 0x4000

	)

16 
	#FLAG_PAD
 0x8000

	)

18 
	#MASK_RAW
 0x01FF

	)

23 
	#ESC
 (0x01 + 
FLAG_EXT
Ë

	)

24 
	#TAB
 (0x02 + 
FLAG_EXT
Ë

	)

25 
	#ENTER
 (0x03 + 
FLAG_EXT
Ë

	)

26 
	#BACKSPACE
 (0x04 + 
FLAG_EXT
Ë

	)

28 
	#GUI_L
 (0x05 + 
FLAG_EXT
Ë

	)

29 
	#GUI_R
 (0x06 + 
FLAG_EXT
Ë

	)

30 
	#APPS
 (0x07 + 
FLAG_EXT
Ë

	)

33 
	#SHIFT_L
 (0x08 + 
FLAG_EXT
Ë

	)

34 
	#SHIFT_R
 (0x09 + 
FLAG_EXT
Ë

	)

35 
	#CTRL_L
 (0x0A + 
FLAG_EXT
Ë

	)

36 
	#CTRL_R
 (0x0B + 
FLAG_EXT
Ë

	)

37 
	#ALT_L
 (0x0C + 
FLAG_EXT
Ë

	)

38 
	#ALT_R
 (0x0D + 
FLAG_EXT
Ë

	)

41 
	#CAPS_LOCK
 (0x0E + 
FLAG_EXT
Ë

	)

42 
	#NUM_LOCK
 (0x0F + 
FLAG_EXT
Ë

	)

43 
	#SCROLL_LOCK
 (0x10 + 
FLAG_EXT
Ë

	)

46 
	#F1
 (0x11 + 
FLAG_EXT
Ë

	)

47 
	#F2
 (0x12 + 
FLAG_EXT
Ë

	)

48 
	#F3
 (0x13 + 
FLAG_EXT
Ë

	)

49 
	#F4
 (0x14 + 
FLAG_EXT
Ë

	)

50 
	#F5
 (0x15 + 
FLAG_EXT
Ë

	)

51 
	#F6
 (0x16 + 
FLAG_EXT
Ë

	)

52 
	#F7
 (0x17 + 
FLAG_EXT
Ë

	)

53 
	#F8
 (0x18 + 
FLAG_EXT
Ë

	)

54 
	#F9
 (0x19 + 
FLAG_EXT
Ë

	)

55 
	#F10
 (0x1A + 
FLAG_EXT
Ë

	)

56 
	#F11
 (0x1B + 
FLAG_EXT
Ë

	)

57 
	#F12
 (0x1C + 
FLAG_EXT
Ë

	)

60 
	#PRINTSCREEN
 (0x1D + 
FLAG_EXT
Ë

	)

61 
	#PAUSEBREAK
 (0x1E + 
FLAG_EXT
Ë

	)

62 
	#INSERT
 (0x1F + 
FLAG_EXT
Ë

	)

63 
	#DELETE
 (0x20 + 
FLAG_EXT
Ë

	)

64 
	#HOME
 (0x21 + 
FLAG_EXT
Ë

	)

65 
	#END
 (0x22 + 
FLAG_EXT
Ë

	)

66 
	#PAGEUP
 (0x23 + 
FLAG_EXT
Ë

	)

67 
	#PAGEDOWN
 (0x24 + 
FLAG_EXT
Ë

	)

68 
	#UP
 (0x25 + 
FLAG_EXT
Ë

	)

69 
	#DOWN
 (0x26 + 
FLAG_EXT
Ë

	)

70 
	#LEFT
 (0x27 + 
FLAG_EXT
Ë

	)

71 
	#RIGHT
 (0x28 + 
FLAG_EXT
Ë

	)

74 
	#POWER
 (0x29 + 
FLAG_EXT
Ë

	)

76 
	#WAKE
 (0x2B + 
FLAG_EXT
Ë

	)

79 
	#PAD_SLASH
 (0x2C + 
FLAG_EXT
Ë

	)

80 
	#PAD_STAR
 (0x2D + 
FLAG_EXT
Ë

	)

81 
	#PAD_MINUS
 (0x2E + 
FLAG_EXT
Ë

	)

82 
	#PAD_PLUS
 (0x2F + 
FLAG_EXT
Ë

	)

83 
	#PAD_ENTER
 (0x30 + 
FLAG_EXT
Ë

	)

84 
	#PAD_DOT
 (0x31 + 
FLAG_EXT
Ë

	)

85 
	#PAD_0
 (0x32 + 
FLAG_EXT
Ë

	)

86 
	#PAD_1
 (0x33 + 
FLAG_EXT
Ë

	)

87 
	#PAD_2
 (0x34 + 
FLAG_EXT
Ë

	)

88 
	#PAD_3
 (0x35 + 
FLAG_EXT
Ë

	)

89 
	#PAD_4
 (0x36 + 
FLAG_EXT
Ë

	)

90 
	#PAD_5
 (0x37 + 
FLAG_EXT
Ë

	)

91 
	#PAD_6
 (0x38 + 
FLAG_EXT
Ë

	)

92 
	#PAD_7
 (0x39 + 
FLAG_EXT
Ë

	)

93 
	#PAD_8
 (0x3A + 
FLAG_EXT
Ë

	)

94 
	#PAD_9
 (0x3B + 
FLAG_EXT
Ë

	)

95 
	#PAD_UP
 
PAD_8


	)

96 
	#PAD_DOWN
 
PAD_2


	)

97 
	#PAD_LEFT
 
PAD_4


	)

98 
	#PAD_RIGHT
 
PAD_6


	)

99 
	#PAD_HOME
 
PAD_7


	)

100 
	#PAD_END
 
PAD_1


	)

101 
	#PAD_PAGEUP
 
PAD_9


	)

102 
	#PAD_PAGEDOWN
 
PAD_3


	)

103 
	#PAD_INS
 
PAD_0


	)

104 
	#PAD_MID
 
PAD_5


	)

105 
	#PAD_DEL
 
PAD_DOT


	)

112 
	ss_kb
 {

113 * 
	mp_hód
;

114 * 
	mp_èû
;

115 
	mcou¡
;

116 
	mbuf
[
KB_IN_BYTES
];

117 }
	tKB_INPUT
;

	@include/keymap.h

1 #i‚def 
_KEYMAP_H_


2 
	#_KEYMAP_H_


	)

7 
u32
 
	gkeym≠
[
NR_SCAN_CODES
 * 
MAP_COLS
] = {

12  
ESC
, ESC, 0,

25  
BACKSPACE
, BACKSPACE, 0,

26  
TAB
, TAB, 0,

39  
ENTER
, ENTER, 
PAD_ENTER
,

40  
CTRL_L
, CTRL_L, 
CTRL_R
,

53  
SHIFT_L
, SHIFT_L, 0,

64  '/', '?', 
PAD_SLASH
,

65  
SHIFT_R
, SHIFT_R, 0,

67  
ALT_L
, ALT_L, 
ALT_R
,

69  
CAPS_LOCK
, CAPS_LOCK, 0,

70  
F1
, F1, 0,

71  
F2
, F2, 0,

72  
F3
, F3, 0,

73  
F4
, F4, 0,

74  
F5
, F5, 0,

75  
F6
, F6, 0,

76  
F7
, F7, 0,

77  
F8
, F8, 0,

78  
F9
, F9, 0,

79  
F10
, F10, 0,

80  
NUM_LOCK
, NUM_LOCK, 0,

81  
SCROLL_LOCK
, SCROLL_LOCK, 0,

82  
PAD_HOME
, '7', 
HOME
,

83  
PAD_UP
, '8', 
UP
,

84  
PAD_PAGEUP
, '9', 
PAGEUP
,

85  
PAD_MINUS
, '-', 0,

86  
PAD_LEFT
, '4', 
LEFT
,

87  
PAD_MID
, '5', 0,

88  
PAD_RIGHT
, '6', 
RIGHT
,

89  
PAD_PLUS
, '+', 0,

90  
PAD_END
, '1', 
END
,

91  
PAD_DOWN
, '2', 
DOWN
,

92  
PAD_PAGEDOWN
, '3', 
PAGEDOWN
,

93  
PAD_INS
, '0', 
INSERT
,

94  
PAD_DOT
, '.', 
DELETE
,

98  
F11
, F11, 0,

99  
F12
, F12, 0,

102  0, 0, 
GUI_L
,

103  0, 0, 
GUI_R
,

104  0, 0, 
APPS
,

	@include/lib/fcntl.h

1 #i‚de‡
_FCNTL_


2 
	#_FCNTL_


	)

4 
	#O_CREAT
 1

	)

5 
	#O_RDWR
 2

	)

6 
›í
–c⁄° *
∑th«me
, 
Êags
 );

7 
˛o£
(
fd
);

8 
exe˛
–c⁄° *
∑th
, c⁄° *
¨g
, ... );

9 
execv
–c⁄° *
∑th
, *
¨gv
[] );

10 
exô
(
°©us
);

11 
f‹k
();

12 
ªad
(
fd
, *
buf
, 
cou¡
 );

13 
waô
(* 
°©us
);

14 
wrôe
–
fd
, c⁄° *
buf
, 
cou¡
 );

	@include/lib/stdio.h

1 #i‚de‡
_STDIO_


2 
	#_STDIO_


	)

4 
	~"°ddef.h
"

5 
	~"°d¨g.h
"

7 
v•rötf
(* 
buf
,c⁄° * 
fmt
,
va_li°
 
¨gs
);

8 
•rötf
(*
buf
, c⁄° *
fmt
, ...);

9 
¥ötk
(c⁄° *
fmt
, ...);

10 
¥ötf
–c⁄° *
fmt
, ... );

12 
•ö
(*
func_«me
);

13 
∑nic
(c⁄° *
fmt
,...);

14 
as£πi⁄_Áûuª
(*
exp
,*
fûe
,*
ba£_fûe
,
löe
);

	@include/port.h

1 #i‚de‡
_PORT_H_


2 
	#_PORT_H_


	)

6 
	#TIMER0_REG
 0x40

	)

7 
	#TIMER_MODE_REG
 0x43

	)

11 
	#CRTC_ADDR_REG
 0x3d4

	)

12 
	#CRTC_DATA_REG
 0x3d5

	)

13 
	#START_ADDR_H
 0xc

	)

14 
	#START_ADDR_L
 0xd

	)

15 
	#CURSOR_H
 0xe

	)

16 
	#CURSOR_L
 0xf

	)

19 
	#KB_DATA
 0x60

	)

20 
	#KB_CMD
 0x64

	)

	@include/proc.h

1 #i‚de‡
_PROC_H_


2 
	#_PROC_H_


	)

3 
	~"ty≥.h
"

4 
	~"¥Ÿe˘.h
"

5 
	~"¥Ÿo.h
"

6 
	~"fs.h
"

8 
	#PROCS_BASE
 0xA00000

	)

9 
	#PROC_IMAGE_SIZE_DEFAULT
 0x100000

	)

10 
	#PROC_STACK
 0x400

	)

12 
	#SEND
 1

	)

13 
	#RECEIVE
 2

	)

14 
	#BOTH
 3

	)

16 
	#INVALID_DRIVER
 -20

	)

17 
	#INTERRUPT
 -10

	)

18 
	#TASK_TTY
 0

	)

19 
	#TASK_SYS
 1

	)

20 
	#TASK_HD
 2

	)

21 
	#TASK_FS
 3

	)

22 
	#TASK_MM
 4

	)

23 
	#INIT
 5

	)

24 
	#ANY
 (
NR_TASKS
+
NR_PROCS
+10)

	)

25 
	#NO_TASK
 (
NR_TASKS
+
NR_PROCS
+20)

	)

27 
	#NR_SYS_CALL
 2

	)

30 
	#SENDING
 0X02

	)

31 
	#RECEIVING
 0x04

	)

32 
	#SLEEP
 0x08

	)

33 
	#WAITING
 0x08

	)

34 
	#HANGING
 0x10

	)

35 
	#FREE_SLOT
 0x20

	)

37 
	#NR_FILES
 64

	)

38 
	s°ack‰ame


40 
u32
 
	mgs
;

41 
u32
 
	mfs
;

42 
u32
 
	mes
;

43 
u32
 
	mds
;

44 
u32
 
	medi
;

45 
u32
 
	mesi
;

46 
u32
 
	mebp
;

47 
u32
 
	mkî√l_e•
;

48 
u32
 
	mebx
;

49 
u32
 
	medx
;

50 
u32
 
	mecx
;

51 
u32
 
	móx
;

52 
u32
 
	mªèddr
;

53 
u32
 
	meù
;

54 
u32
 
	mcs
;

55 
u32
 
	meÊags
;

56 
u32
 
	me•
;

57 
u32
 
	mss
;

58 }
	tSTACK_FRAME
;

60 
	s¥oc


62 
STACK_FRAME
 
	ms_ªgs
;

64 
u16
 
	mldt_£l
;

65 
DESCRIPTOR
 
	ms_ldts
[
LDT_SIZE
];

67 
	mticks
;

68 
	m¥i‹ôy
;

70 
u32
 
	mpid
;

71 
	m«me
[16];

73 
	mÊags
;

74 
MESSAGE
 *
	mp_msg
;

75 
	mªcv‰om
;

76 
	m£ndto
;

77 
	mhas_öt_msg
;

78 
¥oc
 *
	mq_£ndög
;

79 
¥oc
 *
	m√xt_£ndög
;

80 
	m∑ª¡
;

81 
	mexô_°©us
;

83 
	mƒ_ây
;

85 
fûe_desc
 *
	mfûp
[
NR_FILES
];

86 }
	tPROCESS
;

88 
	sèsk


90 
èsk_f
 
	möôül_eù
;

91 
	m°acksize
;

92 
	m«me
[32];

93 }
	tTASK
;

95 
	#¥oc2pid
(
x
Ë(x-
¥oc_èbÀ
)

	)

97 
	#NR_TASKS
 5

	)

98 
	#NR_PROCS
 32

	)

99 
	#NR_NATIVE_PROCS
 4

	)

100 
	#FIRST_PROC
 
¥oc_èbÀ
[0]

	)

101 
	#LAST_PROC
 
¥oc_èbÀ
[
NR_TASKS
 + 
NR_PROCS
 - 1]

	)

103 
	#STACK_DEFAULT_SIZE
 0x8000

	)

104 
	#STACK_SIZE_TTY
 0x8000

	)

105 
	#STACK_SIZE_SYS
 0x8000

	)

106 
	#STACK_SIZE_HD
 0x8000

	)

107 
	#STACK_SIZE_FS
 0x8000

	)

108 
	#STACK_SIZE_MM
 0x8000

	)

109 
	#STACK_SIZE_INIT
 0x8000

	)

110 
	#STACK_SIZE_TESTA
 0x8000

	)

111 
	#STACK_SIZE_TESTB
 0x8000

	)

112 
	#STACK_SIZE_TESTC
 0x8000

	)

113 
	#STACK_SIZE_TOTAL
 (
STACK_DEFAULT_SIZE
 * 9)

	)

115 
	emsgty≥
 {

116 
	mHARD_INT
 = 1,

119 
	mGET_TICKS
,
	mGET_PID
,
	mGET_RTC_TIME
,

121 
	mOPEN
,
	mCLOSE
,
	mREAD
,
	mWRITE
,
	mLSEEK
,
	mSTAT
,
	mUNLINK
,

123 
	mSUSPEND_PROC
, 
	mRESUME_PROC
,

125 
	mEXEC
,
	mWAIT
,

127 
	mFORK
, 
	mEXIT
,

129 
	mSYSCALL_RET
,

131 
	mDEV_OPEN
 = 1001,

132 
	mDEV_CLOSE
,

133 
	mDEV_READ
,

134 
	mDEV_WRITE
,

135 
	mDEV_IOCTL


137 
	#FD
 
u
.
m3
.
m3i1


	)

138 
	#PATHNAME
 
u
.
m3
.
m3p1


	)

139 
	#FLAGS
 
u
.
m3
.
m3i1


	)

140 
	#NAME_LEN
 
u
.
m3
.
m3i2


	)

141 
	#BUF_LEN
 
u
.
m3
.
m3i3


	)

142 
	#CNT
 
u
.
m3
.
m3i2


	)

143 
	#REQUEST
 
u
.
m3
.
m3i2


	)

144 
	#PROC_NR
 
u
.
m3
.
m3i3


	)

145 
	#DEVICE
 
u
.
m3
.
m3i4


	)

146 
	#POSITION
 
u
.
m3
.
m3l1


	)

147 
	#BUF
 
u
.
m3
.
m3p2


	)

148 
	#OFFSET
 
u
.
m3
.
m3i2


	)

149 
	#WHENCE
 
u
.
m3
.
m3i3


	)

150 
	#RETVAL
 
u
.
m3
.
m3i1


	)

151 
	#PID
 
u
.
m3
.
m3i2


	)

152 
	#STATUS
 
u
.
m3
.
m3i1


	)

153 
	#RETVAL
 
u
.
m3
.
m3i1


	)

155 
PROCESS
 
¥oc_èbÀ
[
NR_TASKS
+ 
NR_PROCS
];

156 
k_ªíãr
;

158 
öô_¥oc
();

159 
öf‹m_öt
(
èsk_ƒ
);

160 
dump_¥oc
(
¥oc
* 
p
);

161 
dump_msg
(c⁄° * 
tôÀ
, 
MESSAGE
* 
m
);

162 
ª£t_msg
(
MESSAGE
 *
p
);

163 *
va2œ
(
pid
,*
va
);

164 
ª£t_msg
(
MESSAGE
 *
p
);

165 
£nd_ªcv
(
fun˘i⁄
,
§c_de°
,
MESSAGE
 *
msg
);

166 
sys_£ndªc
(
fun˘i⁄
,
§c_de°
,
MESSAGE
* 
m
,
¥oc
*
p
);

167 
ldt_£g_löór
(
¥oc
 *
p
,
idx
);

	@include/protect.h

1 #i‚def 
_PROTECT_H_


2 
	#_PROTECT_H_


	)

4 
	#GDT_SIZE
 128

	)

5 
	#IDT_SIZE
 256

	)

7 
	#INT_VECTOR_IRQ0
 0x20

	)

8 
	#INT_VECTOR_IRQ8
 0x28

	)

10 
	sdes¸ùt‹


12 
u16
 
	mlimô_low
;

13 
u16
 
	mba£_low
;

14 
u8
 
	mba£_mid
;

15 
u8
 
	m©å1
;

16 
u8
 
	mlimô_high_©å2
;

17 
u8
 
	mba£_high
;

18 }
	tDESCRIPTOR
;

20 
	sg©e


22 
u16
 
	moff£t_low
;

23 
u16
 
	m£À˘‹
;

24 
u8
 
	mdcou¡
;

25 
u8
 
	m©å
;

26 
u16
 
	moff£t_high
;

27 }
	tGATE
;

29 
	stss


31 
u32
 
	mbacklök
;

32 
u32
 
	me•0
;

33 
u32
 
	mss0
;

34 
u32
 
	me•1
;

35 
u32
 
	mss1
;

36 
u32
 
	me•2
;

37 
u32
 
	mss2
;

38 
u32
 
	m¸3
;

39 
u32
 
	meù
;

40 
u32
 
	mÊags
;

41 
u32
 
	móx
;

42 
u32
 
	mecx
;

43 
u32
 
	medx
;

44 
u32
 
	mebx
;

45 
u32
 
	me•
;

46 
u32
 
	mebp
;

47 
u32
 
	mesi
;

48 
u32
 
	medi
;

49 
u32
 
	mes
;

50 
u32
 
	mcs
;

51 
u32
 
	mss
;

52 
u32
 
	mds
;

53 
u32
 
	mfs
;

54 
u32
 
	mgs
;

55 
u32
 
	mldt
;

56 
u16
 
	må≠
;

57 
u16
 
	mioba£
;

58 }
	tTSS
;

62 
	#INDEX_DUMMY
 0

63 
	#INDEX_FLAT_C
 1

64 
	#INDEX_FLAT_RW
 2

65 
	#INDEX_VIDEO
 3

66 
	#INDEX_TSS
 4

	)

67 
	#INDEX_LDT_FIRST
 5

	)

69 
	#SELECTOR_DUMMY
 0

70 
	#SELECTOR_FLAT_C
 0x08

71 
	#SELECTOR_FLAT_RW
 0x10

72 
	#SELECTOR_VIDEO
 (0x18+3)

73 
	#SELECTOR_TSS
 0x20

	)

74 
	#SELECTOR_LDT_FIRST
 0x28

	)

76 
	#SELECTOR_KERNEL_CS
 
SELECTOR_FLAT_C


	)

77 
	#SELECTOR_KERNEL_DS
 
SELECTOR_FLAT_RW


	)

78 
	#SELECTOR_KERNEL_GS
 
SELECTOR_VIDEO


	)

81 
	#LDT_SIZE
 2

	)

82 
	#INDEX_LDT_C
 0

	)

83 
	#INDEX_LDT_RW
 1

	)

86 
	#SA_RPL_MASK
 0xfffc

	)

87 
	#SA_RPL0
 0

	)

88 
	#SA_RPL1
 1

	)

89 
	#SA_RPL2
 2

	)

90 
	#SA_RPL3
 3

	)

92 
	#SA_TI_MASK
 0xfffb

	)

93 
	#SA_TIG
 0

	)

94 
	#SA_TIL
 4

	)

97 
	#DA_32
 0x4000

	)

98 
	#DA_LIMIT_4K
 0x8000

	)

99 
	#DA_DPL0
 0x00

	)

100 
	#DA_DPL1
 0x20

	)

101 
	#DA_DPL2
 0x40

	)

102 
	#DA_DPL3
 0x60

	)

104 
	#DA_DR
 0x90

	)

105 
	#DA_DRW
 0x92

	)

106 
	#DA_DRWA
 0x93

	)

107 
	#DA_C
 0x98

	)

108 
	#DA_CR
 0x9A

	)

109 
	#DA_CCO
 0x9C

	)

110 
	#DA_CCOR
 0x9E

	)

112 
	#DA_LDT
 0x82

	)

113 
	#DA_TaskG©e
 0x85

	)

114 
	#DA_386TSS
 0x89

	)

115 
	#DA_386CG©e
 0x8C

	)

116 
	#DA_386IG©e
 0x8E

	)

117 
	#DA_386TG©e
 0x8F

	)

120 
	#INT_VECTOR_DIVIDE
 0x0

	)

121 
	#INT_VECTOR_DEBUG
 0x1

	)

122 
	#INT_VECTOR_NMI
 0x2

	)

123 
	#INT_VECTOR_BREAKPOINT
 0x3

	)

124 
	#INT_VECTOR_OVERFLOW
 0x4

	)

125 
	#INT_VECTOR_BOUNDS
 0x5

	)

126 
	#INT_VECTOR_INVAL_OP
 0x6

	)

127 
	#INT_VECTOR_COPROC_NOT
 0x7

	)

128 
	#INT_VECTOR_DOUBLE_FAULT
 0x8

	)

129 
	#INT_VECTOR_COPROC_SEG
 0x9

	)

130 
	#INT_VECTOR_INVAL_TSS
 0xA

	)

131 
	#INT_VECTOR_SEG_NOT
 0xB

	)

132 
	#INT_VECTOR_STACK_FAULT
 0xC

	)

133 
	#INT_VECTOR_PROTECTION
 0xD

	)

134 
	#INT_VECTOR_PAGE_FAULT
 0xE

	)

135 
	#INT_VECTOR_COPROC_ERR
 0x10

	)

139 
	#INT_VECTOR_SYS_CALL
 0x90

	)

141 
	#vú2phys
(
£g_ba£
, 
vú
Ë(
u32
)(((u32)£g_ba£Ë+ (u32)(vú))

	)

143 
u8
 
gdt_±r
[6];

144 
DESCRIPTOR
 
gdt
[
GDT_SIZE
];

145 
u8
 
idt_±r
[6];

146 
GATE
 
idt
[
IDT_SIZE
];

148 
öô_¥Ÿe˘
();

149 
u32
 
£g2phys
(
u16
 
£g
);

150 
öô_des¸ùt‹
(
DESCRIPTOR
* 
p_desc
,
u32
 
ba£
,u32 
limô
,
u16
 
©åibuã
);

	@include/proto.h

1 #i‚de‡
_PROTO_H_


2 
	#_PROTO_H_


	)

4 
èsk_hd
();

5 
èsk_fs
();

6 
èsk_sys
();

7 
èsk_mm
();

9 
Inô
();

10 
Te°A
();

11 
Te°B
();

12 
Te°C
();

15 
öô_keybﬂrd
();

16 
keybﬂrd_ªad
();

19 
dißbÀ_öt
();

20 
íabÀ_öt
();

21 
out_byã
(
u16
 
p‹t
,
u8
 
vÆue
);

22 
u8
 
ö_byã
(
u16
 
p‹t
);

23 
di•_°r
(* 
öfo
);

24 
di•_cﬁ‹_°r
(* 
öfo
,
cﬁ‹
);

25 
dißbÀ_úq
(
úq
);

26 
íabÀ_úq
(
úq
);

29 
ª°¨t
();

32 
sys_ˇŒ
();

33 
£ndªc
(
fun˘i⁄
,
§c_de°
,
MESSAGE
 *
m
);

34 
¥ötx
(*
°r
);

	@include/sched.h

1 #i‚de‡
_SCHED_


2 
	#_SCHED_


	)

3 
	~"¥oc.h
"

5 
PROCESS
* 
	gp_¥oc_ªady
;

6 
scheduÀ
();

7 
	#cuºít_¥oc
 
p_¥oc_ªady


	)

	@include/sconst.h

1 #i‚de‡
_SCONST_H_


2 
	#_SCONST_H_


	)

4 .
£t
 
	gP_STACKBASE
 ,0

5 .
£t
 
	gGSREG
 ,
	gP_STACKBASE


6 .
£t
 
	gFSREG
 ,
	gGSREG
+4

7 .
£t
 
	gESREG
 ,
	gFSREG
+4

8 .
£t
 
	gDSREG
 ,
	gESREG
+4

9 .
£t
 
	gEDIREG
 ,
	gDSREG
+4

10 .
£t
 
	gESIREG
 ,
	gEDIREG
+4

11 .
£t
 
	gEBPREG
 ,
	gESIREG
+4

12 .
£t
 
	gKERNELESPREG
 ,
	gEBPREG
+4

13 .
£t
 
	gEBXREG
 ,
	gKERNELESPREG
+4

14 .
£t
 
	gEDXREG
 ,
	gEBXREG
+4

15 .
£t
 
	gECXREG
 ,
	gEDXREG
+4

16 .
£t
 
	gEAXREG
 ,
	gECXREG
+4

17 .
£t
 
	gRETADR
 ,
	gEAXREG
+4

18 .
£t
 
	gEIPREG
 ,
	gRETADR
+4

19 .
£t
 
	gCSREG
 ,
	gEIPREG
+4

20 .
£t
 
	gEFLAGSREG
 ,
	gCSREG
+4

21 .
£t
 
	gESPREG
 ,
	gEFLAGSREG
+4

22 .
£t
 
	gSSREG
 ,
	gESPREG
+4

23 .
£t
 
	gP_STACKTOP
 ,
	gSSREG
+4

24 .
£t
 
	gP_LDT_SEL
 ,
	gP_STACKTOP


25 .
£t
 
	gP_LDT
 ,
	gP_LDT_SEL
+4

27 .
£t
 
	gTSS3_S_SP0
 ,4

29 .
£t
 
	gSELECTOR_FLAT_C
 ,0X08

30 .
£t
 
	gSELECTOR_TSS
 ,0X20

31 .
£t
 
	gSELECTOR_KERNEL_CS
 ,0x08

34 .
£t
 
	gEOI
,0x20

	@include/stdarg.h

1 #i‚de‡
_STDARG_H


2 
	#_STDARG_H


	)

4 *
	tva_li°
;

9 
	#__va_rounded_size
(
TYPE
) \

10 ((( (
TYPE
Ë+  (Ë- 1Ë/  ()Ë*  ())

	)

12 #i‚de‡
__•¨c__


13 
	#va_°¨t
(
AP
, 
LASTARG
) \

14 (
AP
 = ((*Ë&(
LASTARG
Ë+ 
	`__va_rounded_size
 (LASTARG)))

	)

16 
	#va_°¨t
(
AP
, 
LASTARG
) \

17 (
	`__buûtö_ßvîegs
 (), \

18 
AP
 = ((*Ë&(
LASTARG
Ë+ 
	`__va_rounded_size
 (LASTARG)))

	)

21 
va_íd
 (
va_li°
);

22 
	#va_íd
(
AP
)

	)

24 
	#va_¨g
(
AP
, 
TYPE
) \

25 (
AP
 +
	`__va_rounded_size
 (
TYPE
), \

26 *((
TYPE
 *Ë(
AP
 - 
	`__va_rounded_size
 (TYPE))))

	)

	@include/stddef.h

1 #i‚de‡
_STDDEF_H


2 
	#_STDDEF_H


	)

4 #i‚de‡
_PTRDIFF_T


5 
	#_PTRDIFF_T


	)

6 
	t±rdiff_t
;

9 #i‚de‡
_SIZE_T


10 
	#_SIZE_T


	)

11 
	tsize_t
;

14 #unde‡
NULL


15 
	#NULL
 ((*)0)

	)

17 
	#MAX
(
a
,
b
Ë–◊)>(bË? (aË: (bË)

	)

18 
	#MIN
(
a
,
b
Ë–◊)<(bË? (aË: (bË)

	)

20 
	#off£tof
(
TYPE
, 
MEMBER
Ë((
size_t
Ë&((TYPE *)0)->MEMBER)

	)

	@include/string.h

1 #i‚de‡
_STRING_H_


2 
	#_STRING_H_


	)

4 #i‚de‡
NULL


5 
	#NULL
 ((*Ë0)

	)

8 #i‚de‡
_SIZE_T


9 
	#_SIZE_T


	)

10 
	tsize_t
;

13 * 
°ªº‹
(
î∫o
);

27 
ölöe
 * 
	$°r˝y
(* 
de°
,c⁄° *
§c
)

29 
	`__asm__
("cld\n"

35 :"S" (
§c
),"D" (
de°
)

37  
de°
;

38 
	}
}

40 
ölöe
 * 
	$°∫˝y
(* 
de°
,c⁄° *
§c
,
cou¡
)

42 
	`__asm__
("cld\n"

53 :"S" (
§c
),"D" (
de°
),"c" (
cou¡
)

55  
de°
;

56 
	}
}

58 
ölöe
 * 
	$°rˇt
(* 
de°
,c⁄° * 
§c
)

60 
	`__asm__
("cld\n\t"

69 :"S" (
§c
),"D" (
de°
),"a" (0),"c" (0xffffffff)

71  
de°
;

72 
	}
}

74 
ölöe
 * 
	$°∫ˇt
(* 
de°
,c⁄° * 
§c
,
cou¡
)

76 
	`__asm__
("cld\n\t"

90 :"S" (
§c
),"D" (
de°
),"a" (0),"c" (0xffffffff),"g" (
cou¡
)

92  
de°
;

93 
	}
}

95 
ölöe
 
	$°rcmp
(c⁄° * 
cs
,c⁄° * 
˘
)

97 
__ªs
 
	`__asm__
("ax");

98 
	`__asm__
("cld\n"

110 :"˜" (
__ªs
)

111 :"D" (
cs
),"S" (
˘
)

113  
__ªs
;

114 
	}
}

116 
ölöe
 
	$°∫cmp
(c⁄° * 
cs
,c⁄° * 
˘
,
cou¡
)

118 
__ªs
 
	`__asm__
("ax");

119 
	`__asm__
("cld\n"

133 :"˜" (
__ªs
)

134 :"D" (
cs
),"S" (
˘
),"c" (
cou¡
)

136  
__ªs
;

137 
	}
}

140 
ölöe
 * 
	$°ºchr
(c⁄° * 
s
,
c
)

142 * 
__ªs
 ;

143 
	`__asm__
("cld\n\t"

152 :"=d" (
__ªs
)

153 :"0" (0),"S" (
s
),"a" (
c
)

155  
__ªs
;

156 
	}
}

158 
ölöe
 
	$°r•n
(c⁄° * 
cs
, c⁄° * 
˘
)

160 * 
__ªs
 ;

161 
	`__asm__
("cld\n\t"

177 :"=S" (
__ªs
)

178 :"a" (0),"c" (0xffffffff),"0" (
cs
),"g" (
˘
)

180  
__ªs
-
cs
;

181 
	}
}

183 
ölöe
 
	$°rc•n
(c⁄° * 
cs
, c⁄° * 
˘
)

185 * 
__ªs
 ;

186 
	`__asm__
("cld\n\t"

202 :"=S" (
__ªs
)

203 :"a" (0),"c" (0xffffffff),"0" (
cs
),"g" (
˘
)

205  
__ªs
-
cs
;

206 
	}
}

208 
ölöe
 * 
	$°Ωbrk
(c⁄° * 
cs
,c⁄° * 
˘
)

210 * 
__ªs
 ;

211 
	`__asm__
("cld\n\t"

230 :"=S" (
__ªs
)

231 :"a" (0),"c" (0xffffffff),"0" (
cs
),"g" (
˘
)

233  
__ªs
;

234 
	}
}

236 
ölöe
 * 
	$°rchr
(c⁄° * 
s
,
c
)

238 * 
__ªs
 ;

239 
	`__asm__
("cld\n\t"

249 :"˜" (
__ªs
)

250 :"S" (
s
),"0" (
c
)

252  
__ªs
;

253 
	}
}

256 
ölöe
 * 
	$°r°r
(c⁄° * 
cs
,c⁄° * 
˘
)

258 * 
__ªs
 ;

259 
	`__asm__
("cld\n\t" \

278 :"˜" (
__ªs
)

279 :"0" (0),"c" (0xffffffff),"S" (
cs
),"g" (
˘
)

281  
__ªs
;

282 
	}
}

284 
ölöe
 
	$°æí
(c⁄° * 
s
)

286 
__ªs
 ;

287 
	`__asm__
("cld\n\t"

292 :"=c" (
__ªs
)

293 :"D" (
s
),"a" (0),"0" (0xffffffff)

295  
__ªs
;

296 
	}
}

298 * 
___°πok
;

300 
ölöe
 * 
	$°πok
(* 
s
,c⁄° * 
˘
)

302 * 
__ªs
 ;

303 
	`__asm__
("testl %1,%1\n\t"

353 :"=b" (
__ªs
),"=S" (
___°πok
)

354 :"0" (
___°πok
),"1" (
s
),"g" (
˘
)

356  
__ªs
;

357 
	}
}

359 
ölöe
 * 
	$mem˝y
(* 
de°
,c⁄° * 
§c
, 
n
)

361 
	`__asm__
("cld\n\t"

365 :"c" (
n
),"S" (
§c
),"D" (
de°
)

367  
de°
;

368 
	}
}

370 
ölöe
 * 
	$memmove
(* 
de°
,c⁄° * 
§c
, 
n
)

372 i‡(
de°
<
§c
)

373 
	`__asm__
("cld\n\t"

377 :"c" (
n
),"S" (
§c
),"D" (
de°
)

380 
	`__asm__
("std\n\t"

384 :"c" (
n
),"S" (
§c
+n-1),"D" (
de°
+n-1)

386  
de°
;

387 
	}
}

389 
ölöe
 
	$memcmp
(c⁄° * 
cs
,c⁄° * 
˘
,
cou¡
)

391 
__ªs
 ;

392 
	`__asm__
("cld\n\t"

400 :"˜" (
__ªs
)

401 :"0" (0),"D" (
cs
),"S" (
˘
),"c" (
cou¡
)

403  
__ªs
;

404 
	}
}

406 
ölöe
 * 
	$memchr
(c⁄° * 
cs
,
c
,
cou¡
)

408 * 
__ªs
 ;

409 i‡(!
cou¡
)

410  
NULL
;

411 
	`__asm__
("cld\n\t"

417 :"=D" (
__ªs
)

418 :"a" (
c
),"D" (
cs
),"c" (
cou¡
)

420  
__ªs
;

421 
	}
}

423 
ölöe
 * 
	$mem£t
(* 
s
,
c
,
cou¡
)

425 
	`__asm__
("cld\n\t"

429 :"a" (
c
),"D" (
s
),"c" (
cou¡
)

431  
s
;

432 
	}
}

	@include/time.h

1 #i‚de‡
_TIME_


2 
	#_TIME_


	)

4 
	#RATE_GENERATOR
 0x34

	)

5 
	#TIMER_FREG
 1193182L

	)

6 
	#HZ
 100

	)

7 
	#MAX_TICKS
 0x7FFFABCD

	)

9 
ticks
;

10 
gë_ticks
();

11 
˛ock_h™dÀr
(
úq
);

12 
mûli_dñay
(
mûli_£c
);

13 
öô_˛ock
();

	@include/tty.h

1 #i‚de‡
_TTY_H_


2 
	#_TTY_H_


	)

4 
	~"¥oc.h
"

5 
	#TTY_IN_BYTES
 256

	)

6 
	#TTY_OUT_BUF_LEN
 2

	)

7 
key_¥es£d
 ;

9 
	gc⁄sﬁe
;

11 
	sây


13 
u32
 
	mö_buf
[
TTY_IN_BYTES
];

14 
u32
* 
	mp_öbuf_hód
;

15 
u32
* 
	mp_öbuf_èû
;

16 
	möbuf_cou¡
;

18 
	mây_ˇŒî
;

19 
	mây_¥o˙r
;

20 *
	mây_ªq_buf
;

21 
	mây_À·_˙t
;

22 
	mây_å™s_˙t
;

24 
c⁄sﬁe
* 
	mp_c⁄sﬁe
;

25 }
	tTTY
;

27 
TTY
 
ây_èbÀ
[];

28 
sys_¥ötx
(
_unsued1
,
_unu£d2
,*
s
,
¥oc
 *
p_¥oc
);

29 
ö_¥o˚ss
(
TTY
* 
p_ây
,
u32
 
key
);

30 
èsk_ây
();

	@include/type.h

1 #i‚def 
_TYPE_H_


2 
	#_TYPE_H_


	)

4 
	tu64
;

5 
	tu32
;

6 
	tu16
;

7 
	tu8
;

9 (* 
	göt_h™dÀr
) ();

10 (*
	gèsk_f
)();

11 (* 
	túq_h™dÀr
)(
	túq
);

12 * 
	tsy°em_ˇŒ
;

14 
	smess1


16 
mli1
;

17 
mli2
;

18 
mli3
;

19 
mli4
;

21 
	smess2


23 *
m2p1
;

24 *
m2p2
;

25 *
m2p3
;

26 *
m2p4
;

28 
	smess3


30 
m3i1
;

31 
m3i2
;

32 
m3i3
;

33 
m3i4
;

34 
u64
 
m3l1
;

35 
u64
 
m3l2
;

36 *
m3p1
;

37 *
m3p2
;

41 
sour˚
;

42 
ty≥
;

45 
mess1
 
m1
;

46 
mess2
 
m2
;

47 
mess3
 
m3
;

48 }
u
;

49 }
	tMESSAGE
;

	@kernel/console.c

1 
	~"p‹t.h
"

2 
	~"ty≥.h
"

3 
	~"c⁄°.h
"

4 
	~"¥Ÿe˘.h
"

5 
	~"ây.h
"

6 
	~"c⁄sﬁe.h
"

7 
	~"°rög.h
"

8 
	~"¥oc.h
"

9 
	~"¥Ÿo.h
"

10 
	~"keybﬂrd.h
"

12 
CONSOLE
 
	gc⁄sﬁe_èbÀ
[
NR_CONSOLES
];

13 
	gdi•_pos
;

14 
	gƒ_cuºít_c⁄sﬁe
;

16 
£t_curs‹
(
u32
 
posôi⁄
);

17 
£t_video_°¨t_addr
(
u32
 
addr
);

18 
Êush
(
CONSOLE
* 
p_c⁄
);

20 
	$s¸ﬁl_s¸ìn
(
CONSOLE
* 
p_c⁄
,
dúe˘i⁄
)

22 if(
dúe˘i⁄
 =
SCR_UP
)

24 if((()(
p_c⁄
->
cuºít_°¨t_addr
)-
SCREEN_WIDTH
Ë> ()’_c⁄->
‹igöÆ_addr
))

25 
p_c⁄
->
cuºít_°¨t_addr
-=
SCREEN_WIDTH
;

27 if(
dúe˘i⁄
 =
SCR_DN
)

29 if(
p_c⁄
->
cuºít_°¨t_addr
+
SCREEN_SIZE
 <Ö_c⁄->
‹igöÆ_addr
+p_c⁄->
v_mem_limô
)

30 
p_c⁄
->
cuºít_°¨t_addr
+=
SCREEN_WIDTH
;

34 
	`£t_video_°¨t_addr
(
p_c⁄
->
cuºít_°¨t_addr
);

35 
	`£t_curs‹
(
p_c⁄
->
curs‹
);

36 
	}
}

38 
	$is_cuºít_c⁄sﬁe
(
CONSOLE
* 
p_c⁄
)

40  (
p_c⁄
 =
c⁄sﬁe_èbÀ
+ 
ƒ_cuºít_c⁄sﬁe
);

41 
	}
}

43 
	$out_ch¨
(
CONSOLE
* 
p_c⁄
,
ch
)

45 
u8
* 
p_vmem
=(u8*)(
V_MEM_BASE
 +
p_c⁄
->
curs‹
*2);

46 
curs‹_x
 =(
c⁄
->
curs‹
 - c⁄->
‹igöÆ_addr
Ë% 
SCR_WIDTH
;

47 
curs‹_y
 = (
c⁄
->
curs‹
 - c⁄->
‹igöÆ_addr
Ë/ 
SCR_WIDTH
;

48 
ch
)

51 
p_c⁄
->
curs‹
ı_c⁄->
‹igöÆ_addr
+
SCREEN_WIDTH
*(
curs‹_y
+1);

54 if(
p_c⁄
->
curs‹
>Ö_c⁄->
‹igöÆ_addr
)

56 
p_c⁄
->
curs‹
--;

57 *(
p_vmem
-2)=' ';

58 *(
p_vmem
-1)=
DEFAULT_CHAR_COLOR
;

62 *
p_vmem
++=
ch
;

63 *
p_vmem
++=
DEFAULT_CHAR_COLOR
;

64 
p_c⁄
->
curs‹
++;

67 
p_c⁄
->
curs‹
>ı_c⁄->
cuºít_°¨t_addr
+
SCREEN_SIZE
 ||Ö_con->cursor <Ö_con->current_start_addr)

69 
	`s¸ﬁl_s¸ìn
(
p_c⁄
,
SCR_DN
);

70 
	`˛ór_s¸ìn
(
˙d
->
curs‹
,
SCR_WIDTH
);

72 if(
	`is_cuºít_c⁄sﬁe
(
p_c⁄
))

73 
	`Êush
(
p_c⁄
);

74 
	}
}

75 
	$˛ór_s¸ìn
(
pos
, 
Àn
)

77 
u8
 * 
pch
 = (u8*)(
V_MEM_BASE
 + 
pos
 * 2);

78 --
Àn
 >= 0)

80 *
pch
++ = ' ';

81 *
pch
++ = 
DEFAULT_CHAR_COLOR
;

83 
	}
}

85 
	$Êush
(
CONSOLE
* 
p_c⁄
)

87 
	`£t_curs‹
(
p_c⁄
->
curs‹
);

88 
	`£t_video_°¨t_addr
(
p_c⁄
->
cuºít_°¨t_addr
);

89 
	}
}

92 
	$£t_curs‹
(
u32
 
posôi⁄
)

94 
	`dißbÀ_öt
();

95 
	`out_byã
(
CRTC_ADDR_REG
,
CURSOR_H
);

96 
	`out_byã
(
CRTC_DATA_REG
,(
posôi⁄
>>8)&0xff);

97 
	`out_byã
(
CRTC_ADDR_REG
,
CURSOR_L
);

98 
	`out_byã
(
CRTC_DATA_REG
,
posôi⁄
 & 0xff);

99 
	`íabÀ_öt
();

100 
	}
}

103 
	$öô_s¸ìn
(
TTY
* 
p_ây
)

105 
ƒ_ây
=
p_ây
-
ây_èbÀ
;

106 
p_ây
->
p_c⁄sﬁe
=
c⁄sﬁe_èbÀ
+
ƒ_ây
;

107 
v_mem_size
=
V_MEM_SIZE
>>1;

108 
c⁄_v_mem_size
=
v_mem_size
/
NR_CONSOLES
;

109 
p_ây
->
p_c⁄sﬁe
->
‹igöÆ_addr
=
ƒ_ây
*
c⁄_v_mem_size
;

110 
p_ây
->
p_c⁄sﬁe
->
v_mem_limô
=
c⁄_v_mem_size
;

111 
p_ây
->
p_c⁄sﬁe
->
cuºít_°¨t_addr
ı_ây->p_c⁄sﬁe->
‹igöÆ_addr
;

112 
p_ây
->
p_c⁄sﬁe
->
curs‹
ı_ây->p_c⁄sﬁe->
‹igöÆ_addr
;

113 if(
ƒ_ây
 ==0)

115 
p_ây
->
p_c⁄sﬁe
->
curs‹
=
di•_pos
/2;

116 
di•_pos
=0;

120 
	`out_ch¨
(
p_ây
->
p_c⁄sﬁe
,
ƒ_ây
+'0');

121 
	`out_ch¨
(
p_ây
->
p_c⁄sﬁe
,'#');

124 
	`£t_curs‹
(
p_ây
->
p_c⁄sﬁe
->
curs‹
);

125 
	}
}

127 
	$£À˘_c⁄sﬁe
(
ƒ_c⁄sﬁe
)

129 if((
ƒ_c⁄sﬁe
<0Ë||“r_c⁄sﬁe>=
NR_CONSOLES
))

133 
ƒ_cuºít_c⁄sﬁe
=
ƒ_c⁄sﬁe
;

134 
	`£t_curs‹
(
c⁄sﬁe_èbÀ
[
ƒ_cuºít_c⁄sﬁe
].
curs‹
);

135 
	`£t_video_°¨t_addr
(
c⁄sﬁe_èbÀ
[
ƒ_cuºít_c⁄sﬁe
].
cuºít_°¨t_addr
);

136 
	}
}

139 
	$£t_video_°¨t_addr
(
u32
 
addr
)

141 
	`dißbÀ_öt
();

142 
	`out_byã
(
CRTC_ADDR_REG
,
START_ADDR_H
);

143 
	`out_byã
(
CRTC_DATA_REG
,(
addr
>>8)&0xff);

144 
	`out_byã
(
CRTC_ADDR_REG
,
START_ADDR_L
);

145 
	`out_byã
(
CRTC_DATA_REG
,
addr
&0xff);

146 
	`íabÀ_öt
();

147 
	}
}

	@kernel/hd.c

1 
	~"ty≥.h
"

2 
	~"c⁄°.h
"

3 
	~"¥Ÿe˘.h
"

4 
	~"°rög.h
"

5 
	~"fs.h
"

6 
	~"¥oc.h
"

7 
	~"ây.h
"

8 
	~"c⁄sﬁe.h
"

9 
	~"¥Ÿo.h
"

10 
	~"hd.h
"

11 
	~"time.h
"

12 
	~"asm/io.h
"

13 
	~"i8259.h
"

14 
	~"î∫o.h
"

15 
	~"lib/°dio.h
"

18 
öô_hd
();

19 
hd_cmd_out
(
hd_cmd
* 
cmd
);

20 
waôf‹
(
mask
, 
vÆ
, 
timeout
);

21 
öãºu±_waô
();

22 
hd_idítify
(
drive
);

23 
¥öt_idítify_öfo
 (
u16
* 
hdöfo
);

24 
p‹t_ªad
–
ªg
, *
buf
, 
size
 );

25 
p‹t_wrôe
–
u16
 
p‹t
, *
buf
, 
size
 );

26 
hd_›í
–
devi˚
 );

27 
∑πôi⁄
–
devi˚
, 
›t
 );

28 
¥öt_hdöfo
–
HD_INFO
 *
hd_if
 );

29 
hd_˛o£
–
devi˚
 );

30 
hd_rdwt
–
MESSAGE
 *
p
 );

31 
hd_io˘l
–
MESSAGE
 *
p
);

33 
u8
 
	ghd_°©us
;

34 
u8
 
	ghdbuf
[
SECTOR_SIZE
 * 2];

35 
HD_INFO
 
	ghd_öfo
[1];

37 
	$èsk_hd
()

39 
	`¥ötk
("task_hd begin\n");

40 
MESSAGE
 
msg
;

42 
	`öô_hd
();

45 
	`£nd_ªcv
(
RECEIVE
, 
ANY
, &
msg
);

47 
§c
 = 
msg
.
sour˚
;

49 
msg
.
ty≥
) {

50 
DEV_OPEN
:

51 
	`hd_›í
(
msg
.
DEVICE
);

53 
DEV_CLOSE
:

54 
	`hd_˛o£
(
msg
.
DEVICE
);

56 
DEV_READ
:

57 
DEV_WRITE
:

58 
	`hd_rdwt
(&
msg
);

60 
DEV_IOCTL
:

61 
	`hd_io˘l
(&
msg
);

64 
	`dump_msg
("HD drivî::unknow¿msg", &
msg
);

65 
	`•ö
("FS::main_loop (invalid msg.type)");

69 
	`£nd_ªcv
(
SEND
, 
§c
, &
msg
);

71 
	}
}

73 
	$öô_hd
()

76 
u8
 * 
pNrDrives
 = (u8*)(0x475);

77 
	`¥ötk
("NrDrives:%d.\n", *
pNrDrives
);

78 
	`as£π
(*
pNrDrives
);

80 
	`put_úq_h™dÀr
(
AT_WINI_IRQ
, 
hd_h™dÀr
);

81 
	`íabÀ_úq
(
CASCADE_IRQ
);

82 
	`íabÀ_úq
(
AT_WINI_IRQ
);

84 
i
;

85  
i
=0; i< (
hd_öfo
)/ (hd_info[0]); i++ )

86 
	`mem£t
–&
hd_öfo
[
i
], 0, (hd_info[0]) );

87 
hd_öfo
[0].
›í_˙t
 = 0;

88 
	}
}

90 
	$hd_˛o£
–
devi˚
 )

92 
drive
 = 0;

93 
hd_öfo
[
drive
].
›í_˙t
-- ;

94 
	}
}

96 
	$hd_rdwt
–
MESSAGE
 *
p
 )

98 
drive
 = 0;

99 
u32
 
£˘_ƒ
 = (u32)
p
->
POSITION
;

100 
logidx
 = ( 
p
->
DEVICE
- 
MINOR_hd1a
Ë% 
NR_SUB_PER_DRIVE
;

101 
£˘_ƒ
 +
p
->
DEVICE
 < 
MAX_PRIM
 ?

102 
hd_öfo
[
drive
].
¥im¨y
[
p
->
DEVICE
].
ba£
 :

103 
hd_öfo
[
drive
].
logiˇl
[
logidx
].
ba£
 ;

105 
hd_cmd
 
cmd
;

106 
cmd
.
„©uªs
 = 0;

107 
cmd
.
cou¡
 = 
p
->
CNT
 ;

108 
cmd
.
lba_low
 = 
£˘_ƒ
 & 0xff;

109 
cmd
.
lba_mid
 = (
£˘_ƒ
 >> 8) & 0xff;

110 
cmd
.
lba_high
 = (
£˘_ƒ
 >> 16) & 0xff;

111 
cmd
.
devi˚
 = 
	`MAKE_DEVICE_REG
(1, 
drive
, (
£˘_ƒ
 >> 24)& 0xff);

112 
cmd
.
comm™d
 = (
p
->
ty≥
 =
DEV_READ
Ë? 
ATA_READ
 : 
ATA_WRITE
 ;

113 
	`hd_cmd_out
(&
cmd
);

115 
block_À·
 = 
p
->
CNT
;

116 *
œ
 = (*)
	`va2œ
–
p
->
PROC_NR
,Ö->
BUF
 );

117 *
hd_œ
 = (*)
	`va2œ
–
TASK_HD
, 
hdbuf
 );

119 
block_À·
)

121 if–
p
->
ty≥
 =
DEV_READ
 )

123 
	`öãºu±_waô
();

124 
	`p‹t_ªad
–
REG_DATA
, 
hdbuf
, 
SECTOR_SIZE
 );

125 
	`mem˝y
–
œ
, 
hd_œ
, 
SECTOR_SIZE
 );

129 if–!
	`waôf‹
–
STATUS_DRQ
, STATUS_DRQ, 
HD_TIMEOUT
) )

130 
	`∑nic
("hd wirtingÉrror.");

131 
	`p‹t_wrôe
–
REG_DATA
, 
œ
, 
SECTOR_SIZE
 );

132 
	`öãºu±_waô
();

134 
block_À·
 -= 1;

135 
œ
 +
SECTOR_SIZE
 ;

137 
	}
}

139 
	$hd_io˘l
–
MESSAGE
 *
p
)

141 
drive
 = 0;

142 
devi˚
 = 
p
->
DEVICE
;

143 
HD_INFO
 *
hd_if
 = &
hd_öfo
[
drive
];

145 if–
p
->
REQUEST
 =
DIOCTL_GET_GEO
 )

147 *
d°
 = 
	`va2œ
–
p
->
PROC_NR
,Ö->
BUF
 );

148 *
§c
 = 
	`va2œ
–
TASK_HD
,

149 
devi˚
 < 
MAX_PRIM
 ?

150 &
hd_if
->
¥im¨y
[
devi˚
] :

151 &
hd_if
->
logiˇl
[
devi˚
-
MINOR_hd1a
]);

152 
	`mem˝y
–
d°
, 
§c
, (
PART_INFO
) );

155 
	`as£π
(0);

156 
	}
}

158 
	$hd_›í
–
devi˚
 )

160 
drive
 = 0;

161 
	`hd_idítify
(
drive
);

162 if–
hd_öfo
[
drive
].
›í_˙t
 ++ == 0 )

164 
	`∑πôi⁄
–
drive
, 
P_PRIMARY
 );

165 
	`¥öt_hdöfo
–&
hd_öfo
[
drive
] );

167 
	}
}

169 
	$gë_∑π_èbÀ
–
drive
, 
£˘_ƒ
, 
∑π_ít
 *
íåy
 )

171 
hd_cmd
 
cmd
;

172 
cmd
.
„©uªs
 = 0;

173 
cmd
.
cou¡
 = 1 ;

174 
cmd
.
lba_low
 = 
£˘_ƒ
 & 0xff;

175 
cmd
.
lba_mid
 = (
£˘_ƒ
 >> 8) & 0xff;

176 
cmd
.
lba_high
 = (
£˘_ƒ
 >> 16) & 0xff;

177 
cmd
.
devi˚
 = 
	`MAKE_DEVICE_REG
–1, 
drive
, (
£˘_ƒ
 >> 24) & 0xff );

178 
cmd
.
comm™d
 = 
ATA_READ
;

179 
	`hd_cmd_out
–&
cmd
 );

180 
	`öãºu±_waô
();

182 
	`p‹t_ªad
–
REG_DATA
, 
hdbuf
, 
SECTOR_SIZE
 );

183 
	`mem˝y
–
íåy
, 
hdbuf
 + 
PARTITION_TABLE_OFFSET
, (
PART_ENTRY
Ë* 
NR_PART_PER_DRIVE
 );

184 
	}
}

186 
	$∑πôi⁄
–
devi˚
, 
›t
 )

188 
i
;

189 
drive
 = 0;

190 
HD_INFO
 *
hd_if
 = &
hd_öfo
[
drive
];

191 
PART_ENTRY
 
∑π_èbÀ
[
NR_PART_PER_DRIVE
];

193 if–
›t
 =
P_PRIMARY
 )

195 
	`gë_∑π_èbÀ
–
drive
, 0, 
∑π_èbÀ
 );

196  
i
=0; i< 
NR_PART_PER_DRIVE
; i++ )

198 if–
∑π_èbÀ
[
i
].
sys_id
 =
NO_PART
 )

200 
hd_if
->
¥im¨y
[
i
+1].
ba£
 = 
∑π_èbÀ
[i].
°¨t_£˘
;

201 
hd_if
->
¥im¨y
[
i
+1].
size
 = 
∑π_èbÀ
[i].
ƒ_£˘s
;

202 if–
∑π_èbÀ
[
i
].
sys_id
 =
EXT_PART
 )

203 
	`∑πôi⁄
–
drive
+
i
+1, 
P_EXTENDED
 );

206 if–
›t
 =
P_EXTENDED
 )

208 
j
 = 
devi˚
 ;

209 
ext_°¨t_£˘

hd_if
->
¥im¨y
[
j
].
ba£
;

210 
s
 = 
ext_°¨t_£˘
;

211 
ƒ_1°_sub
 = (
j
-1Ë* 
NR_SUB_PER_PART
 ;

213  
i
=0; i< 
NR_SUB_PER_PART
; i++ )

215 
dev_ƒ
 = 
ƒ_1°_sub
 + 
i
;

216 
	`gë_∑π_èbÀ
–
drive
, 
s
, 
∑π_èbÀ
 );

217 
hd_if
->
logiˇl
[
dev_ƒ
].
ba£
 = 
s
+
∑π_èbÀ
[0].
°¨t_£˘
;

218 
hd_if
->
logiˇl
[
dev_ƒ
].
size
 = 
∑π_èbÀ
[0].
ƒ_£˘s
;

219 
s
 = 
ext_°¨t_£˘
 + 
∑π_èbÀ
[1].
°¨t_£˘
;

220 if–
∑π_èbÀ
[1].
sys_id
 =
NO_PART
 )

225 
	`as£π
(0);

226 
	}
}

228 
	$¥öt_hdöfo
–
HD_INFO
 *
hd_if
 )

230 
i
;

231  
i
=0; i<
NR_PART_PER_DRIVE
+1; i++ )

233 
	`¥ötk
("%sPART_%d: base %d(0x%x), size %d(0x%x) (int sector)\n",

234 
i
 == 0 ? " " : " ",

235 
i
,

236 
hd_if
->
¥im¨y
[
i
].
ba£
,

237 
hd_if
->
¥im¨y
[
i
].
ba£
,

238 
hd_if
->
¥im¨y
[
i
].
size
,

239 
hd_if
->
¥im¨y
[
i
].
size
);

241  
i
=0; i<
NR_SUB_PER_DRIVE
; i++ )

243 if–
hd_if
->
logiˇl
[
i
].
size
 == 0 )

245 
	`¥ötk
(" %sPART_%d: base %d(0x%x), size %d(0x%x) (int sector)\n",

246 
i
 == 0 ? " " : " ",

247 
i
,

248 
hd_if
->
logiˇl
[
i
].
ba£
,

249 
hd_if
->
logiˇl
[
i
].
ba£
,

250 
hd_if
->
logiˇl
[
i
].
size
,

251 
hd_if
->
logiˇl
[
i
].
size
);

253 
	}
}

255 
	$hd_idítify
(
drive
)

257 
hd_cmd
 
cmd
;

258 
cmd
.
devi˚
 = 
	`MAKE_DEVICE_REG
(0, 
drive
, 0);

259 
cmd
.
comm™d
 = 
ATA_IDENTIFY
;

260 
	`hd_cmd_out
(&
cmd
);

261 
	`öãºu±_waô
();

262 
	`p‹t_ªad
(
REG_DATA
, 
hdbuf
, 
SECTOR_SIZE
);

264 
	`¥öt_idítify_öfo
((
u16
*)
hdbuf
);

266 
u16
 *
hd_if
 = (u16 *Ë
hdbuf
;

267 
hd_öfo
[
drive
].
¥im¨y
[0].
ba£
 = 0;

268 
hd_öfo
[
drive
].
¥im¨y
[0].
size
 = ( ()
hd_if
[61] << 16 ) + hd_if[60] ;

269 
	}
}

271 
	$¥öt_idítify_öfo
(
u16
* 
hdöfo
)

273 
i
, 
k
;

274 
s
[64];

276 
	sidí_öfo_ascii
 {

277 
idx
;

278 
Àn
;

279 * 
desc
;

280 } 
iöfo
[] = {{10, 20, "HD SN"},

283 
k
 = 0; k < (
iöfo
)/(iinfo[0]); k++) {

284 * 
p
 = (*)&
hdöfo
[
iöfo
[
k
].
idx
];

285 
i
 = 0; i < 
iöfo
[
k
].
Àn
/2; i++) {

286 
s
[
i
*2+1] = *
p
++;

287 
s
[
i
*2] = *
p
++;

289 
s
[
i
*2] = 0;

290 
	`¥ötk
("%s: %s\n", 
iöfo
[
k
].
desc
, 
s
);

293 
ˇ∑bûôõs
 = 
hdöfo
[49];

294 
	`¥ötk
("LBA supported: %s\n",

295 (
ˇ∑bûôõs
 & 0x0200) ? "Yes" : "No");

297 
cmd_£t_suµ‹ãd
 = 
hdöfo
[83];

298 
	`¥ötk
("LBA48 supported: %s\n",

299 (
cmd_£t_suµ‹ãd
 & 0x0400) ? "Yes" : "No");

301 
£˘‹s
 = (()
hdöfo
[61] << 16) + hdinfo[60];

302 
	`¥ötk
("HD size: %dMB\n", 
£˘‹s
 * 512 / 1000000);

303 
	}
}

305 
	$hd_cmd_out
(
hd_cmd
* 
cmd
)

307 i‡(!
	`waôf‹
(
STATUS_BSY
, 0, 
HD_TIMEOUT
))

308 
	`∑nic
("hdÉrror.");

311 
	`outb_p
–0, 
REG_DEV_CTRL
 );

313 
	`outb_p
–
cmd
->
„©uªs
, 
REG_FEATURES
 );

314 
	`outb_p
–
cmd
->
cou¡
, 
REG_NSECTOR
 );

315 
	`outb_p
–
cmd
->
lba_low
, 
REG_LBA_LOW
 );

316 
	`outb_p
–
cmd
->
lba_mid
, 
REG_LBA_MID
 );

317 
	`outb_p
–
cmd
->
lba_high
, 
REG_LBA_HIGH
 );

318 
	`outb_p
–
cmd
->
devi˚
, 
REG_DEVICE
 );

320 
	`outb_p
–
cmd
->
comm™d
, 
REG_CMD
 );

321 
	}
}

323 
	$öãºu±_waô
()

325 
MESSAGE
 
msg
;

326 
	`£nd_ªcv
(
RECEIVE
, 
INTERRUPT
, &
msg
);

327 
	}
}

329 
	$waôf‹
(
mask
, 
vÆ
, 
timeout
)

331 
t
 = 
	`gë_ticks
();

333 ((
	`gë_ticks
(Ë- 
t
Ë* 1000 / 
HZ
Ë< 
timeout
)

334 i‡((
	`ö_byã
(
REG_STATUS
Ë& 
mask
Ë=
vÆ
)

338 
	}
}

340 
	$hd_h™dÀr
(
úq
)

342 
hd_°©us
 = 
	`ö_byã
(
REG_STATUS
);

344 
	`öf‹m_öt
(
TASK_HD
);

345 
	}
}

	@kernel/i8259.c

1 
	~"p‹t.h
"

2 
	~"ty≥.h
"

3 
	~"c⁄°.h
"

4 
	~"¥Ÿe˘.h
"

5 
	~"ây.h
"

6 
	~"c⁄sﬁe.h
"

7 
	~"°rög.h
"

8 
	~"¥Ÿo.h
"

9 
	~"asm/io.h
"

10 
	~"i8259.h
"

11 
	~"lib/°dio.h
"

13 
úq_h™dÀr
 
	gúq_èbÀ
[
NR_IRQ
];

14 
•urious_úq
(
úq
);

16 
	$öô_8259A
()

18 
	`outb_p
–0x11, 
INT_M_CTL
);

20 
	`outb_p
–0x11, 
INT_S_CTL
 );

22 
	`outb_p
–
INT_VECTOR_IRQ0
, 
INT_M_CTLMASK
 );

24 
	`outb_p
–
INT_VECTOR_IRQ8
, 
INT_S_CTLMASK
 );

26 
	`outb_p
–0x4, 
INT_M_CTLMASK
 );

28 
	`outb_p
–0x2, 
INT_S_CTLMASK
 );

30 
	`outb_p
–0x1, 
INT_M_CTLMASK
 );

32 
	`outb_p
–0x1, 
INT_S_CTLMASK
 );

34 
	`outb_p
–0xff, 
INT_M_CTLMASK
 );

36 
	`outb_p
–0xff, 
INT_S_CTLMASK
 );

38 
i
;

39 
i
=0;i<
NR_IRQ
;i++)

41 
úq_èbÀ
[
i
]=
•urious_úq
;

43 
	}
}

46 
	$•urious_úq
(
úq
)

48 
	`¥ötk
("su¥ious_úq: %d \n", 
úq
 );

49 
	}
}

51 
	$put_úq_h™dÀr
(
úq
,
úq_h™dÀr
 
h™dÀr
)

53 
	`dißbÀ_úq
(
úq
);

54 
úq_èbÀ
[
úq
]=
h™dÀr
;

55 
	}
}

	@kernel/kernel.S

2 .
gdt_±r
,
idt_±r
,
p_¥oc_ªady
,
tss
,
di•_pos
,
k_ªíãr


4 .
c°¨t
,
kî√l_maö
,
ex˚±i⁄_h™dÀr
,
•urious_úq
,
˛ock_h™dÀr
,
sys_ˇŒ_èbÀ


7 .
bss


8 
SèckS∑˚
: .
fûl
 2048

9 
SèckT›
:

11 .
ãxt


13 
	~"sc⁄°.h
"

14 .
globÆ
 
_°¨t
 ,
ª°¨t
,
sys_ˇŒ


16 .
globÆ
 
divide_îr‹
,
sögÀ_°ï_ex˚±i⁄
,
nmi
,
bªakpoöt_ex˚±i⁄


17 .
globÆ
 
ovîÊow
,
bounds_check
,
övÆ_›code
,
c›r_nŸ_avaûabÀ


18 .
globÆ
 
doubÀ_Áu…
,
c›r_£g_ovîrun
,
övÆ_tss
,
£gmít_nŸ_¥e£¡


19 .
globÆ
 
°ack_ex˚±i⁄
,
gíîÆ_¥Ÿe˘i⁄
,
∑ge_Áu…
,
c›r_îr‹


20 .
globÆ
 
hwöt00


21 .
globÆ
 
hwöt01


22 .
globÆ
 
hwöt02


23 .
globÆ
 
hwöt03


24 .
globÆ
 
hwöt04


25 .
globÆ
 
hwöt05


26 .
globÆ
 
hwöt06


27 .
globÆ
 
hwöt07


28 .
globÆ
 
hwöt08


29 .
globÆ
 
hwöt09


30 .
globÆ
 
hwöt10


31 .
globÆ
 
hwöt11


32 .
globÆ
 
hwöt12


33 .
globÆ
 
hwöt13


34 .
globÆ
 
hwöt14


35 .
globÆ
 
hwöt15


38 
_°¨t
:

39 
mov
 
$SèckT›
,%
e•


40 
movl
 
$0
,(
di•_pos
)

41 
	$sgdt
 (
gdt_±r
)

42 
ˇŒ
 
c°¨t


43 
	$lgdt
 (
gdt_±r
)

44 
	$lidt
 (
idt_±r
)

46 
jmp
 
$SELECTOR_KERNEL_CS
,
$csöô


47 
csöô
:

48 
movb
 
$0x0f
,%
ah


49 
movb
 
$
'K',%
Æ


50 
mov
 %
ax
,%
gs
:((80*1+39)*2)

51 
x‹
 %
óx
,%eax

52 
mov
 
$SELECTOR_TSS
,%
ax


53 
…r
 %
ax


54 
jmp
 
kî√l_maö


56 .
ma¸o
 
hwöt_ma°î
 
n


57 
ˇŒ
 
ßve


58 
ö
 
$0x21
,%
Æ


59 
‹
 
	`$
(1<<\
n
),%
Æ


60 
out
 %
Æ
,
$0x21


62 
mov
 
$EOI
,%
Æ


63 
out
 %
Æ
,
$0x20


64 
°i


66 
push
 
	`$
(\
n
)

67 
mov
 
$úq_èbÀ
,%
ebx


68 
ˇŒ
 *(4*\
n
)(%
ebx
)

69 
add
 
$4
,%
e•


70 
˛i


72 
ö
 
$0x21
,%
Æ


73 
™d
 
$
~(1<<\
n
),%
Æ


74 
out
 %
Æ
,
$0x21


76 
ªt


77 .
ídm


79 .
ma¸o
 
hwöt_¶ave
 
n


80 
ˇŒ
 
ßve


81 
ö
 
$0xA1
,%
Æ


82 
‹
 
	`$
(1 << (\
n
 - 8)),%
Æ


83 
out
 %
Æ
,
$0xA1


85 
mov
 
$EOI
,%
Æ


86 
out
 %
Æ
,
$0x20


87 
n›


88 
out
 %
Æ
,
$0xA0


89 
°i


91 
push
 
	`$
(\
n
)

92 
mov
 
$úq_èbÀ
,%
ebx


93 
ˇŒ
 *(4*\
n
)(%
ebx
)

94 
add
 
$4
,%
e•


95 
˛i


97 
ö
 
$0xA1
,%
Æ


98 
™d
 
$
~(1 << (\
n
 - 8)),%
Æ


99 
out
 %
Æ
,
$0xA1


100 
ªt


101 .
ídm


104 .
Æign
 16

105 
sys_ˇŒ
:

106 
ˇŒ
 
ßve


107 
	$pushl
 (
p_¥oc_ªady
)

108 
°i


109 
push
 %
esi


110 
push
 %
edx


111 
push
 %
ecx


112 
push
 %
ebx


113 
ˇŒ
 *
	`sys_ˇŒ_èbÀ
(,%
óx
,4)

114 
add
 
$16
,%
e•


115 
p›
 %
esi


116 
mov
 %
óx
,(
EAXREG
-
P_STACKBASE
)(%
esi
)

117 
˛i


118 
ªt


120 
hwöt00
:

121 
hwöt_ma°î
 0

122 
ßve
:

123 
pushÆ


124 
push
 %
ds


125 
push
 %
es


126 
push
 %
fs


127 
push
 %
gs


128 
mov
 %
edx
,%
esi


129 
mov
 %
ss
,%
dx


130 
mov
 %
dx
,%
ds


131 
mov
 %
dx
,%
es


132 
mov
 %
dx
,%
fs


133 
mov
 %
esi
,%
edx


135 
mov
 %
e•
,%
esi


137 
	$ö˛
 (
k_ªíãr
)

138 
cm∂
 
$0
,(
k_ªíãr
)

139 
j√
 .
ª_íãr1


141 
mov
 
$SèckT›
,%
e•


142 
push
 
$ª°¨t


143 
jmp
 *(
RETADR
-
P_STACKBASE
)(%
esi
)

144 .
ª_íãr1
:

145 
push
 
$ª°¨t_ªíãr


146 
jmp
 *(
RETADR
-
P_STACKBASE
)(%
esi
)

149 .
Æign
 16

150 
hwöt01
: #I¡îru± 
routöe
 
úq
 1 (
keybﬂrd
)

151 
hwöt_ma°î
 1

153 .
Æign
 16

154 
hwöt02
: #I¡îru± 
routöe
 
úq
 2 (
ˇsˇde
!)

155 
hwöt_ma°î
 2

157 .
Æign
 16

158 
hwöt03
: #I¡îru± 
routöe
 
úq
 3 (
£c⁄d
 
£rül
)

159 
hwöt_ma°î
 3

161 .
Æign
 16

162 
hwöt04
: #I¡îru± 
routöe
 
úq
 4 (
fú°
 
£rül
)

163 
hwöt_ma°î
 4

165 .
Æign
 16

166 
hwöt05
: #I¡îru± 
routöe
 
úq
 5 (
XT
 
wöche°î
)

167 
hwöt_ma°î
 5

169 .
Æign
 16

170 
hwöt06
: #I¡îru± 
routöe
 
úq
 6 (
Ê›py
)

171 
hwöt_ma°î
 6

173 .
Æign
 16

174 
hwöt07
: #I¡îru± 
routöe
 
úq
 7 (
¥öãr
)

175 
hwöt_ma°î
 7

178 .
Æign
 16

179 
hwöt08
: #I¡îru± 
routöe
 
úq
 8 (
ªÆtime
 
˛ock
).

180 
hwöt_¶ave
 8

182 .
Æign
 16

183 
hwöt09
: #I¡îru± 
routöe
 
úq
 9 (úq 2 
ªdúe˘ed
)

184 
hwöt_¶ave
 9

186 .
Æign
 16

187 
hwöt10
: #I¡îru± 
routöe
 
úq
 10

188 
hwöt_¶ave
 10

190 .
Æign
 16

191 
hwöt11
: #I¡îru± 
routöe
 
úq
 11

192 
hwöt_¶ave
 11

194 .
Æign
 16

195 
hwöt12
: #I¡îru± 
routöe
 
úq
 12

196 
hwöt_¶ave
 12

198 .
Æign
 16

199 
hwöt13
: #I¡îru± 
routöe
 
úq
 13 (
FPU
 
ex˚±i⁄
)

200 
hwöt_¶ave
 13

202 .
Æign
 16

203 
hwöt14
: #I¡îru± 
routöe
 
úq
 14 (
AT
 
wöche°î
)

204 
hwöt_¶ave
 14

206 .
Æign
 16

207 
hwöt15
: #I¡îru± 
routöe
 
úq
 15

208 
hwöt_¶ave
 15

210 
divide_îr‹
:

211 
push
 
$0xffffffff


212 
push
 
$0


213 
jmp
 
ex˚±i⁄


214 
sögÀ_°ï_ex˚±i⁄
:

215 
push
 
$0xffffffff


216 
push
 
$1


217 
jmp
 
ex˚±i⁄


218 
nmi
:

219 
push
 
$0xffffffff


220 
push
 
$2


221 
jmp
 
ex˚±i⁄


222 
bªakpoöt_ex˚±i⁄
:

223 
push
 
$0xffffffff


224 
push
 
$3


225 
jmp
 
ex˚±i⁄


226 
ovîÊow
:

227 
push
 
$0xffffffff


228 
push
 
$4


229 
jmp
 
ex˚±i⁄


230 
bounds_check
:

231 
push
 
$0xffffffff


232 
push
 
$5


233 
jmp
 
ex˚±i⁄


234 
övÆ_›code
:

235 
push
 
$0xffffffff


236 
push
 
$6


237 
jmp
 
ex˚±i⁄


238 
c›r_nŸ_avaûabÀ
:

239 
push
 
$0xffffffff


240 
push
 
$7


241 
jmp
 
ex˚±i⁄


242 
doubÀ_Áu…
:

243 
push
 
$8


244 
jmp
 
ex˚±i⁄


245 
c›r_£g_ovîrun
:

246 
push
 
$0xffffffff


247 
push
 
$9


248 
jmp
 
ex˚±i⁄


249 
övÆ_tss
:

250 
push
 
$10


251 
jmp
 
ex˚±i⁄


252 
£gmít_nŸ_¥e£¡
:

253 
push
 
$11


254 
jmp
 
ex˚±i⁄


255 
°ack_ex˚±i⁄
:

256 
push
 
$12


257 
jmp
 
ex˚±i⁄


258 
gíîÆ_¥Ÿe˘i⁄
:

259 
push
 
$13


260 
jmp
 
ex˚±i⁄


261 
∑ge_Áu…
:

262 
push
 
$14


263 
jmp
 
ex˚±i⁄


264 
c›r_îr‹
:

265 
push
 0xffffffff

266 
push
 
$16


267 
jmp
 
ex˚±i⁄


269 
ex˚±i⁄
:

270 
ˇŒ
 
ex˚±i⁄_h™dÀr


271 
add
 
$8
,%
e•


272 
jmp
 .

274 
ª°¨t
:

275 
	`mov
 (
p_¥oc_ªady
),%
e•


276 
	`Œdt
 (
P_LDT_SEL
)(%
e•
)

277 
	`Àa
 (
P_STACKTOP
)(%
e•
),%
óx


278 
mov
 
$tss
,%
ebx


279 
mov
 %
óx
,(
TSS3_S_SP0
)(%
ebx
)

281 
ª°¨t_ªíãr
:

282 
	$de˛
 (
k_ªíãr
)

283 
p›
 %
gs


284 
p›
 %
fs


285 
p›
 %
es


286 
p›
 %
ds


287 
p›Æ


289 
add
 
$4
,%
e•


291 
úë


	@kernel/keyboard.c

1 
	~"p‹t.h
"

2 
	~"ty≥.h
"

3 
	~"c⁄°.h
"

4 
	~"¥Ÿe˘.h
"

5 
	~"ây.h
"

6 
	~"c⁄sﬁe.h
"

7 
	~"°rög.h
"

8 
	~"¥oc.h
"

9 
	~"¥Ÿo.h
"

10 
	~"keybﬂrd.h
"

11 
	~"keym≠.h
"

12 
	~"i8259.h
"

14 
KB_INPUT
 
	gkb_ö
;

15 
	gcode_wôh_E0
=0;

16 
	gshi·_l
;

17 
	gshi·_r
;

18 
	gÆt_l
;

19 
	gÆt_r
;

20 
	g˘æ_l
;

21 
	g˘æ_r
;

22 
	gˇps_lock
;

23 
	gnum_lock
;

24 
	gs¸ﬁl_lock
;

25 
	gcﬁumn
;

27 
u8
 
gë_byã_‰om_kbuf
();

28 
kb_waô
();

29 
kb_ack
();

30 
£t_Àds
();

32 
	$keybﬂrd_h™dÀr
(
úq
)

34 
u8
 
sˇn_code
=
	`ö_byã
(0x60);

36 if(
kb_ö
.
cou¡
< 
KB_IN_BYTES
)

38 *(
kb_ö
.
p_hód
++)=
sˇn_code
;

39 if(
kb_ö
.
p_hód
 =kb_ö.
buf
+
KB_IN_BYTES
)

41 
kb_ö
.
p_hód
=kb_ö.
buf
;

43 
kb_ö
.
cou¡
++;

45 
key_¥es£d
 = 1;

46 
	}
}

48 
	$öô_keybﬂrd
()

50 
kb_ö
.
cou¡
=0;

51 
kb_ö
.
p_hód
=kb_ö.
p_èû
=kb_ö.
buf
;

52 
shi·_l
=
shi·_r
=0;

53 
Æt_l
=
Æt_r
=0;

54 
˘æ_l
=
˘æ_r
=0;

55 
ˇps_lock
=0;

56 
num_lock
=1;

57 
s¸ﬁl_lock
=0;

58 
	`£t_Àds
();

59 
	`put_úq_h™dÀr
(
KEYBOARD_IRQ
,
keybﬂrd_h™dÀr
);

60 
	`íabÀ_úq
(
KEYBOARD_IRQ
);

61 
	}
}

63 
	$keybﬂrd_ªad
(
TTY
* 
p_ây
)

65 
u8
 
sˇn_code
;

66 
make
;

67 
u32
 
key
=0;

68 
u32
* 
keyrow
=0;

70 if(
kb_ö
.
cou¡
 > 0)

72 
code_wôh_E0
=0;

73 
	`dißbÀ_öt
();

74 
sˇn_code
=
	`gë_byã_‰om_kbuf
();

76 if(
sˇn_code
 == 0xe1)

78 
i
;

79 
u8
 
∑u£bªak_scode
[]={0xE1,0x1D,0x45,0xE1,0x9d,0xc5};

80 
is_∑u£bªak
=1;

81 
i
=1;i<6;i++)

83 if(
	`gë_byã_‰om_kbuf
()!=
∑u£bªak_scode
[
i
])

85 
is_∑u£bªak
=0;

89 if(
is_∑u£bªak
)

91 
key
=
PAUSEBREAK
;

94 if(
sˇn_code
 == 0xe0)

96 
sˇn_code
=
	`gë_byã_‰om_kbuf
();

97 if(
sˇn_code
== 0x2a)

98 if(
	`gë_byã_‰om_kbuf
() == 0xe0)

99 if(
	`gë_byã_‰om_kbuf
() == 0x37)

101 
key
=
PRINTSCREEN
;

102 
make
=1;

104 if(
sˇn_code
 == 0xb7)

105 if(
	`gë_byã_‰om_kbuf
() == 0xe0)

106 if(
	`gë_byã_‰om_kbuf
() == 0xaa)

108 
key
=
PRINTSCREEN
;

109 
make
=0;

111 if(
key
==0)

112 
code_wôh_E0
=1;

114 if((
key
 !
PAUSEBREAK
Ë&& (key !
PRINTSCREEN
))

116 
make
=(
sˇn_code
 & 
FLAG_BREAK
 ? 
FALSE
 : 
TRUE
);

117 
keyrow
=&
keym≠
[(
sˇn_code
 & 0x7f)* 
MAP_COLS
];

118 
cﬁumn
=0;

120 
ˇps
=
shi·_l
||
shi·_r
;

121 if(
ˇps_lock
)

123 if((
keyrow
[0] >= 'a') && (keyrow[0] <= 'z'))

125 
ˇps
=!caps;

128 if(
ˇps
)

130 
cﬁumn
=1;

132 if(
code_wôh_E0
)

134 
cﬁumn
=2;

135 
code_wôh_E0
=0;

137 
key
=
keyrow
[
cﬁumn
];

139 
key
)

141 
SHIFT_L
:

142 
shi·_l
=
make
;

144 
SHIFT_R
:

145 
shi·_r
=
make
;

147 
CTRL_L
:

148 
˘æ_l
=
make
;

150 
CTRL_R
:

151 
˘æ_r
=
make
;

153 
ALT_L
:

154 
Æt_l
=
make
;

156 
ALT_R
:

157 
Æt_r
=
make
;

159 
CAPS_LOCK
:

160 if(
make
)

162 
ˇps_lock
 = !caps_lock;

163 
	`£t_Àds
();

166 
NUM_LOCK
:

167 if(
make
)

169 
num_lock
=!num_lock;

170 
	`£t_Àds
();

173 
SCROLL_LOCK
:

174 if(
make
)

176 
s¸ﬁl_lock
=!scroll_lock;

177 
	`£t_Àds
();

183 if(
make
 == 1)

185 
∑d
=0;

186 if((
key
>=
PAD_SLASH
Ë&& (key<=
PAD_9
))

188 
∑d
=1;

189 
key
)

191 
PAD_SLASH
:

192 
key
='/';

194 
PAD_STAR
:

195 
key
='*';

197 
PAD_MINUS
:

198 
key
='-';

200 
PAD_PLUS
:

201 
key
='+';

203 
PAD_ENTER
:

204 
key
=
ENTER
;

207 if(
num_lock
 && (
key
>=
PAD_0
Ë&& (key<=
PAD_9
))

209 
key
=key-
PAD_0
+'0';

211 if(
num_lock
 && 
key
 =
PAD_DOT
)

213 
key
='.';

217 
key
)

219 
PAD_HOME
:

220 
key
=
HOME
;

222 
PAD_END
:

223 
key
=
END
;

225 
PAD_PAGEUP
:

226 
key
=
PAGEUP
;

228 
PAD_PAGEDOWN
:

229 
key
=
PAGEDOWN
;

231 
PAD_INS
:

232 
key
=
INSERT
;

234 
PAD_UP
:

235 
key
=
UP
;

237 
PAD_DOWN
:

238 
key
=
DOWN
;

240 
PAD_LEFT
:

241 
key
=
LEFT
;

243 
PAD_RIGHT
:

244 
key
=
RIGHT
;

246 
PAD_DOT
:

247 
key
=
DELETE
;

256 
key
 |
shi·_l
 ? 
FLAG_SHIFT_L
 :0;

257 
key
 |
shi·_r
 ? 
FLAG_SHIFT_R
 :0;

258 
key
 |
˘æ_l
 ? 
FLAG_CTRL_L
 :0;

259 
key
 |
˘æ_r
 ? 
FLAG_CTRL_R
 :0;

260 
key
 |
Æt_l
 ? 
FLAG_ALT_L
 :0;

261 
key
 |
Æt_r
 ? 
FLAG_ALT_R
 :0;

262 
key
 |=
∑d
 ? 
FLAG_PAD
 :0;

264 
	`ö_¥o˚ss
(
p_ây
,
key
);

268 
	}
}

271 
u8
 
	$gë_byã_‰om_kbuf
()

273 
u8
 
sˇn_code
;

274 
kb_ö
.
cou¡
 <=0)

277 
	`dißbÀ_öt
();

278 
sˇn_code
=*(
kb_ö
.
p_èû
++);

279 if(
kb_ö
.
p_èû
 =kb_ö.
buf
+
KB_IN_BYTES
)

281 
kb_ö
.
p_èû
=kb_ö.
buf
;

283 
kb_ö
.
cou¡
--;

284 
	`íabÀ_öt
();

285  
sˇn_code
;

286 
	}
}

288 
	$kb_waô
()

290 
u8
 
kb_°©
;

293 
kb_°©
 = 
	`ö_byã
(
KB_CMD
);

294 }
kb_°©
&0x02);

295 
	}
}

297 
	$kb_ack
()

299 
u8
 
kb_ªad
;

302 
kb_ªad
=
	`ö_byã
(
KB_DATA
);

303 }
kb_ªad
!=
KB_ACK
);

304 
	}
}

306 
	$£t_Àds
()

308 
u8
 
Àds
=(
ˇps_lock
<<2)|(
num_lock
<<1Ë|
s¸ﬁl_lock
;

309 
	`kb_waô
();

310 
	`out_byã
(
KB_DATA
,
LED_CODE
);

311 
	`kb_ack
();

312 
	`kb_waô
();

313 
	`out_byã
(
KB_DATA
,
Àds
);

314 
	`kb_ack
();

315 
	}
}

	@kernel/main.c

1 
	~"p‹t.h
"

2 
	~"ty≥.h
"

3 
	~"c⁄°.h
"

4 
	~"¥Ÿe˘.h
"

5 
	~"ây.h
"

6 
	~"fs.h
"

7 
	~"c⁄sﬁe.h
"

8 
	~"°rög.h
"

9 
	~"¥oc.h
"

10 
	~"¥Ÿo.h
"

11 
	~"time.h
"

12 
	~"lib/°dio.h
"

13 
	~"lib/f˙é.h
"

15 
	$kî√l_maö
()

17 
ticks
=0;

19 
	`di•_°r
("-----kernel_main begins ----\n");

21 
	`öô_¥oc
();

23 
	`öô_˛ock
();

25 
	`ª°¨t
();

29 
	}
}

32 
	$Te°A
()

40 
	`mûli_dñay
(1000);

42 
	}
}

44 
	$shñl
()

51 
rdbuf
[128]={0};

55 
	`¥ötf
("$");

56 
r
 = 
	`ªad
–0, 
rdbuf
, 70 );

57 
rdbuf
[
r
] = 0;

59 
¨gc
 = 0;

60 *
¨gv
[
PROC_STACK
]={0};

61 *
p
 = 
rdbuf
;

62 *
s
;

63 
w‹d
 = 0;

64 
ch
;

66 
ch
 = *
p
;

67 if–
ch
 !' ' && ch !0 && !
w‹d
 )

69 
s
 = 
p
;

70 
w‹d
 = 1;

72 if–(
ch
 =' ' || ch =0Ë&& 
w‹d
 )

74 
w‹d
 = 0;

75 
¨gv
[
¨gc
++] = 
s
;

76 *
p
 = 0;

78 
p
++;

79 } 
ch
 );

80 
¨gv
[
¨gc
] = 0;

82 
fd
 = 
	`›í
–
¨gv
[0], 
O_RDWR
 );

83 if–
fd
 == -1 )

85 if–
rdbuf
[0] )

86 
	`¥ötf
("{%s}\n",
rdbuf
);

90 
pid
 = 
	`f‹k
();

91 if–
pid
 != 0 )

93 
s
;

94 
	`waô
(&
s
);

100 
	`execv
–
¨gv
[0],árgv );

104 
	`•ö
("Init");

105 
	`mûli_dñay
(1000);

106 
	}
}

108 
	$Te°C
()

113 
	`mûli_dñay
(1000);

115 
	}
}

116 
	$Inô
()

118 
ây_«me
[] = "/dev_tty1";

119 
fd_°dö
 = 
	`›í
–
ây_«me
, 
O_RDWR
 );

120 
	`as£π
–
fd_°dö
 == 0 );

121 
fd_°dout
 = 
	`›í
–
ây_«me
, 
O_RDWR
 );

122 
	`as£π
–
fd_°dout
 == 1 );

127 
pid
 = 
	`f‹k
();

128 if–
pid
 != 0 )

130 
	`¥ötf
–"∑ª¡ i†ru¬ög chûdÖid: %d\n", 
pid
 );

134 
	`¥ötf
–"chûd i†runögÖid: %d\n", 
	`gëpid
() );

137 
	`shñl
();

138 
	`as£π
(0);

142 
s
;

143 
chûd
 = 
	`waô
–&
s
 );

144 
	`¥ötf
–"chûd (%dËexôed wôh sètus: %d.\n", 
chûd
, 
s
 );

146 
	`as£π
(0);

147 
	}
}

149 
	$Te°B
()

151 
fd_°dö
 = 
	`›í
("/dev_ây1", 
O_RDWR
);

152 
	`as£π
(
fd_°dö
 == 0);

153 
fd_°dout
 = 
	`›í
("/dev_ây1", 
O_RDWR
);

154 
	`as£π
(
fd_°dout
 == 1);

155 
rdbuf
[128]={0};

157 
	`¥ötf
("TestB() isÑunning ...\n");

161 
	`•ö
("TestB");

162 
	`¥ötf
("$");

163 
r
 = 
	`ªad
–
fd_°dö
, 
rdbuf
, 70 );

164 
rdbuf
[
r
] = 0;

165 if–
r
 > 0 )

166 
	`¥ötf
("{%s}\n",
rdbuf
 );

186 
	}
}

	@kernel/proc.c

1 
	~"p‹t.h
"

2 
	~"ty≥.h
"

3 
	~"c⁄°.h
"

4 
	~"¥Ÿe˘.h
"

5 
	~"ây.h
"

6 
	~"c⁄sﬁe.h
"

7 
	~"°rög.h
"

8 
	~"¥oc.h
"

9 
	~"¥Ÿo.h
"

10 
	~"sched.h
"

11 
	~"î∫o.h
"

12 
	~"lib/°dio.h
"

14 
PROCESS
 
	g¥oc_èbÀ
[
NR_TASKS
+ 
NR_PROCS
];

15 
	gk_ªíãr
 = 0;

17 
TASK
 
	gèsk_èbÀ
[
NR_TASKS
]=

19 {
èsk_ây
,
STACK_SIZE_TTY
,"TTY"},

20 {
èsk_sys
,
STACK_SIZE_SYS
,"SYS"},

21 {
èsk_hd
, 
STACK_SIZE_HD
, "HD"},

22 {
èsk_fs
, 
STACK_SIZE_FS
, "FS"},

23 {
èsk_mm
, 
STACK_SIZE_MM
, "MM"}

25 
TASK
 
	gu£r_¥oc_èbÀ
[
NR_NATIVE_PROCS
]=

27 {
Inô
, 
STACK_SIZE_INIT
, "INIT"},

28 {
Te°A
,
STACK_SIZE_TESTA
,"TestA"},

29 {
Te°B
,
STACK_SIZE_TESTB
,"TestB"},

30 {
Te°C
,
STACK_SIZE_TESTC
,"TestC"}

32 
	gèsk_°ack
[
STACK_SIZE_TOTAL
];

33 
sy°em_ˇŒ
 
	gsys_ˇŒ_èbÀ
[
NR_SYS_CALL
]={
sys_¥ötx
,

34 
sys_£ndªc
};

36 
block
(
¥oc
 *
p
);

37 
unblock
(
¥oc
 *
p
);

38 
dódlock
(
§c
,
de°
);

39 
msg_£nd
(
¥oc
 *
cuºít
,
de°
,
MESSAGE
 *
m
);

40 
msg_ª˚ive
(
¥oc
 *
cuºít
,
§c
,
MESSAGE
 *
m
);

41 
£ndªcv
(
fun˘i⁄
,
§c_de°
,
MESSAGE
 *
msg
);

43 
	$öô_¥oc
()

45 
TASK
* 
p_èsk
 = 
èsk_èbÀ
;

46 
PROCESS
* 
p_¥oc
 = 
¥oc_èbÀ
;

47 
u8
 
¥ivûege
;

48 
u8
 
Ωl
;

49 
i
,
j
,
eÊags
,
¥io
;

50 * 
p_èsk_°ack
=
èsk_°ack
+
STACK_SIZE_TOTAL
;

51 
i
=0;i<
NR_TASKS
+
NR_PROCS
;i++)

53 if–
i
>
NR_TASKS
 + 
NR_NATIVE_PROCS
 )

55 
p_¥oc
->
Êags
 = 
FREE_SLOT
;

56 
p_¥oc
++;

59 if(
i
<
NR_TASKS
)

61 
p_èsk
=
èsk_èbÀ
+
i
;

62 
¥ivûege
=
PRIVILEGE_TASK
;

63 
Ωl
=
RPL_TASK
;

64 
eÊags
=0x1202;

65 
¥io
=15;

69 
p_èsk
=
u£r_¥oc_èbÀ
+(
i
-
NR_TASKS
);

70 
¥ivûege
=
PRIVILEGE_USER
;

71 
Ωl
=
RPL_USER
;

72 
eÊags
=0x202;

73 
¥io
=5;

75 
	`°r˝y
(
p_¥oc
->
«me
,
p_èsk
->name);

76 
p_¥oc
->
pid
=
i
;

77 
p_¥oc
->
∑ª¡
 = 
NO_TASK
;

78 if–
	`°rcmp
–
p_èsk
->
«me
, "INIT") != 0 )

80 
p_¥oc
->
s_ldts
[
INDEX_LDT_C
] = 
gdt
[
SELECTOR_KERNEL_CS
>>3];

81 
p_¥oc
->
s_ldts
[
INDEX_LDT_RW
] = 
gdt
[
SELECTOR_KERNEL_DS
>>3];

83 
p_¥oc
->
s_ldts
[
INDEX_LDT_C
].
©å1
 = 
DA_C
 | 
¥ivûege
 << 5;

84 
p_¥oc
->
s_ldts
[
INDEX_LDT_RW
].
©å1
 = 
DA_DRW
 | 
¥ivûege
 << 5;

88 
k_ba£
 = 0;

89 
k_limô
 = 0xD0000;

90 
	`öô_des¸ùt‹
–&
p_¥oc
->
s_ldts
[
INDEX_LDT_C
], 0, (
k_ba£
+
k_limô
)>>12, 
DA_32
 | 
DA_LIMIT_4K
 | 
DA_C
 | 
¥ivûege
 <<5);

91 
	`öô_des¸ùt‹
–&
p_¥oc
->
s_ldts
[
INDEX_LDT_RW
], 0, (
k_ba£
+
k_limô
)>>12, 
DA_32
 | 
DA_LIMIT_4K
 | 
DA_DRW
 | 
¥ivûege
 <<5);

93 
p_¥oc
->
s_ªgs
.
cs
=(0 & 
SA_RPL_MASK
 & 
SA_TI_MASK
 )| 
SA_TIL
 | 
Ωl
;

94 
p_¥oc
->
s_ªgs
.
ds
=(8 & 
SA_RPL_MASK
 & 
SA_TI_MASK
 ) | 
SA_TIL
| 
Ωl
;

95 
p_¥oc
->
s_ªgs
.
es
=(8 & 
SA_RPL_MASK
 & 
SA_TI_MASK
 ) | 
SA_TIL
 |
Ωl
;

96 
p_¥oc
->
s_ªgs
.
fs
=(8 & 
SA_RPL_MASK
 & 
SA_TI_MASK
 ) | 
SA_TIL
 | 
Ωl
;

97 
p_¥oc
->
s_ªgs
.
ss
=(8 & 
SA_RPL_MASK
 & 
SA_TI_MASK
 ) | 
SA_TIL
 | 
Ωl
;

98 
p_¥oc
->
s_ªgs
.
gs
=(
SELECTOR_KERNEL_GS
 & 
SA_RPL_MASK
Ë| 
Ωl
;

99 
p_¥oc
->
s_ªgs
.
eù
=(
u32
Ë
p_èsk
->
öôül_eù
;

100 
p_¥oc
->
s_ªgs
.
e•
=(
u32
Ë
p_èsk_°ack
;

101 
p_¥oc
->
s_ªgs
.
eÊags
=eflags;

103 
p_¥oc
->
ƒ_ây
=0;

104 
p_¥oc
->
Êags
=0;

105 
p_¥oc
->
p_msg
=0;

106 
p_¥oc
->
ªcv‰om
=
NO_TASK
;

107 
p_¥oc
->
£ndto
=
NO_TASK
;

108 
p_¥oc
->
has_öt_msg
=0;

109 
p_¥oc
->
q_£ndög
=0;

110 
p_¥oc
->
√xt_£ndög
=0;

111 
p_¥oc
->
ticks
 =Ö_¥oc->
¥i‹ôy
=
¥io
;

112 
p_èsk_°ack
-=
p_èsk
->
°acksize
;

113 
p_¥oc
++;

115 
p_¥oc
->
ƒ_ây
 = 0;

117  
j
=0; j<
NR_FILES
; j++ )

118 
p_¥oc
->
fûp
[
j
] = 0;

120 
p_¥oc_ªady
 = 
¥oc_èbÀ
;

121 
	}
}

123 
	$sys_£ndªc
(
fun˘i⁄
,
§c_de°
,
MESSAGE
* 
m
,
¥oc
*
p
)

125 
	`as£π
(
k_ªíãr
==0);

127 
	`as£π
((
§c_de°
 >0 && src_de° < 
NR_TASKS
 + 
NR_PROCS
)

128 || 
§c_de°
 =
ANY
 || src_de° =
INTERRUPT
);

129 
ªt
=0;

130 
ˇŒî
=
	`¥oc2pid
(
p
);

131 
MESSAGE
* 
mœ
=(MESSAGE*)
	`va2œ
(
ˇŒî
,
m
);

132 
mœ
->
sour˚
=
ˇŒî
;

133 
	`as£π
(
mœ
->
sour˚
 !
§c_de°
);

134 if(
fun˘i⁄
 =
SEND
)

136 
ªt
=
	`msg_£nd
(
p
,
§c_de°
,
m
);

137 if(
ªt
 !=0)

138  
ªt
;

140 if(
fun˘i⁄
 =
RECEIVE
)

142 
ªt
=
	`msg_ª˚ive
(
p
,
§c_de°
,
m
);

143 if(
ªt
 !=0)

144  
ªt
;

148 
	`∑nic
("sys_sendrec invalid function: %d (SEND: %d, RECEIVE: %d).",

149 
fun˘i⁄
,
SEND
,
RECEIVE
);

152 
	}
}

154 *
	$va2œ
(
pid
,*
va
)

156 
¥oc
 *
p
=&
¥oc_èbÀ
[
pid
];

157 
u32
 
£g_ba£
=
	`ldt_£g_löór
(
p
,
INDEX_LDT_RW
);

158 
u32
 
œ
=
£g_ba£
 +(u32)
va
;

159 if(
pid
<
NR_TASKS
+
NR_NATIVE_PROCS
)

161 
	`as£π
(
œ
==(
u32
)
va
);

163  (*)
œ
;

164 
	}
}

166 
	$ldt_£g_löór
(
¥oc
 *
p
,
idx
)

168 
des¸ùt‹
 *
d
=&(
p
->
s_ldts
[
idx
]);

169  
d
->
ba£_high
<<24 | d->
ba£_mid
<<16 | d->
ba£_low
;

170 
	}
}

172 
	$ª£t_msg
(
MESSAGE
 *
p
)

174 
	`mem£t
–
p
, 0, (
MESSAGE
) );

175 
	}
}

177 
	$block
(
¥oc
 *
p
)

179 
	`as£π
(
p
->
Êags
);

180 
	`scheduÀ
();

181 
	}
}

183 
	$unblock
(
¥oc
 *
p
)

185 
	`as£π
(
p
->
Êags
==0);

186 
	}
}

188 
	$dódlock
(
§c
,
de°
)

190 
¥oc
 *
p
=
¥oc_èbÀ
+
de°
;

193 if(
p
->
Êags
 & 
SENDING
)

195 if(
p
->
£ndto
 ==
§c
)

197 
p
=
¥oc_èbÀ
+
de°
;

198 
	`¥ötk
("=_=%s",
p
->
«me
);

201 
	`as£π
(
p
->
p_msg
);

202 
p
=
¥oc_èbÀ
+p->
£ndto
;

203 
	`¥ötk
("->%s",
p
->
«me
);

204 }
p
!=
¥oc_èbÀ
+
§c
);

205 
	`¥ötk
("=_=");

208 
p
=
¥oc_èbÀ
+p->
£ndto
;

216 
	}
}

219 
	$msg_£nd
(
¥oc
 *
cuºít
,
de°
,
MESSAGE
 *
m
)

221 
¥oc
 *
£ndî
=
cuºít
;

222 
¥oc
 *
p_de°
=
¥oc_èbÀ
+
de°
;

223 
	`as£π
(
	`¥oc2pid
(
£ndî
)!=
de°
);

224 if(
	`dódlock
(
	`¥oc2pid
(
£ndî
),
de°
))

226 
	`∑nic
(">>DEADLOCK<< %s->%s",
£ndî
->
«me
,
p_de°
->name);

228 if((
p_de°
->
Êags
 & 
RECEIVING
) &&

229 (
p_de°
->
ªcv‰om
 =
	`¥oc2pid
(
£ndî
Ë||Ö_de°->ªcv‰om=
ANY
))

231 
	`as£π
(
p_de°
->
p_msg
);

232 
	`as£π
(
m
);

234 
	`mem˝y
(
	`va2œ
(
de°
,
p_de°
->
p_msg
),

235 
	`va2œ
(
	`¥oc2pid
(
£ndî
),
m
),

236 (
MESSAGE
));

237 
p_de°
->
p_msg
=0;

238 
p_de°
->
Êags
&=~
RECEIVING
;

239 
p_de°
->
ªcv‰om
=
NO_TASK
;

240 
	`unblock
(
p_de°
);

241 
	`as£π
(
p_de°
->
Êags
 ==0);

242 
	`as£π
(
p_de°
->
p_msg
 ==0);

243 
	`as£π
(
p_de°
->
ªcv‰om
==
NO_TASK
);

244 
	`as£π
(
p_de°
->
£ndto
 ==
NO_TASK
);

245 
	`as£π
(
£ndî
->
Êags
==0);

246 
	`as£π
(
£ndî
->
p_msg
==0);

247 
	`as£π
(
£ndî
->
ªcv‰om
==
NO_TASK
);

248 
	`as£π
(
£ndî
->
£ndto
==
NO_TASK
);

252 
£ndî
->
Êags
 |
SENDING
;

254 
£ndî
->
£ndto
=
de°
;

255 
£ndî
->
p_msg
=
m
;

256 
¥oc
 *
p
;

257 if(
p_de°
->
q_£ndög
)

259 
p
=
p_de°
->
q_£ndög
;

260 
p
->
√xt_£ndög
)

262 
p
ı->
√xt_£ndög
;

264 
p
->
√xt_£ndög
=
£ndî
;

268 
p_de°
->
q_£ndög
=
£ndî
;

270 
£ndî
->
√xt_£ndög
=0;

271 
	`block
(
£ndî
);

273 
	`as£π
(
£ndî
->
Êags
==
SENDING
);

274 
	`as£π
(
£ndî
->
p_msg
!=0);

275 
	`as£π
(
£ndî
->
ªcv‰om
==
NO_TASK
);

276 
	`as£π
(
£ndî
->
£ndto
==
de°
);

279 
	}
}

281 
	$msg_ª˚ive
(
¥oc
 *
cuºít
,
§c
,
MESSAGE
 *
m
)

283 
¥oc
 *
p_who_ªcv
=
cuºít
;

284 
¥oc
 *
p_‰om
=0;

285 
¥oc
 *
¥ev
=0;

286 
c›yok
=0;

288 if((
p_who_ªcv
->
has_öt_msg
) &&

289 ((
§c
==
ANY
Ë|| (§¯==
INTERRUPT
)))

291 
MESSAGE
 
msg
;

292 
	`ª£t_msg
(&
msg
);

293 
msg
.
sour˚
=
INTERRUPT
;

294 
msg
.
ty≥
=
HARD_INT
;

295 
	`mem˝y
(
	`va2œ
(
	`¥oc2pid
(
p_who_ªcv
),
m
),&
msg
,(
MESSAGE
));

296 
p_who_ªcv
->
has_öt_msg
=0;

297 
	`as£π
(
m
);

298 
	`as£π
(
p_who_ªcv
->
Êags
==0);

299 
	`as£π
(
p_who_ªcv
->
p_msg
==0);

300 
	`as£π
(
p_who_ªcv
->
£ndto
==
NO_TASK
);

301 
	`as£π
(
p_who_ªcv
->
has_öt_msg
==0);

304 if(
§c
==
ANY
)

306 if(
p_who_ªcv
->
q_£ndög
)

308 
p_‰om
=
p_who_ªcv
->
q_£ndög
;

309 
c›yok
=1;

312 if(
§c
>=0 &&

313 
§c
< 
NR_TASKS
+
NR_PROCS
)

315 
p_‰om
=&
¥oc_èbÀ
[
§c
];

316 if((
p_‰om
->
Êags
 & 
SENDING
) &&

317 (
p_‰om
->
£ndto
 =
	`¥oc2pid
(
p_who_ªcv
)))

319 
c›yok
=1;

320 
¥oc
 *
p
=
p_who_ªcv
->
q_£ndög
;

321 
	`as£π
(
p
);

322 
p
)

324 if(
	`¥oc2pid
(
p
Ë==
§c
)

326 
¥ev
=
p
;

327 
p
ı->
√xt_£ndög
;

332 if(
c›yok
)

334 if(
p_‰om
 ==
p_who_ªcv
->
q_£ndög
)

336 
p_who_ªcv
->
q_£ndög
=
p_‰om
->
√xt_£ndög
;

337 
p_‰om
->
√xt_£ndög
=0;

341 
¥ev
->
√xt_£ndög
=
p_‰om
->next_sending;

342 
p_‰om
->
√xt_£ndög
=0;

345 
	`mem˝y
(
	`va2œ
(
	`¥oc2pid
(
p_who_ªcv
),
m
),

346 
	`va2œ
(
	`¥oc2pid
(
p_‰om
),p_‰om->
p_msg
),

347 (
MESSAGE
));

348 
p_‰om
->
p_msg
=0;

349 
p_‰om
->
£ndto
=
NO_TASK
;

350 
p_‰om
->
Êags
&=~
SENDING
;

351 
	`unblock
(
p_‰om
);

356 
p_who_ªcv
->
Êags
|=
RECEIVING
;

357 
p_who_ªcv
->
p_msg
=
m
;

358 
p_who_ªcv
->
ªcv‰om
=
§c
;

359 
	`block
(
p_who_ªcv
);

363 
	}
}

366 
	$öf‹m_öt
(
èsk_ƒ
)

368 
¥oc
* 
p
 = 
¥oc_èbÀ
 + 
èsk_ƒ
;

370 i‡((
p
->
Êags
 & 
RECEIVING
) &&

371 ((
p
->
ªcv‰om
 =
INTERRUPT
Ë|| (p->ªcv‰om =
ANY
))) {

372 
p
->
p_msg
->
sour˚
 = 
INTERRUPT
;

373 
p
->
p_msg
->
ty≥
 = 
HARD_INT
;

374 
p
->
p_msg
 = 0;

375 
p
->
has_öt_msg
 = 0;

376 
p
->
Êags
 &~
RECEIVING
;

377 
p
->
ªcv‰om
 = 
NO_TASK
;

378 
	`as£π
(
p
->
Êags
 == 0);

379 
	`unblock
(
p
);

381 
	`as£π
(
p
->
Êags
 == 0);

382 
	`as£π
(
p
->
p_msg
 == 0);

383 
	`as£π
(
p
->
ªcv‰om
 =
NO_TASK
);

384 
	`as£π
(
p
->
£ndto
 =
NO_TASK
);

387 
p
->
has_öt_msg
 = 1;

389 
	}
}

394 
	$dump_¥oc
(
¥oc
* 
p
)

396 
öfo
[
STR_DEFAULT_LEN
];

397 
i
;

398 
ãxt_cﬁ‹
 = 
	`MAKE_COLOR
(
GREEN
, 
RED
);

400 
dump_Àn
 = (
¥oc
);

402 
	`out_byã
(
CRTC_ADDR_REG
, 
START_ADDR_H
);

403 
	`out_byã
(
CRTC_DATA_REG
, 0);

404 
	`out_byã
(
CRTC_ADDR_REG
, 
START_ADDR_L
);

405 
	`out_byã
(
CRTC_DATA_REG
, 0);

407 
	`•rötf
(
öfo
, "byã dum∞o‡¥oc_èbÀ[%d]:\n", 
p
 - 
¥oc_èbÀ
); 
	`di•_cﬁ‹_°r
(öfo, 
ãxt_cﬁ‹
);

408 
i
 = 0; i < 
dump_Àn
; i++) {

409 
	`•rötf
(
öfo
, "%x.", ((*)
p
)[
i
]);

410 
	`di•_cﬁ‹_°r
(
öfo
, 
ãxt_cﬁ‹
);

415 
	`di•_cﬁ‹_°r
("\n\n", 
ãxt_cﬁ‹
);

416 
	`•rötf
(
öfo
, "ANY: 0x%x.\n", 
ANY
); 
	`di•_cﬁ‹_°r
(öfo, 
ãxt_cﬁ‹
);

417 
	`•rötf
(
öfo
, "NO_TASK: 0x%x.\n", 
NO_TASK
); 
	`di•_cﬁ‹_°r
(öfo, 
ãxt_cﬁ‹
);

418 
	`di•_cﬁ‹_°r
("\n", 
ãxt_cﬁ‹
);

420 
	`•rötf
(
öfo
, "ldt_£l: 0x%x. ", 
p
->
ldt_£l
); 
	`di•_cﬁ‹_°r
(öfo, 
ãxt_cﬁ‹
);

421 
	`•rötf
(
öfo
, "ticks: 0x%x. ", 
p
->
ticks
); 
	`di•_cﬁ‹_°r
(öfo, 
ãxt_cﬁ‹
);

422 
	`•rötf
(
öfo
, "¥i‹ôy: 0x%x. ", 
p
->
¥i‹ôy
); 
	`di•_cﬁ‹_°r
(öfo, 
ãxt_cﬁ‹
);

423 
	`•rötf
(
öfo
, "pid: 0x%x. ", 
p
->
pid
); 
	`di•_cﬁ‹_°r
(öfo, 
ãxt_cﬁ‹
);

424 
	`•rötf
(
öfo
, "«me: %s. ", 
p
->
«me
); 
	`di•_cﬁ‹_°r
(öfo, 
ãxt_cﬁ‹
);

425 
	`di•_cﬁ‹_°r
("\n", 
ãxt_cﬁ‹
);

426 
	`•rötf
(
öfo
, "Êags: 0x%x. ", 
p
->
Êags
); 
	`di•_cﬁ‹_°r
(öfo, 
ãxt_cﬁ‹
);

427 
	`•rötf
(
öfo
, "ªcv‰om: 0x%x. ", 
p
->
ªcv‰om
); 
	`di•_cﬁ‹_°r
(öfo, 
ãxt_cﬁ‹
);

428 
	`•rötf
(
öfo
, "£ndto: 0x%x. ", 
p
->
£ndto
); 
	`di•_cﬁ‹_°r
(öfo, 
ãxt_cﬁ‹
);

429 
	`•rötf
(
öfo
, "ƒ_ây: 0x%x. ", 
p
->
ƒ_ây
); 
	`di•_cﬁ‹_°r
(öfo, 
ãxt_cﬁ‹
);

430 
	`di•_cﬁ‹_°r
("\n", 
ãxt_cﬁ‹
);

431 
	`•rötf
(
öfo
, "has_öt_msg: 0x%x. ", 
p
->
has_öt_msg
); 
	`di•_cﬁ‹_°r
(öfo, 
ãxt_cﬁ‹
);

432 
	}
}

438 
	$dump_msg
(c⁄° * 
tôÀ
, 
MESSAGE
* 
m
)

440 
∑cked
 = 0;

441 
	`¥ötk
("{%s}<0x%x>{%ssrc:%s(%d),%stype:%d,%s(0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x)%s}%s",

442 
tôÀ
,

443 ()
m
,

444 
∑cked
 ? "" : "\n ",

445 
¥oc_èbÀ
[
m
->
sour˚
].
«me
,

446 
m
->
sour˚
,

447 
∑cked
 ? " " : "\n ",

448 
m
->
ty≥
,

449 
∑cked
 ? " " : "\n ",

450 
m
->
u
.
m3
.
m3i1
,

451 
m
->
u
.
m3
.
m3i2
,

452 
m
->
u
.
m3
.
m3i3
,

453 
m
->
u
.
m3
.
m3i4
,

454 ()
m
->
u
.
m3
.
m3p1
,

455 ()
m
->
u
.
m3
.
m3p2
,

456 
∑cked
 ? "" : "\n",

457 
∑cked
 ? "" : "\n"

459 
	}
}

	@kernel/protect.c

1 
	~"p‹t.h
"

2 
	~"ty≥.h
"

3 
	~"c⁄°.h
"

4 
	~"¥Ÿe˘.h
"

5 
	~"ây.h
"

6 
	~"c⁄sﬁe.h
"

7 
	~"°rög.h
"

8 
	~"¥oc.h
"

9 
	~"¥Ÿo.h
"

10 
	~"i8259.h
"

11 
	~"lib/°dio.h
"

14 
TSS
 
	gtss
;

15 
u8
 
	ggdt_±r
[6];

16 
DESCRIPTOR
 
	ggdt
[
GDT_SIZE
];

17 
u8
 
	gidt_±r
[6];

18 
GATE
 
	gidt
[
IDT_SIZE
];

21 
öô_idt_desc
(
ve˘‹
, 
u8
 
desc_ty≥
,

22 
öt_h™dÀr
 
h™dÀr
, 
¥ivûege
);

25 
divide_îr‹
();

26 
sögÀ_°ï_ex˚±i⁄
();

27 
nmi
();

28 
bªakpoöt_ex˚±i⁄
();

29 
ovîÊow
();

30 
bounds_check
();

31 
övÆ_›code
();

32 
c›r_nŸ_avaûabÀ
();

33 
doubÀ_Áu…
();

34 
c›r_£g_ovîrun
();

35 
övÆ_tss
();

36 
£gmít_nŸ_¥e£¡
();

37 
°ack_ex˚±i⁄
();

38 
gíîÆ_¥Ÿe˘i⁄
();

39 
∑ge_Áu…
();

40 
c›r_îr‹
();

41 
hwöt00
();

42 
hwöt01
();

43 
hwöt02
();

44 
hwöt03
();

45 
hwöt04
();

46 
hwöt05
();

47 
hwöt06
();

48 
hwöt07
();

49 
hwöt08
();

50 
hwöt09
();

51 
hwöt10
();

52 
hwöt11
();

53 
hwöt12
();

54 
hwöt13
();

55 
hwöt14
();

56 
hwöt15
();

58 
	$öô_¥Ÿe˘
()

60 
	`öô_8259A
();

61 
	`öô_idt_desc
(
INT_VECTOR_SYS_CALL
,
DA_386IG©e
,

62 
sys_ˇŒ
,
PRIVILEGE_USER
);

64 
	`öô_idt_desc
(
INT_VECTOR_DIVIDE
, 
DA_386IG©e
,

65 
divide_îr‹
, 
PRIVILEGE_KERNEL
);

66 
	`öô_idt_desc
(
INT_VECTOR_DEBUG
, 
DA_386IG©e
,

67 
sögÀ_°ï_ex˚±i⁄
, 
PRIVILEGE_KERNEL
);

68 
	`öô_idt_desc
(
INT_VECTOR_NMI
, 
DA_386IG©e
,

69 
nmi
, 
PRIVILEGE_KERNEL
);

70 
	`öô_idt_desc
(
INT_VECTOR_BREAKPOINT
, 
DA_386IG©e
,

71 
bªakpoöt_ex˚±i⁄
, 
PRIVILEGE_USER
);

72 
	`öô_idt_desc
(
INT_VECTOR_OVERFLOW
, 
DA_386IG©e
,

73 
ovîÊow
, 
PRIVILEGE_USER
);

74 
	`öô_idt_desc
(
INT_VECTOR_BOUNDS
, 
DA_386IG©e
,

75 
bounds_check
, 
PRIVILEGE_KERNEL
);

76 
	`öô_idt_desc
(
INT_VECTOR_INVAL_OP
, 
DA_386IG©e
,

77 
övÆ_›code
, 
PRIVILEGE_KERNEL
);

78 
	`öô_idt_desc
(
INT_VECTOR_COPROC_NOT
, 
DA_386IG©e
,

79 
c›r_nŸ_avaûabÀ
, 
PRIVILEGE_KERNEL
);

80 
	`öô_idt_desc
(
INT_VECTOR_DOUBLE_FAULT
, 
DA_386IG©e
,

81 
doubÀ_Áu…
, 
PRIVILEGE_KERNEL
);

82 
	`öô_idt_desc
(
INT_VECTOR_COPROC_SEG
, 
DA_386IG©e
,

83 
c›r_£g_ovîrun
, 
PRIVILEGE_KERNEL
);

84 
	`öô_idt_desc
(
INT_VECTOR_INVAL_TSS
, 
DA_386IG©e
,

85 
övÆ_tss
, 
PRIVILEGE_KERNEL
);

86 
	`öô_idt_desc
(
INT_VECTOR_SEG_NOT
, 
DA_386IG©e
,

87 
£gmít_nŸ_¥e£¡
, 
PRIVILEGE_KERNEL
);

88 
	`öô_idt_desc
(
INT_VECTOR_STACK_FAULT
, 
DA_386IG©e
,

89 
°ack_ex˚±i⁄
, 
PRIVILEGE_KERNEL
);

90 
	`öô_idt_desc
(
INT_VECTOR_PROTECTION
, 
DA_386IG©e
,

91 
gíîÆ_¥Ÿe˘i⁄
, 
PRIVILEGE_KERNEL
);

92 
	`öô_idt_desc
(
INT_VECTOR_PAGE_FAULT
, 
DA_386IG©e
,

93 
∑ge_Áu…
, 
PRIVILEGE_KERNEL
);

94 
	`öô_idt_desc
(
INT_VECTOR_COPROC_ERR
, 
DA_386IG©e
,

95 
c›r_îr‹
, 
PRIVILEGE_KERNEL
);

97 
	`öô_idt_desc
(
INT_VECTOR_IRQ0
 + 0, 
DA_386IG©e
,

98 
hwöt00
, 
PRIVILEGE_KERNEL
);

99 
	`öô_idt_desc
(
INT_VECTOR_IRQ0
 + 1, 
DA_386IG©e
,

100 
hwöt01
, 
PRIVILEGE_KERNEL
);

101 
	`öô_idt_desc
(
INT_VECTOR_IRQ0
 + 2, 
DA_386IG©e
,

102 
hwöt02
, 
PRIVILEGE_KERNEL
);

103 
	`öô_idt_desc
(
INT_VECTOR_IRQ0
 + 3, 
DA_386IG©e
,

104 
hwöt03
, 
PRIVILEGE_KERNEL
);

105 
	`öô_idt_desc
(
INT_VECTOR_IRQ0
 + 4, 
DA_386IG©e
,

106 
hwöt04
, 
PRIVILEGE_KERNEL
);

107 
	`öô_idt_desc
(
INT_VECTOR_IRQ0
 + 5, 
DA_386IG©e
,

108 
hwöt05
, 
PRIVILEGE_KERNEL
);

109 
	`öô_idt_desc
(
INT_VECTOR_IRQ0
 + 6, 
DA_386IG©e
,

110 
hwöt06
, 
PRIVILEGE_KERNEL
);

111 
	`öô_idt_desc
(
INT_VECTOR_IRQ0
 + 7, 
DA_386IG©e
,

112 
hwöt07
, 
PRIVILEGE_KERNEL
);

113 
	`öô_idt_desc
(
INT_VECTOR_IRQ8
 + 0, 
DA_386IG©e
,

114 
hwöt08
, 
PRIVILEGE_KERNEL
);

115 
	`öô_idt_desc
(
INT_VECTOR_IRQ8
 + 1, 
DA_386IG©e
,

116 
hwöt09
, 
PRIVILEGE_KERNEL
);

117 
	`öô_idt_desc
(
INT_VECTOR_IRQ8
 + 2, 
DA_386IG©e
,

118 
hwöt10
, 
PRIVILEGE_KERNEL
);

119 
	`öô_idt_desc
(
INT_VECTOR_IRQ8
 + 3, 
DA_386IG©e
,

120 
hwöt11
, 
PRIVILEGE_KERNEL
);

121 
	`öô_idt_desc
(
INT_VECTOR_IRQ8
 + 4, 
DA_386IG©e
,

122 
hwöt12
, 
PRIVILEGE_KERNEL
);

123 
	`öô_idt_desc
(
INT_VECTOR_IRQ8
 + 5, 
DA_386IG©e
,

124 
hwöt13
, 
PRIVILEGE_KERNEL
);

125 
	`öô_idt_desc
(
INT_VECTOR_IRQ8
 + 6, 
DA_386IG©e
,

126 
hwöt14
, 
PRIVILEGE_KERNEL
);

127 
	`öô_idt_desc
(
INT_VECTOR_IRQ8
 + 7, 
DA_386IG©e
,

128 
hwöt15
, 
PRIVILEGE_KERNEL
);

130 
i
;

131 
PROCESS
* 
p_¥oc
=
¥oc_èbÀ
;

132 
u16
 
£À˘‹_ldt
=
INDEX_LDT_FIRST
<<3;

133 
i
=0;i<
NR_TASKS
+
NR_PROCS
;i++)

135 
	`mem£t
–
p_¥oc
, 0, (
¥oc
) );

136 
p_¥oc
->
ldt_£l
 = 
£À˘‹_ldt
;

137 
	`öô_des¸ùt‹
(&
gdt
[
£À˘‹_ldt
>>3],

138 
	`vú2phys
(
	`£g2phys
(
SELECTOR_KERNEL_DS
),
¥oc_èbÀ
[
i
].
s_ldts
),

139 
LDT_SIZE
*(
DESCRIPTOR
)-1,
DA_LDT
);

140 
p_¥oc
++;

141 
£À˘‹_ldt
+=1<<3;

143 
	`mem£t
(&
tss
,0,(tss));

144 
tss
.
ss0
=
SELECTOR_KERNEL_DS
;

145 
	`öô_des¸ùt‹
(&
gdt
[
INDEX_TSS
],

146 
	`vú2phys
(
	`£g2phys
(
SELECTOR_KERNEL_DS
),&
tss
),

147 (
tss
)-1,
DA_386TSS
);

148 
tss
.
ioba£
=(tss);

149 
	}
}

152 
u32
 
	$£g2phys
(
u16
 
£g
)

154 
DESCRIPTOR
* 
p_de°
=&
gdt
[
£g
 >> 3];

155  (
p_de°
->
ba£_high
 << 24 |Ö_de°->
ba£_mid
 <<16 |Ö_de°->
ba£_low
);

157 
	}
}

159 
	$öô_idt_desc
(
ve˘‹
, 
u8
 
desc_ty≥
,

160 
öt_h™dÀr
 
h™dÀr
, 
¥ivûege
)

162 
GATE
 * 
p_g©e
 = &
idt
[
ve˘‹
];

163 
u32
 
ba£
 = (u32)
h™dÀr
;

164 
p_g©e
->
off£t_low
 = 
ba£
 & 0xFFFF;

165 
p_g©e
->
£À˘‹
 = 
SELECTOR_KERNEL_CS
;

166 
p_g©e
->
dcou¡
 = 0;

167 
p_g©e
->
©å
 = 
desc_ty≥
 | (
¥ivûege
 << 5);

168 
p_g©e
->
off£t_high
 = (
ba£
 >> 16) & 0xFFFF;

169 
	}
}

171 
	$öô_des¸ùt‹
(
DESCRIPTOR
* 
p_desc
,
u32
 
ba£
,u32 
limô
,
u16
 
©åibuã
)

173 
p_desc
->
limô_low
=
limô
&0x0ffff;

174 
p_desc
->
ba£_low
=
ba£
 & 0x0ffff;

175 
p_desc
->
ba£_mid
=(
ba£
>>16) & 0xff;

176 
p_desc
->
©å1
 =
©åibuã
 & 0xff;

177 
p_desc
->
limô_high_©å2
=((
limô
>>16Ë& 0xfË|((
©åibuã
 >>8) & 0xf0);

178 
p_desc
->
ba£_high
=(
ba£
>>24) & 0xff;

179 
	}
}

181 
	$ex˚±i⁄_h™dÀr
(
vec_no
,
îr_code
,
eù
,
cs
,
eÊags
)

183 
i
;

184 
ãxt_cﬁ‹
 = 0x74;

186 * 
îr_msg
[] = {"#DE Divide Error",

208 
di•_pos
 = 0;

209 
i
=0;i<80*15;i++){

210 
	`di•_°r
(" ");

214 
	`di•_cﬁ‹_°r
("Ex˚±i⁄! --> ", 
ãxt_cﬁ‹
);

215 
	`di•_cﬁ‹_°r
(
îr_msg
[
vec_no
], 
ãxt_cﬁ‹
);

216 
	`di•_cﬁ‹_°r
("\n\n", 
ãxt_cﬁ‹
);

217 
	`di•_cﬁ‹_°r
("EFLAGS:", 
ãxt_cﬁ‹
);

218 
	`¥ötk
–"%x", 
eÊags
 );

219 
	`di•_cﬁ‹_°r
("CS:", 
ãxt_cﬁ‹
);

220 
	`¥ötk
–"%x", 
cs
 );

221 
	`di•_cﬁ‹_°r
("EIP:", 
ãxt_cﬁ‹
);

222 
	`¥ötk
–"%x", 
eù
 );

224 if(
îr_code
 != 0xFFFFFFFF){

225 
	`di•_cﬁ‹_°r
("Eº‹ code:", 
ãxt_cﬁ‹
);

226 
	`¥ötk
–"%x", 
îr_code
 );

228 
	}
}

	@kernel/sched.c

1 
	~"°ddef.h
"

2 
	~"¥oc.h
"

3 
	~"sched.h
"

5 
PROCESS
* 
	gp_¥oc_ªady
;

6 
	$scheduÀ
()

8 
PROCESS
* 
p
;

9 
gª©e°_ticks
=0;

11 !
gª©e°_ticks
)

13 
p
=
¥oc_èbÀ
;p<¥oc_èbÀ+
NR_TASKS
+
NR_PROCS
;p++)

15 if(
p
->
Êags
==0)

17 if(
p
->
ticks
>
gª©e°_ticks
)

19 
gª©e°_ticks
=
p
->
ticks
;

20 
p_¥oc_ªady
=
p
;

24 if(!
gª©e°_ticks
)

26 
p
=
¥oc_èbÀ
;p<¥oc_èbÀ+
NR_TASKS
+
NR_PROCS
;p++)

27 if(
p
->
Êags
==0)

28 
p
->
ticks
ı->
¥i‹ôy
;

31 
	}
}

33 
	$¶ìp_⁄
–
¥oc
 **
p
 )

35 
¥oc
 *
tmp
;

37 if–!
p
 )

40 
tmp
 = *
p
;

41 *
p
 = 
cuºít_¥oc
;

42 
cuºít_¥oc
->
Êags
 = 
SLEEP
;

43 
	`scheduÀ
();

44 if–
tmp
 )

45 
tmp
->
Êags
 = 0;

46 
	}
}

48 
	$wake_up
–
¥oc
 **
p
 )

50 if–
p
 && *p )

52 (**
p
).
Êags
 = 0 ;

53 
p
 = 
NULL
;

55 
	}
}

	@kernel/start.c

1 
	~"ty≥.h
"

2 
	~"c⁄°.h
"

3 
	~"¥Ÿe˘.h
"

4 
	~"°rög.h
"

5 
di•_°r
(*);

7 
	$c°¨t
()

9 
	`di•_°r
("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n------cstart------\n");

10 
	`mem˝y
(&
gdt
,(*)(*((
u32
*)(&
gdt_±r
[2]))),*((
u16
*)(&gdt_ptr[0]))+1);

11 
u16
* 
p_gdt_limô
=(u16*)(&
gdt_±r
[0]);

12 
u32
* 
p_gdt_ba£
 = (u32*)(&
gdt_±r
[2]);

13 *
p_gdt_limô
 = 
GDT_SIZE
 * (
DESCRIPTOR
) -1;

14 *
p_gdt_ba£
 = (
u32
Ë&
gdt
;

16 
u16
* 
p_idt_limô
=(u16*)(&
idt_±r
[0]);

17 
u32
* 
p_idt_ba£
=(u32*)(&
idt_±r
[2]);

18 *
p_idt_limô
 = 
IDT_SIZE
 *(
GATE
) -1;

19 *
p_idt_ba£
(
u32
)&
idt
;

21 
	`öô_¥Ÿe˘
();

23 
	`di•_°r
("-------cstartÉnds------\n");

24 
	}
}

	@kernel/systask.c

1 
	~"p‹t.h
"

2 
	~"ty≥.h
"

3 
	~"c⁄°.h
"

4 
	~"¥Ÿe˘.h
"

5 
	~"ây.h
"

6 
	~"c⁄sﬁe.h
"

7 
	~"°rög.h
"

8 
	~"¥oc.h
"

9 
	~"¥Ÿo.h
"

10 
	~"time.h
"

11 
	~"î∫o.h
"

12 
	~"lib/°dio.h
"

14 
	$èsk_sys
()

16 
	`¥ötk
("task_sys begin\n");

17 
MESSAGE
 
msg
;

20 
	`£nd_ªcv
(
RECEIVE
,
ANY
,&
msg
);

21 
§c
=
msg
.
sour˚
;

22 
msg
.
ty≥
)

24 
GET_TICKS
:

25 
msg
.
RETVAL
=
ticks
;

26 
	`£nd_ªcv
(
SEND
,
§c
,&
msg
);

28 
GET_PID
:

29 
msg
.
ty≥
 = 
SYSCALL_RET
;

30 
msg
.
PID
 = 
§c
;

31 
	`£nd_ªcv
–
SEND
, 
§c
, &
msg
 );

34 
	`∑nic
("unknown msgÅype");

38 
	}
}

	@kernel/time.c

1 
	~"p‹t.h
"

2 
	~"ty≥.h
"

3 
	~"c⁄°.h
"

4 
	~"¥Ÿe˘.h
"

5 
	~"ây.h
"

6 
	~"c⁄sﬁe.h
"

7 
	~"°rög.h
"

8 
	~"¥oc.h
"

9 
	~"¥Ÿo.h
"

10 
	~"time.h
"

11 
	~"sched.h
"

12 
	~"i8259.h
"

13 
	~"ây.h
"

15 
	gticks
 = 0;

16 
	$˛ock_h™dÀr
(
úq
)

18 
ticks
++;

19 if–
ticks
 >
MAX_TICKS
 )

20 
ticks
 = 0;

21 if–
p_¥oc_ªady
->
ticks
)

22 
p_¥oc_ªady
->
ticks
--;

23 if–
key_¥es£d
 )

24 
	`öf‹m_öt
–
TASK_TTY
 );

25 if(
k_ªíãr
!=0)

29 
	`scheduÀ
();

30 
	}
}

32 
	$mûli_dñay
(
mûli_£c
)

34 
t
=
	`gë_ticks
();

35 ((
	`gë_ticks
()-
t
Ë*1000 /
HZ
Ë< 
mûli_£c
){}

36 
	}
}

38 
	$öô_˛ock
()

41 
	`out_byã
(
TIMER_MODE_REG
,
RATE_GENERATOR
);

42 
	`out_byã
(
TIMER0_REG
,(
u8
Ë(
TIMER_FREG
/
HZ
));

43 
	`out_byã
(
TIMER0_REG
,(
u8
)((
TIMER_FREG
/
HZ
)>>8));

45 
	`put_úq_h™dÀr
(
CLOCK_IRQ
,
˛ock_h™dÀr
);

46 
	`íabÀ_úq
(
CLOCK_IRQ
);

47 
	}
}

49 
	$gë_ticks
()

51 
MESSAGE
 
msg
;

52 
	`ª£t_msg
(&
msg
);

53 
msg
.
ty≥
 = 
GET_TICKS
;

54 
	`£nd_ªcv
(
BOTH
,
TASK_SYS
,&
msg
);

55  
msg
.
RETVAL
;

56 
	}
}

	@kernel/tty.c

1 
	~"p‹t.h
"

2 
	~"ty≥.h
"

3 
	~"c⁄°.h
"

4 
	~"¥Ÿe˘.h
"

5 
	~"ây.h
"

6 
	~"c⁄sﬁe.h
"

7 
	~"°rög.h
"

8 
	~"¥oc.h
"

9 
	~"¥Ÿo.h
"

10 
	~"keybﬂrd.h
"

11 
	~"sched.h
"

13 
öô_ây
(
TTY
* 
p_ây
);

14 
put_key
(
TTY
* 
ây
,
u32
 
key
);

15 
ây_dev_ªad
(
TTY
* 
p_ây
);

16 
ây_dev_wrôe
(
TTY
* 
p_ây
);

17 
ây_do_ªad
–
TTY
 *
p_ây
, 
MESSAGE
 *
msg
 );

18 
ây_do_wrôe
–
TTY
 *
p_ây
, 
MESSAGE
 *
msg
 );

19 
	gkey_¥es£d
 = 0;

21 
TTY
 
	gây_èbÀ
[
NR_CONSOLES
];

23 
	$èsk_ây
()

25 
TTY
* 
p_ây
;

26 
MESSAGE
 
msg
;

27 
	`öô_keybﬂrd
();

29 
p_ây
=
ây_èbÀ
;p_ây<ây_èbÀ+
NR_CONSOLES
;p_tty++)

31 
	`öô_ây
(
p_ây
);

33 
	`£À˘_c⁄sﬁe
(0);

36 
p_ây
=
ây_èbÀ
;p_ây<ây_èbÀ+
NR_CONSOLES
;p_tty++)

38 
	`ây_dev_ªad
(
p_ây
);

39 
	`ây_dev_wrôe
(
p_ây
);

42 
	`£nd_ªcv
–
RECEIVE
, 
ANY
, &
msg
 );

43 
§c
 = 
msg
.
sour˚
;

44 
	`as£π
–
§c
 !
TASK_TTY
 );

45 
TTY
 *
±ty
 = 
ây_èbÀ
 + 
msg
.
DEVICE
 ;

46 
msg
.
ty≥
)

48 
DEV_OPEN
:

49 
	`ª£t_msg
(&
msg
);

50 
msg
.
ty≥
 = 
SYSCALL_RET
;

51 
	`£nd_ªcv
–
SEND
,
§c
, &
msg
 );

53 
DEV_READ
:

54 
	`ây_do_ªad
–
±ty
, &
msg
 );

56 
DEV_WRITE
:

57 
	`ây_do_wrôe
–
±ty
, &
msg
 );

59 
HARD_INT
:

60 
key_¥es£d
 = 0;

63 
	`dump_msg
("TTY:unknow¿msg", &
msg
 );

67 
	}
}

69 
	$öô_ây
(
TTY
* 
p_ây
)

71 
p_ây
->
öbuf_cou¡
=0;

72 
p_ây
->
p_öbuf_hód
ı_ây->
p_öbuf_èû
ı_ây->
ö_buf
;

73 
	`öô_s¸ìn
(
p_ây
);

74 
	}
}

76 
	$ây_dev_ªad
(
TTY
* 
p_ây
)

78 if(
	`is_cuºít_c⁄sﬁe
(
p_ây
->
p_c⁄sﬁe
))

80 
	`keybﬂrd_ªad
(
p_ây
);

82 
	}
}

84 
	$ây_dev_wrôe
(
TTY
* 
p_ây
)

86 
p_ây
->
öbuf_cou¡
>0)

88 
ch
=*(
p_ây
->
p_öbuf_èû
++);

89 if(
p_ây
->
p_öbuf_èû
 =p_ây->
ö_buf
+
TTY_IN_BYTES
)

91 
p_ây
->
p_öbuf_èû
ı_ây->
ö_buf
;

93 
p_ây
->
öbuf_cou¡
--;

94 if–
p_ây
->
ây_À·_˙t
)

96 if–
ch
 >= ' ' && ch <= '~' )

98 
	`out_ch¨
(
p_ây
->
p_c⁄sﬁe
,
ch
);

99 *
p
 = 
p_ây
->
ây_ªq_buf
 +Ö_ây->
ây_å™s_˙t
;

100 
	`mem˝y
–
p
, (*)
	`va2œ
(
TASK_TTY
,&
ch
), 1 );

101 
p_ây
->
ây_å™s_˙t
 ++;

102 
p_ây
->
ây_À·_˙t
 --;

104 if–
ch
 ='\b' && 
p_ây
->
ây_å™s_˙t
 )

106 
	`out_ch¨
–
p_ây
->
p_c⁄sﬁe
, 
ch
 );

107 
p_ây
->
ây_å™s_˙t
 --;

108 
p_ây
->
ây_À·_˙t
 ++;

110 if–
ch
 ='\n' || 
p_ây
->
ây_À·_˙t
 == 0 )

112 
	`out_ch¨
–
p_ây
->
p_c⁄sﬁe
, '\n' );

113 
MESSAGE
 
msg
;

114 
msg
.
ty≥
 = 
RESUME_PROC
;

115 
msg
.
PROC_NR
 = 
p_ây
->
ây_¥o˙r
;

116 
msg
.
CNT
 = 
p_ây
->
ây_å™s_˙t
;

117 
	`£nd_ªcv
–
SEND
, 
p_ây
->
ây_ˇŒî
, &
msg
 );

118 
p_ây
->
ây_À·_˙t
 = 0;

122 
	}
}

124 
	$ây_do_ªad
–
TTY
 *
p_ây
, 
MESSAGE
 *
msg
 )

126 
p_ây
->
ây_ˇŒî
 = 
msg
->
sour˚
;

127 
p_ây
->
ây_¥o˙r
 = 
msg
->
PROC_NR
;

128 
p_ây
->
ây_ªq_buf
 = 
	`va2œ
–p_ây->
ây_¥o˙r
, 
msg
->
BUF
 );

129 
p_ây
->
ây_À·_˙t
 = 
msg
->
CNT
;

130 
p_ây
->
ây_å™s_˙t
 = 0;

131 
msg
->
ty≥
 = 
SUSPEND_PROC
;

132 
msg
->
CNT
 = 
p_ây
->
ây_À·_˙t
;

133 
	`£nd_ªcv
–
SEND
, 
p_ây
->
ây_ˇŒî
, 
msg
 );

134 
	}
}

136 
	$ây_do_wrôe
–
TTY
 *
p_ây
, 
MESSAGE
 *
msg
 )

138 
buf
[
TTY_OUT_BUF_LEN
];

139 *
p
 = (*)
	`va2œ
–
msg
->
PROC_NR
, msg->
BUF
 );

140 
i
 = 
msg
->
CNT
;

141 
j
;

142 
i
)

144 
byãs
 = 
	`MIN
–
TTY_OUT_BUF_LEN
, 
i
 );

145 
	`mem˝y
–
	`va2œ
–
TASK_TTY
, 
buf
), (*)
p
, 
byãs
 );

146  
j
=0; j<
byãs
; j++ )

147 
	`out_ch¨
–
p_ây
->
p_c⁄sﬁe
, 
buf
[
j
] );

148 
i
 -
byãs
;

149 
p
 +
byãs
;

151 
msg
->
ty≥
 = 
SYSCALL_RET
;

152 
	`£nd_ªcv
–
SEND
, 
msg
->
sour˚
, msg );

153 
	}
}

167 
	$put_key
(
TTY
* 
p_ây
,
u32
 
key
)

169 if(
p_ây
->
öbuf_cou¡
<
TTY_IN_BYTES
)

171 *(
p_ây
->
p_öbuf_hód
++)=
key
;

172 if(
p_ây
->
p_öbuf_hód
=ı_ây->
ö_buf
+
TTY_IN_BYTES
)

174 
p_ây
->
p_öbuf_hód
ı_ây->
ö_buf
;

176 
p_ây
->
öbuf_cou¡
++;

178 
	}
}

180 
	$ö_¥o˚ss
(
TTY
* 
p_ây
,
u32
 
key
)

182 if(!(
key
 & 
FLAG_EXT
))

184 
	`put_key
(
p_ây
,
key
);

188 
øw_code
=
key
& 
MASK_RAW
;

189 
øw_code
)

191 
ENTER
:

192 
	`put_key
(
p_ây
,'\n');

194 
BACKSPACE
:

195 
	`put_key
(
p_ây
,'\b');

197 
UP
:

198 if((
key
 & 
FLAG_SHIFT_L
Ë|| (key& 
FLAG_SHIFT_R
))

200 
	`s¸ﬁl_s¸ìn
(
p_ây
->
p_c⁄sﬁe
,
SCR_UP
);

203 
DOWN
:

204 if((
key
 & 
FLAG_SHIFT_L
Ë|| (key& 
FLAG_SHIFT_R
))

206 
	`s¸ﬁl_s¸ìn
(
p_ây
->
p_c⁄sﬁe
,
SCR_DN
);

209 
F1
:

210 
F2
:

211 
F3
:

212 
F4
:

213 
F5
:

214 
F6
:

215 
F7
:

216 if((
key
 & 
FLAG_ALT_L
Ë|| (key & 
FLAG_ALT_R
))

218 
	`£À˘_c⁄sﬁe
(
øw_code
-
F1
);

223 
	}
}

225 
	$sys_¥ötx
(
_unsued1
,
_unu£d2
,*
s
,
¥oc
 *
p_¥oc
)

227 c⁄° *
p
;

228 
ch
;

229 
ªíãr_îr
[]=" k_reenter is incorrrect for unknownÑeason";

230 
ªíãr_îr
[0]=
MAG_CH_PANIC
;

232 if(
k_ªíãr
==0)

233 
p
=
	`va2œ
(
	`¥oc2pid
(
p_¥oc
),
s
);

234 if(
k_ªíãr
>0)

235 
p
=
s
;

237 
p
=
ªíãr_îr
;

239 if((*
p
==
MAG_CH_PANIC
) ||

240 (*
p
==
MAG_CH_ASSERT
 && 
p_¥oc_ªady
<&
¥oc_èbÀ
[
NR_TASKS
]))

242 
	`dißbÀ_öt
();

243 *
v
=(*)
V_MEM_BASE
;

244 c⁄° * 
q
=
p
+1;

245 (()
v
-
V_MEM_BASE
Ë<(
SCREEN_WIDTH
*26))

247 
v
++;

248 *
v
++=
GRAY_CHAR
;

250 
v
<(*)(
V_MEM_BASE
+
V_MEM_SIZE
Ë&& (*
q
 != '\0') )

252 *
v
++=*
q
++;

253 *
v
++=
RED_CHAR
;

255 
__asm__
 
	`__vﬁ©ûe__
("hlt");

257 (
ch
=*
p
++)!=0)

259 if(
ch
=
MAG_CH_PANIC
 || ch=
MAG_CH_ASSERT
)

263 
	`out_ch¨
(
ây_èbÀ
[
p_¥oc
->
ƒ_ây
].
p_c⁄sﬁe
,
ch
);

266 
	}
}

	@lib/cat.c

1 
	~"fs.h
"

2 
	~"lib/f˙é.h
"

	@lib/close.c

1 
	~"fs.h
"

3 
	$˛o£
(
fd
)

5 
MESSAGE
 
msg
;

6 
msg
.
ty≥
 = 
CLOSE
;

7 
msg
.
FD
 = 
fd
;

9 
	`£nd_ªcv
(
BOTH
, 
TASK_FS
, &
msg
);

11  
msg
.
RETVAL
;

12 
	}
}

	@lib/ctype.c

7 
	~<˘y≥.h
>

9 
	g_˘mp
;

10 
	g_˘y≥
[] = {0x00,

11 
_C
,_C,_C,_C,_C,_C,_C,_C,

12 
_C
,_C|
_S
,_C|_S,_C|_S,_C|_S,_C|_S,_C,_C,

13 
_C
,_C,_C,_C,_C,_C,_C,_C,

14 
_C
,_C,_C,_C,_C,_C,_C,_C,

15 
_S
|
_SP
,
_P
,_P,_P,_P,_P,_P,_P,

16 
_P
,_P,_P,_P,_P,_P,_P,_P,

17 
_D
,_D,_D,_D,_D,_D,_D,_D,

18 
_D
,_D,
_P
,_P,_P,_P,_P,_P,

19 
_P
,
_U
|
_X
,_U|_X,_U|_X,_U|_X,_U|_X,_U|_X,_U,

20 
_U
,_U,_U,_U,_U,_U,_U,_U,

21 
_U
,_U,_U,_U,_U,_U,_U,_U,

22 
_U
,_U,_U,
_P
,_P,_P,_P,_P,

23 
_P
,
_L
|
_X
,_L|_X,_L|_X,_L|_X,_L|_X,_L|_X,_L,

24 
_L
,_L,_L,_L,_L,_L,_L,_L,

25 
_L
,_L,_L,_L,_L,_L,_L,_L,

26 
_L
,_L,_L,
_P
,_P,_P,_P,
_C
,

	@lib/exec.c

1 
	~"fs.h
"

2 
	~"°d¨g.h
"

4 
	$exe˛
–c⁄° *
∑th
, c⁄° *
¨g
, ... )

6 
va_li°
 
∑rg
 = (va_li°)(&
¨g
);

7 **
p
 = (**)
∑rg
;

8  
	`execv
–
∑th
, 
p
 );

9 
	}
}

11 
	$execv
–c⁄° *
∑th
, *
¨gv
[] )

13 **
p
 = 
¨gv
;

14 
¨g_°ack
[
PROC_STACK
]={0};

15 
°ack_Àn
 = 0;

16 
	`¥ötf
("%d.",
°ack_Àn
);

18  *
p
++ )

20 
	`as£π
–
°ack_Àn
 + 2*(*Ë< 
PROC_STACK
 );

21 
°ack_Àn
 += (*);

24 *((*)(
¨g_°ack
 + 
°ack_Àn
)) = 0;

25 
°ack_Àn
 += (*);

27 **
q
(**)
¨g_°ack
;

28  
p
=
¨gv
; *p!=0;Ö++ )

30 *
q
++ = 
¨g_°ack
+
°ack_Àn
;

31 
	`as£π
–
°ack_Àn
 + 
	`°æí
(*
p
Ë+ 1 < 
PROC_STACK
 );

32 
	`°r˝y
–
¨g_°ack
 + 
°ack_Àn
, *
p
 );

33 
°ack_Àn
 +
	`°æí
–*
p
 );

34 
¨g_°ack
[
°ack_Àn
] = 0;

35 
°ack_Àn
++ ;

38 
MESSAGE
 
msg
;

39 
msg
.
ty≥
 = 
EXEC
;

40 
msg
.
PATHNAME
 = (*)
∑th
;

41 
msg
.
NAME_LEN
 = 
	`°æí
(
∑th
);

42 
msg
.
BUF
 = (*)
¨g_°ack
;

43 
msg
.
BUF_LEN
 = 
°ack_Àn
;

45 
	`£nd_ªcv
–
BOTH
, 
TASK_MM
, &
msg
 );

46 
	`as£π
–
msg
.
ty≥
 =
SYSCALL_RET
 );

48  
msg
.
RETVAL
;

49 
	}
}

	@lib/exit.c

1 
	~"fs.h
"

3 
	$exô
(
°©us
)

5 
MESSAGE
 
msg
;

6 
msg
.
ty≥
 = 
EXIT
;

7 
msg
.
STATUS
 = 
°©us
;

9 
	`£nd_ªcv
(
BOTH
, 
TASK_MM
, &
msg
);

10 
	`as£π
(
msg
.
ty≥
 =
SYSCALL_RET
);

11 
	}
}

	@lib/fork.c

1 
	~"fs.h
"

3 
	$f‹k
()

5 
MESSAGE
 
msg
;

6 
msg
.
ty≥
 = 
FORK
;

8 
	`£nd_ªcv
–
BOTH
, 
TASK_MM
, &
msg
 );

9 
	`as£π
(
msg
.
ty≥
 =
SYSCALL_RET
);

10 
	`as£π
(
msg
.
RETVAL
 == 0);

12  
msg
.
PID
;

13 
	}
}

	@lib/getpid.c

2 
	~"fs.h
"

4 
	$gëpid
()

6 
MESSAGE
 
msg
;

7 
msg
.
ty≥
 = 
GET_PID
;

9 
	`£nd_ªcv
(
BOTH
, 
TASK_SYS
, &
msg
);

10 
	`as£π
(
msg
.
ty≥
 =
SYSCALL_RET
);

12  
msg
.
PID
;

13 
	}
}

	@lib/kliba.s

1 .
	gd©a


2 .
di•_pos


4 .
ãxt


5 .
globÆ
 
di•_°r
, 
out_byã
 ,
ö_byã
,
di•_cﬁ‹_°r
,
di•_Æ
,
íabÀ_úq
,
dißbÀ_úq
,
dißbÀ_öt
,
íabÀ_öt


6 .
globÆ
 
p‹t_ªad
, 
p‹t_wrôe


8 
dißbÀ_öt
:

9 
˛i


10 
ªt


11 
íabÀ_öt
:

12 
°i


13 
ªt


15 
di•_Æ
:

16 
push
 %
ecx


17 
push
 %
edx


18 
push
 %
edi


20 
mov
 (
di•_pos
),%
edi


21 
mov
 
$0x0f
,%
ah


22 
mov
 %
Æ
,%
dl


23 
shr
 
$4
,%
Æ


24 
mov
 
$2
,%
ecx


25 .
begö
:

26 
™d
 
$0b01111
,%
Æ


27 
cmp
 
$9
,%
Æ


28 
ja
 
b1


29 
add
 
$
'0',%
Æ


30 
jmp
 
b2


31 
b1
:

32 
sub
 
$0x0a
,%
Æ


33 
add
 
$
'A',%
Æ


34 
b2
:

35 
mov
 %
ax
,%
gs
:(%
edi
)

36 
add
 
$2
,%
edi


37 
mov
 %
dl
,%
Æ


38 
lo›
 .
begö


40 
mov
 %
edi
,(
di•_pos
)

42 
p›
 %
edi


43 
p›
 %
edx


44 
p›
 %
ecx


45 
ªt


47 
di•_öt
:

48 
mov
 4(%
e•
),%
óx


49 
shr
 
$24
,%
óx


50 
ˇŒ
 
di•_Æ


52 
mov
 4(%
e•
),%
óx


53 
shr
 
$16
,%
óx


54 
ˇŒ
 
di•_Æ


56 
mov
 4(%
e•
),%
óx


57 
shr
 
$8
,%
óx


58 
ˇŒ
 
di•_Æ


60 
mov
 4(%
e•
),%
óx


61 
ˇŒ
 
di•_Æ


63 
mov
 
$0x07
,%
ah


64 
mov
 
$
'h',%
Æ


65 
push
 %
edi


66 
mov
 (
di•_pos
),%
edi


67 
mov
 %
ax
,%
gs
:(%
edi
)

68 
add
 
$4
,%
edi


69 
mov
 %
edi
,(
di•_pos
)

70 
p›
 %
edi


72 
ªt


76 
di•_°r
:

77 
push
 %
ebp


78 
mov
 %
e•
,%
ebp


80 
mov
 8(%
ebp
),%
esi


81 
mov
 (
di•_pos
),%
edi


82 
mov
 
$0x0f
,%
ah


83 .
ds1
:

84 
lodsb


85 
ã°
 %
Æ
,%al

86 
jz
 .
ds2


87 
cmp
 
$0xa
,%
Æ


88 
jnz
 .
ds3


89 
push
 %
óx


90 
mov
 %
edi
,%
óx


91 
mov
 
$160
,%
bl


92 
div
 %
bl


93 
™d
 
$0xff
,%
óx


94 
öc
 %
óx


95 
mov
 
$160
,%
bl


96 
mul
 %
bl


97 
mov
 %
óx
,%
edi


98 
p›
 %
óx


99 
jmp
 .
ds1


100 .
ds3
:

101 
mov
 %
ax
,%
gs
:(%
edi
)

102 
add
 
$2
,%
edi


103 
jmp
 .
ds1


104 .
ds2
:

105 
mov
 %
edi
,(
di•_pos
)

107 
p›
 %
ebp


108 
ªt


110 
di•_cﬁ‹_°r
:

111 
push
 %
ebp


112 
mov
 %
e•
,%
ebp


114 
mov
 8(%
ebp
),%
esi


115 
mov
 (
di•_pos
),%
edi


116 
mov
 12(%
ebp
),%
ah


117 .
dc1
:

118 
lodsb


119 
ã°
 %
Æ
,%al

120 
jz
 .
dc2


121 
cmp
 
$0x0a
,%
Æ


122 
jnz
 .
dc3


123 
push
 %
óx


124 
mov
 %
edi
,%
óx


125 
mov
 
$160
,%
bl


126 
div
 %
bl


127 
™d
 
$0x0ff
,%
óx


128 
öc
 %
óx


129 
mov
 
$160
,%
bl


130 
mul
 %
bl


131 
mov
 %
óx
,%
edi


132 
p›
 %
óx


133 
jmp
 .
dc1


134 .
dc3
:

135 
mov
 %
ax
,%
gs
:(%
edi
)

136 
add
 
$2
,%
edi


137 
jmp
 .
dc1


138 .
dc2
:

139 
mov
 %
edi
,(
di•_pos
)

141 
p›
 %
ebp


142 
ªt


145 
out_byã
:

146 
mov
 4(%
e•
),%
edx


147 
mov
 8(%
e•
),%
Æ


148 
out
 %
Æ
,%
dx


149 
n›


150 
n›


151 
ªt


154 
ö_byã
:

155 
mov
 4(%
e•
),%
edx


156 
x‹
 %
óx
,%eax

157 
ö
 %
dx
,%
Æ


158 
n›


159 
n›


160 
ªt


163 
dißbÀ_úq
:

164 
mov
 4(%
e•
),%
ecx


165 
pushf


166 
˛i


167 
mov
 
$1
,%
ah


168 
rﬁ
 %
˛
,%
ah


169 
cmp
 
$8
,%
˛


170 
j´
 
dißbÀ_8


171 
dißbÀ_0
:

172 
ö
 
$0x21
,%
Æ


173 
ã°
 %
ah
,%
Æ


174 
jnz
 
dis_Æªady


175 
‹
 %
ah
,%
Æ


176 
out
 %
Æ
,
$0x21


177 
p›f


178 
mov
 
$1
,%
óx


179 
ªt


180 
dißbÀ_8
:

181 
ö
 
$0xa1
,%
Æ


182 
ã°
 %
ah
,%
Æ


183 
jnz
 
dis_Æªady


184 
‹
 %
ah
,%
Æ


185 
out
 %
Æ
,
$0xa1


186 
p›f


187 
mov
 
$1
,%
óx


188 
ªt


189 
dis_Æªady
:

190 
p›f


191 
x‹
 %
óx
,%eax

192 
ªt


195 
íabÀ_úq
:

196 
mov
 4(%
e•
),%
ecx


197 
pushf


198 
˛i


199 
mov
 
$
~1,%
ah


200 
rﬁ
 %
˛
,%
ah


201 
cmp
 
$8
,%
˛


202 
j´
 
íabÀ_8


203 
íabÀ_0
:

204 
ö
 
$0x21
,%
Æ


205 
™d
 %
ah
,%
Æ


206 
out
 %
Æ
,
$0x21


207 
p›f


208 
ªt


209 
íabÀ_8
:

210 
ö
 
$0xa1
,%
Æ


211 
™d
 %
ah
,%
Æ


212 
out
 %
Æ
,
$0xa1


213 
p›f


214 
ªt


217 
p‹t_ªad
:

218 
mov
 4(%
e•
), %
edx


219 
mov
 8(%
e•
), %
edi


220 
mov
 12(%
e•
), %
ecx


221 
shr
 
$1
, %
ecx


222 
˛d


223 
ªp
 
ösw


224 
ªt


226 
p‹t_wrôe
:

227 
mov
 4(%
e•
), %
edx


228 
mov
 8(%
e•
), %
esi


229 
mov
 12(%
e•
), %
ecx


230 
shr
 
$1
, %
ecx


231 
˛d


232 
ªp
 
outsw


233 
ªt


	@lib/misc.c

1 
	~"p‹t.h
"

2 
	~"ty≥.h
"

3 
	~"c⁄°.h
"

4 
	~"¥Ÿe˘.h
"

5 
	~"ây.h
"

6 
	~"c⁄sﬁe.h
"

7 
	~"°rög.h
"

8 
	~"¥oc.h
"

9 
	~"¥Ÿo.h
"

10 
	~"lib/°dio.h
"

12 
	$•ö
(*
func_«me
)

14 
	`¥ötk
("\n•önög i¿%†...\n",
func_«me
);

17 
	}
}

19 
	$as£πi⁄_Áûuª
(*
exp
,*
fûe
,*
ba£_fûe
,
löe
)

21 
	`¥ötk
("%¯ás£π(%sËÁûed: fûe: %s, ba£_fûe: %s, i¿%d",
MAG_CH_ASSERT
,
exp
,
fûe
,
ba£_fûe
,
löe
);

22 
	`•ö
("assertion_failure()");

24 
	}
}

26 
	$∑nic
(c⁄° *
fmt
,...)

28 
i
;

29 
buf
[256];

30 
va_li°
 
¨g
=(va_li°)((*)&
fmt
+4);

31 
i
 = 
	`v•rötf
(
buf
,
fmt
,
¨g
);

32 
	`¥ötk
("%¯∑ni¯%s:%d",
MAG_CH_PANIC
,
buf
,
i
);

33 
	}
}

35 
	$£nd_ªcv
(
fun˘i⁄
,
§c_de°
,
MESSAGE
 *
msg
)

37 
ªt
=0;

38 if(
fun˘i⁄
==
RECEIVE
)

39 
	`mem£t
(
msg
,0,(
MESSAGE
));

40 
fun˘i⁄
)

42 
BOTH
:

43 
ªt
=
	`£ndªc
(
SEND
,
§c_de°
,
msg
);

44 if(
ªt
==0)

45 
ªt
=
	`£ndªc
(
RECEIVE
,
§c_de°
,
msg
);

47 
SEND
:

48 
RECEIVE
:

49 
ªt
 = 
	`£ndªc
(
fun˘i⁄
,
§c_de°
,
msg
);

52 
	`as£π
((
fun˘i⁄
==
BOTH
) ||

53 (
fun˘i⁄
=
SEND
) ||

54 (
fun˘i⁄
 =
RECEIVE
));

57  
ªt
;

58 
	}
}

	@lib/open.c

1 
	~"ty≥.h
"

2 
	~"fs.h
"

3 
	~"°rög.h
"

5 
	$›í
–c⁄° *
∑th«me
, 
Êags
 )

7 
MESSAGE
 
msg
;

9 
msg
.
ty≥
 = 
OPEN
;

10 
msg
.
PATHNAME
 = (*)
∑th«me
;

11 
msg
.
FLAGS
 = 
Êags
;

12 
msg
.
NAME_LEN
 = 
	`°æí
(
∑th«me
);

14 
	`£nd_ªcv
–
BOTH
, 
TASK_FS
, &
msg
 );

16  
msg
.
FD
;

17 
	}
}

	@lib/printf.c

1 
	~"fs.h
"

2 
	~"¥Ÿo.h
"

5 
	$¥ötf
–c⁄° *
fmt
, ... )

7 
i
;

8 
buf
[256];

10 
va_li°
 
¨g
 = (va_li°)((*)(&
fmt
) + 4);

11 
i
 = 
	`v•rötf
–
buf
, 
fmt
, 
¨g
 );

12 
buf
[
i
] = 0;

14 
c
 = 
	`wrôe
–1, 
buf
, 
i
 );

15 
	`as£π
–
c
 =
i
 );

17  
i
;

18 
	}
}

20 
	$¥ötk
(c⁄° *
fmt
, ...)

22 
i
;

23 
buf
[256];

24 
va_li°
 
¨g
=(va_li°)((* )(&
fmt
)+4);

25 
i
=
	`v•rötf
(
buf
,
fmt
,
¨g
);

26 
buf
[
i
]=0;

27 
	`¥ötx
(
buf
);

28  
i
;

29 
	}
}

	@lib/read.c

1 
	~"fs.h
"

3 
	$ªad
(
fd
, *
buf
, 
cou¡
 )

5 
MESSAGE
 
msg
;

6 
msg
.
ty≥
 = 
READ
;

7 
msg
.
FD
 = 
fd
;

8 
msg
.
BUF
 = (*)
buf
;

9 
msg
.
CNT
 = 
cou¡
;

11 
	`£nd_ªcv
–
BOTH
, 
TASK_FS
, &
msg
 );

12  
msg
.
CNT
;

13 
	}
}

	@lib/string.c

1 

	)

2 
	#ölöe


	)

4 
	~"°rög.h
"

	@lib/syscall.S

1 
	~"sc⁄°.h
"

3 .
£t
 
	g_NR_¥ötx
,0

4 .
£t
 
	g_NR_£ndªc
,1

5 .
£t
 
	gINT_VECTOR_SYS_CALL
,0x90

7 .
globÆ
 
	g¥ötx
,
£ndªc


9 
	g¥ötx
:

10 
mov
 
$_NR_¥ötx
,%
óx


11 
	gmov
 4(%
	ge•
),%
edx


12 
$INT_VECTOR_SYS_CALL


13 
ªt


15 
	g£ndªc
:

16 
mov
 
$_NR_£ndªc
,%
óx


17 
	gmov
 4(%
	ge•
),%
ebx


18 
	gmov
 8(%
	ge•
),%
ecx


19 
	gmov
 12(%
	ge•
),%
edx


20 
$INT_VECTOR_SYS_CALL


21 
	gªt


	@lib/vsprintf.c

1 
	~"ty≥.h
"

2 
	~"°d¨g.h
"

3 
	~"c⁄°.h
"

4 
	~"°rög.h
"

6 *
	$i2a
(
vÆ
,
ba£
,**
ps
)

8 
m
=
vÆ
 %
ba£
;

9 
q
=
vÆ
/
ba£
;

10 if(
q
)

12 
	`i2a
(
q
,
ba£
,
ps
);

14 *(*
ps
)++=(
m
<10)? (m+'0'): (m-10+'A');

15  *
ps
;

16 
	}
}

19 
	$v•rötf
(* 
buf
,c⁄° * 
fmt
,
va_li°
 
¨gs
)

21 * 
p
;

22 
va_li°
 
p_√xt_¨g
=
¨gs
;

23 
m
;

24 
ö√r_buf
[
STR_DEFAULT_LEN
];

25 
cs
;

26 
Æign_ƒ
;

27 
p
=
buf
;*
fmt
;fmt++)

29 if(*
fmt
 != '%')

31 *
p
++=*
fmt
;

36 
Æign_ƒ
=0;

38 
fmt
++;

39 if(*
fmt
 =='%')

41 *
p
++=*
fmt
;

44 if(*
fmt
=='0')

46 
cs
='0';

47 
fmt
++;

51 
cs
=' ';

53 (()(*
fmt
)>='0') &&

54 (()(*
fmt
)<='9'))

56 
Æign_ƒ
*=10;

57 
Æign_ƒ
+=*
fmt
-'0';

58 
fmt
++;

60 *
q
=
ö√r_buf
;

61 
	`mem£t
(
q
,0,(
ö√r_buf
));

63 *
fmt
)

66 *
q
++=*((*)
p_√xt_¨g
);

67 
p_√xt_¨g
+=4;

70 
m
=*((*)
p_√xt_¨g
);

71 
	`i2a
(
m
,16,&
q
);

72 
p_√xt_¨g
+=4;

75 
m
=*((*)
p_√xt_¨g
);

76 if(
m
<0)

78 
m
=m*(-1);

79 *
q
++='-';

81 
	`i2a
(
m
,10,&
q
);

82 
p_√xt_¨g
+=4;

85 
	`°r˝y
(
q
,(*((**)
p_√xt_¨g
)));

86 
q
+=
	`°æí
(*((**)
p_√xt_¨g
));

87 
p_√xt_¨g
+=4;

92 
k
;

93 
k
=0;k<((
Æign_ƒ
 >
	`°æí
(
ö√r_buf
))?

94 (
Æign_ƒ
-
	`°æí
(
ö√r_buf
)): 0);
k
++)

96 *
p
++=
cs
;

98 
q
=
ö√r_buf
;

99 *
q
)

101 *
p
++=*
q
++;

104 *
p
=0;

105  (
p
-
buf
);

106 
	}
}

108 
	$•rötf
(*
buf
, c⁄° *
fmt
, ...)

110 
va_li°
 
¨g
 = (va_li°)((*)(&
fmt
) + 4);

111  
	`v•rötf
(
buf
, 
fmt
, 
¨g
);

112 
	}
}

	@lib/wait.c

1 
	~"fs.h
"

3 
	$waô
(* 
°©us
)

5 
MESSAGE
 
msg
;

6 
msg
.
ty≥
 = 
WAIT
;

8 
	`£nd_ªcv
(
BOTH
, 
TASK_MM
, &
msg
);

9 *
°©us
 = 
msg
.
STATUS
;

11  (
msg
.
PID
 =
NO_TASK
 ? -1 : msg.PID);

12 
	}
}

	@lib/write.c

1 
	~"fs.h
"

3 
	$wrôe
–
fd
, c⁄° *
buf
, 
cou¡
 )

5 
MESSAGE
 
msg
;

6 
msg
.
ty≥
 = 
WRITE
;

7 
msg
.
FD
 = 
fd
;

8 
msg
.
BUF
 = (*)
buf
;

9 
msg
.
CNT
 = 
cou¡
;

11 
	`£nd_ªcv
–
BOTH
, 
TASK_FS
, &
msg
 );

13  
msg
.
CNT
;

14 
	}
}

	@mm/exec.c

1 
	~"fs.h
"

3 
	~"ñf.h
"

5 
u8
 * 
	gmmbuf
 = (u8*)0x700000;

6 c⁄° 
	gMMBUF_SIZE
 = 0x100000;

8 
	$do_exec
–
MESSAGE
 *
msg
 )

10 
«me_Àn
 = 
msg
->
NAME_LEN
;

11 
§c
 = 
msg
->
sour˚
;

12 
	`as£π
–
«me_Àn
 < 
MAX_PATH
 );

14 
∑th«me
[
MAX_PATH
];

15 
	`mem˝y
–(*)
	`va2œ
(
TASK_MM
,
∑th«me
), (*)va2œ(
§c
,
msg
->
PATHNAME
), 
«me_Àn
 );

16 
∑th«me
[
«me_Àn
] = 0;

18 
fd
 = 
	`›í
(
∑th«me
, 
O_RDWR
);

19 if–
fd
 == -1 )

21 
size
 = 
SECTOR_SIZE
 * 64;

22 
	`ªad
–
fd
, 
mmbuf
, 
size
 );

23 
	`˛o£
–
fd
 );

25 
Elf32_Ehdr
 *
ñf_ehdr
 = (Elf32_Ehd∏*)
mmbuf
;

26 
i
;

27  
i
=0; i< 
ñf_ehdr
->
e_phnum
; i++ )

29 
Elf32_Phdr
 *
ñf_phdr
 = (Elf32_Phd∏*)(
mmbuf
 + 
ñf_ehdr
->
e_phoff
 + 
i
*ñf_ehdr->
e_phítsize
 );

30 if–
ñf_phdr
->
p_ty≥
 =
PT_LOAD
 )

32 
	`as£π
–
ñf_phdr
->
p_vaddr
 +Élf_phdr->
p_memsz
 < 
PROC_IMAGE_SIZE_DEFAULT
 );

33 
	`mem˝y
–(*)
	`va2œ
–
§c
, (*)
ñf_phdr
->
p_vaddr
), (*)va2œ–
TASK_MM
, 
mmbuf
 +Élf_phdr->
p_off£t
),Élf_phdr->
p_fûesz
 );

37 
°ack_Àn
 = 
msg
->
BUF_LEN
;

38 
°ackc›y
[
PROC_STACK
];

39 
	`mem˝y
–(*)
	`va2œ
–
TASK_MM
, 
°ackc›y
), (*)va2œ–
§c
, 
msg
->
BUF
), 
°ack_Àn
 );

40 
u8
 *
°ack
 = (u8 *)(
PROC_IMAGE_SIZE_DEFAULT
 - 
PROC_STACK
 );

41 
dñè
 = ()
°ack
 - ()
msg
->
BUF
;

42 
¨gc
 = 0;

43 if–
°ack_Àn
 )

45 **
q
 = (**)
°ackc›y
;

46  ; *
q
!=0; q++,
¨gc
++ )

47 *
q
 +
dñè
;

50 
	`mem˝y
–(*)
	`va2œ
–
§c
, 
°ack
 ), (*)va2œ–
TASK_MM
, 
°ackc›y
 ), 
°ack_Àn
 );

51 
¥oc_èbÀ
[
§c
].
s_ªgs
.
ecx
 = 
¨gc
;

52 
¥oc_èbÀ
[
§c
].
s_ªgs
.
óx
 = (
u32
)
°ack
;

53 
¥oc_èbÀ
[
§c
].
s_ªgs
.
eù
 = 
ñf_ehdr
->
e_íåy
;

54 
¥oc_èbÀ
[
§c
].
s_ªgs
.
e•
 = 
PROC_IMAGE_SIZE_DEFAULT
 - 
PROC_STACK
;

56 
	`°r˝y
–
¥oc_èbÀ
[
§c
].
«me
, 
∑th«me
 );

59 
	}
}

	@mm/fork.c

1 
	~"fs.h
"

2 
	~"¥oc.h
"

4 
Æloc_mem
–
pid
, 
memsize
 );

5 
‰ì_mem
–
pid
 );

6 
˛ónup
–
¥oc
 *proc );

7 
	$do_f‹k
–
MESSAGE
 *
msg
 )

9 
¥oc
 *
p
 = 
¥oc_èbÀ
;

10 
i
;

11  
i
=0; i<
NR_TASKS
+
NR_PROCS
; i++,
p
++ )

12 if(
p
->
Êags
 =
FREE_SLOT
 )

14 
chûd_pid
 = 
i
;

15 
	`as£π
(
p
 =
¥oc_èbÀ
 + 
chûd_pid
 );

16 
	`as£π
–
chûd_pid
 >
NR_TASKS
+
NR_NATIVE_PROCS
 );

17 if–
i
 =
NR_TASKS
 + 
NR_PROCS
 )

19 
	`as£π
–
i
 < 
NR_TASKS
 + 
NR_PROCS
 );

21 
pid
 = 
msg
->
sour˚
;

22 
u16
 
chûd_ldt_£l
 = 
p
->
ldt_£l
;

23 *
p
 = 
¥oc_èbÀ
[
pid
];

24 
p
->
ldt_£l
 = 
chûd_ldt_£l
;

25 
p
->
∑ª¡
 = 
pid
;

26 
	`•rötf
–
p
->
«me
, "%s_%d", 
¥oc_èbÀ
[
pid
].«me, 
chûd_pid
 );

28 
des¸ùt‹
 *
µd
;

29 
µd
 = &(
¥oc_èbÀ
[
pid
].
s_ldts
[
INDEX_LDT_C
]);

30 
ˇŒî_T_ba£
 = (
µd
->
ba£_high
 << 24Ë+ (µd->
ba£_mid
 << 16Ë+Öpd->
ba£_low
 ;

31 
ˇŒî_T_limô
 = ((
µd
->
limô_high_©å2
 & 0xFË<< 16Ë+Öpd->
limô_low
 ;

32 
ˇŒî_T_size
 = ( 
ˇŒî_T_limô
 + 1 ) * ((
µd
->
limô_high_©å2
 & (
DA_LIMIT_4K
>>8)) ? 4096 : 1) ;

34 
µd
 = &(
¥oc_èbÀ
[
pid
].
s_ldts
[
INDEX_LDT_RW
]);

35 
ˇŒî_D_S_ba£
 = (
µd
->
ba£_high
 << 24Ë+ (µd->
ba£_mid
 << 16Ë+Öpd->
ba£_low
;

36 
ˇŒî_D_S_limô
 = ((
µd
->
limô_high_©å2
 & 0xFË<< 16Ë+Öpd->
limô_low
 ;

37 
ˇŒî_D_S_size
 = ( 
ˇŒî_D_S_limô
 + 1 ) * ((
µd
->
limô_high_©å2
 & (
DA_LIMIT_4K
>>8)) ? 4096 : 1) ;

39 
	`as£π
–
ˇŒî_T_ba£
 =
ˇŒî_D_S_ba£
 && 
ˇŒî_T_size
 =
ˇŒî_D_S_size
);

41 
chûd_ba£
 = 
	`Æloc_mem
–
chûd_pid
, 
ˇŒî_T_size
 );

42 
	`¥ötk
("MM 0x%x <-0x%x (0x%x byãs)\n", 
chûd_ba£
, 
ˇŒî_T_ba£
, 
ˇŒî_T_size
 );

43 
	`mem˝y
–(*)
chûd_ba£
, (*)
ˇŒî_T_ba£
, 
ˇŒî_T_size
 );

45 
	`öô_des¸ùt‹
–&
p
->
s_ldts
[
INDEX_LDT_C
], 
chûd_ba£
, (
PROC_IMAGE_SIZE_DEFAULT
-1Ë>> 12, 
DA_LIMIT_4K
 | 
DA_32
 | 
DA_C
 | 
PRIVILEGE_USER
 << 5 );

46 
	`öô_des¸ùt‹
–&
p
->
s_ldts
[
INDEX_LDT_RW
], 
chûd_ba£
, (
PROC_IMAGE_SIZE_DEFAULT
-1Ë>> 12, 
DA_LIMIT_4K
 | 
DA_32
 | 
DA_DRW
 | 
PRIVILEGE_USER
 << 5 );

47 
MESSAGE
 
msg2fs
;

48 
msg2fs
.
ty≥
 = 
FORK
;

49 
msg2fs
.
PID
 = 
chûd_pid
;

50 
	`£nd_ªcv
–
BOTH
, 
TASK_FS
, &
msg2fs
 );

52 
msg
->
PID
 = 
chûd_pid
;

54 
MESSAGE
 
chûd_msg
;

55 
chûd_msg
.
ty≥
 = 
SYSCALL_RET
;

56 
chûd_msg
.
RETVAL
 = 0;

57 
chûd_msg
.
PID
 = 0;

58 
	`£nd_ªcv
–
SEND
, 
chûd_pid
, &
chûd_msg
 );

61 
	}
}

64 
	$do_exô
–
MESSAGE
 *
msg
, 
°©us
 )

66 
i
;

67 
pid
 = 
msg
->
sour˚
;

68 
∑ª¡_pid
 = 
¥oc_èbÀ
[
pid
].
∑ª¡
;

69 
¥oc
 *
p
 = 
¥oc_èbÀ
 + 
pid
;

71 
MESSAGE
 
msg2fs
;

72 
msg2fs
.
ty≥
 = 
EXIT
;

73 
msg2fs
.
PID
 = 
pid
;

74 
	`£nd_ªcv
–
BOTH
, 
TASK_FS
, &
msg2fs
 );

76 
	`‰ì_mem
(
pid
);

77 
p
->
exô_°©us
 = 
°©us
;

79 if–
¥oc_èbÀ
[
∑ª¡_pid
].
Êags
 & 
WAITING
 )

81 
¥oc_èbÀ
[
∑ª¡_pid
].
Êags
 &~
WAITING
;

82 
	`˛ónup
–
¥oc_èbÀ
 + 
pid
 );

86 
¥oc_èbÀ
[
pid
].
Êags
 |
HANGING
 ;

89  
i
=0; i<
NR_TASKS
 + 
NR_PROCS
; i++ )

91 if–
¥oc_èbÀ
[
i
].
∑ª¡
 =
pid
 )

93 
¥oc_èbÀ
[
i
].
∑ª¡
 = 
INIT
;

94 if–(
¥oc_èbÀ
[
INIT
].
Êags
 & 
WAITING
Ë&& (¥oc_èbÀ[
i
].Êag†& 
HANGING
) )

96 
¥oc_èbÀ
[
INIT
].
Êags
 &~
WAITING
;

97 
	`˛ónup
–
¥oc_èbÀ
 + 
i
 );

101 
	}
}

103 
	$˛ónup
–
¥oc
 *proc )

105 
MESSAGE
 
msg2∑ª¡
;

106 
msg2∑ª¡
.
ty≥
 = 
SYSCALL_RET
;

107 
msg2∑ª¡
.
PID
 = 
	`¥oc2pid
(
¥oc
);

108 
msg2∑ª¡
.
STATUS
 = 
¥oc
->
exô_°©us
;

109 
	`£nd_ªcv
–
SEND
, 
¥oc
->
∑ª¡
, &
msg2∑ª¡
 );

111 
¥oc
->
Êags
 = 
FREE_SLOT
;

112 
	}
}

114 
	$do_waô
–
MESSAGE
 *
msg
)

116 
pid
 = 
msg
->
sour˚
;

117 
i
;

118 
chûdªn
 = 0;

119 
¥oc
 *
p
 = 
¥oc_èbÀ
;

120  
i
=0; i<
NR_TASKS
 + 
NR_PROCS
; i++,
p
++ )

122 if–
p
->
∑ª¡
 =
pid
 )

124 
chûdªn
++;

125 if–
p
->
Êags
 & 
HANGING
 )

127 
	`˛ónup
–
p
 );

132 if(
chûdªn
)

134 
¥oc_èbÀ
[
pid
].
Êags
 |
WAITING
;

138 
MESSAGE
 
m
;

139 
m
.
ty≥
 = 
SYSCALL_RET
;

140 
m
.
PID
 = 
NO_TASK
;

141 
	`£nd_ªcv
–
SEND
, 
pid
, &
m
 );

143 
	}
}

	@mm/mm.c

1 
	~"¥oc.h
"

4 
do_f‹k
–
MESSAGE
 *
msg
 );

5 
do_exô
–
MESSAGE
 *
msg
, 
°©us
 );

6 
do_waô
–
MESSAGE
 *
msg
);

7 
	$èsk_mm
()

9 
MESSAGE
 
msg
;

13 
	`£nd_ªcv
–
RECEIVE
, 
ANY
, &
msg
 );

14 
§c
 = 
msg
.
sour˚
;

15 
ª∂y
 = 1;

16  
msg
.
ty≥
 )

18 
FORK
:

19 
msg
.
RETVAL
 = 
	`do_f‹k
( &msg );

21 
EXIT
:

22 
	`do_exô
–&
msg
, msg.
STATUS
 );

23 
ª∂y
 = 0;

25 
EXEC
:

26 
	`do_exec
–&
msg
 );

28 
WAIT
:

29 
	`do_waô
–&
msg
 );

30 
ª∂y
 = 0;

33 
	`dump_msg
("MM:unknow¿msg", &
msg
 );

34 
	`as£π
(0);

37 if–
ª∂y
 )

39 
msg
.
ty≥
 = 
SYSCALL_RET
;

40 
	`£nd_ªcv
–
SEND
, 
§c
, &
msg
 );

43 
	}
}

45 
	$Æloc_mem
–
pid
, 
memsize
 )

47 
	`as£π
(
pid
 >(
NR_TASKS
 + 
NR_NATIVE_PROCS
));

48 i‡(
memsize
 > 
PROC_IMAGE_SIZE_DEFAULT
) {

49 
	`∑nic
("unsupported memoryÑequest: %d. "

51 
memsize
,

52 
PROC_IMAGE_SIZE_DEFAULT
);

55 
ba£
 = 
PROCS_BASE
 + (
pid
 - (
NR_TASKS
 + 
NR_NATIVE_PROCS
)Ë* 
PROC_IMAGE_SIZE_DEFAULT
;

57 i‡(
ba£
 + 
memsize
 >= 0x2000000)

58 
	`∑nic
("mem‹yáŒoˇti⁄ faûed.Öid:%d", 
pid
);

60  
ba£
;

61 
	}
}

63 
	$‰ì_mem
–
pid
 )

66 
	}
}

	@
1
.
0
79
1139
boot/boot.S
boot/include/fat12hdr.h
boot/include/lib.h
boot/include/loader.h
boot/include/pm.h
boot/loader.S
cmd/cat.c
cmd/hello.c
cmd/start.s
fs/b_tree.c
fs/block_table.c
fs/buffer.c
fs/fs.c
fs/inode.c
fs/k_memory.c
fs/link.c
fs/namei.c
fs/open.c
fs/read_write.c
fs/super.c
include/asm/io.h
include/asm/segment.h
include/asm/system.h
include/console.h
include/const.h
include/ctype.h
include/errno.h
include/fs.h
include/hd.h
include/i8259.h
include/keyboard.h
include/keymap.h
include/lib/fcntl.h
include/lib/stdio.h
include/port.h
include/proc.h
include/protect.h
include/proto.h
include/sched.h
include/sconst.h
include/stdarg.h
include/stddef.h
include/string.h
include/time.h
include/tty.h
include/type.h
kernel/console.c
kernel/hd.c
kernel/i8259.c
kernel/kernel.S
kernel/keyboard.c
kernel/main.c
kernel/proc.c
kernel/protect.c
kernel/sched.c
kernel/start.c
kernel/systask.c
kernel/time.c
kernel/tty.c
lib/cat.c
lib/close.c
lib/ctype.c
lib/exec.c
lib/exit.c
lib/fork.c
lib/getpid.c
lib/kliba.s
lib/misc.c
lib/open.c
lib/printf.c
lib/read.c
lib/string.c
lib/syscall.S
lib/vsprintf.c
lib/wait.c
lib/write.c
mm/exec.c
mm/fork.c
mm/mm.c
