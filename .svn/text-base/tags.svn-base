!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
$	boot/include/lib.h	/^	add		$'0',%al$/;"	v
$	boot/include/lib.h	/^	add		$'A',%al$/;"	v
$	boot/include/lib.h	/^	mov		$'h',%al$/;"	v
$0x07	boot/include/lib.h	/^	mov		$0x07,%ah$/;"	v
$0x0a	boot/include/lib.h	/^	cmp		$0x0a,%al$/;"	v
$0x0a	boot/include/lib.h	/^	sub		$0x0a,%al$/;"	v
$0x0f	boot/include/lib.h	/^	mov		$0x0f,%ah$/;"	v
$0xff	boot/include/lib.h	/^	and		$0xff,%eax$/;"	v
$16	boot/include/lib.h	/^	shr		$16,%eax$/;"	v
$16	boot/include/pm.h	/^	shr		$16,%eax$/;"	v
$160	boot/include/lib.h	/^	mov		$160,%bl$/;"	v
$2	boot/include/lib.h	/^	add		$2,%edi$/;"	v
$2	boot/include/lib.h	/^	mov		$2,%ecx$/;"	v
$24	boot/include/lib.h	/^	shr		$24,%eax$/;"	v
$4	boot/include/lib.h	/^	add		$4,%edi$/;"	v
$4	boot/include/lib.h	/^	add		$4,%esp$/;"	v
$4	boot/include/lib.h	/^	shr		$4,%al$/;"	v
$4	boot/include/pm.h	/^	shl		$4,%eax$/;"	v
$8	boot/include/lib.h	/^	shr		$8,%eax$/;"	v
$9	boot/include/lib.h	/^	cmp		$9,%al$/;"	v
ALT_L	include/keyboard.h	37;"	d
ALT_R	include/keyboard.h	38;"	d
ANY	include/proc.h	24;"	d
APPS	include/keyboard.h	30;"	d
ASSERT	include/const.h	27;"	d
ATA_IDENTIFY	include/hd.h	103;"	d
ATA_READ	include/hd.h	104;"	d
ATA_WRITE	include/hd.h	105;"	d
AT_WINI_IRQ	include/i8259.h	19;"	d
BACKSPACE	include/keyboard.h	26;"	d
BLACK	include/console.h	4;"	d
BLUE	include/console.h	8;"	d
BOTH	include/proc.h	14;"	d
BRIGHT	include/console.h	10;"	d
BUF	include/proc.h	147;"	d
BUF_LEN	include/proc.h	141;"	d
BootMessage	boot/boot.S	/^BootMessage:        .ascii    "Booting**"        \/* index 0 *\/$/;"	l
CAPS_LOCK	include/keyboard.h	41;"	d
CASCADE_IRQ	include/i8259.h	12;"	d
CASMFLAGS	Makefile	/^CASMFLAGS=-c -g -fno-builtin -Wall -I include\/$/;"	m
CBOOTFLAGS	Makefile	/^CBOOTFLAGS=-c -fno-builtin -Wall -I boot\/include\/$/;"	m
CC	Makefile	/^CC=gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS=-c -g -fno-builtin -Wall -fno-stack-protector -fomit-frame-pointer -I include\/$/;"	m
CKERNELFLAGS	Makefile	/^CKERNELFLAGS=$(CFLAGS) -I include\/$/;"	m
CLOCK_IRQ	include/i8259.h	10;"	d
CLOSE	include/proc.h	/^	OPEN,CLOSE,READ,WRITE,LSEEK,STAT,UNLINK,$/;"	e	enum:msgtype
CNT	include/proc.h	142;"	d
CONSOLE	include/console.h	/^}CONSOLE;$/;"	t	typeref:struct:console
CRTC_ADDR_REG	include/port.h	11;"	d
CRTC_DATA_REG	include/port.h	12;"	d
CTRL_L	include/keyboard.h	35;"	d
CTRL_R	include/keyboard.h	36;"	d
CURSOR_H	include/port.h	15;"	d
CURSOR_L	include/port.h	16;"	d
DA_32	include/protect.h	97;"	d
DA_386CGate	include/protect.h	115;"	d
DA_386IGate	include/protect.h	116;"	d
DA_386TGate	include/protect.h	117;"	d
DA_386TSS	include/protect.h	114;"	d
DA_C	include/protect.h	107;"	d
DA_CCO	include/protect.h	109;"	d
DA_CCOR	include/protect.h	110;"	d
DA_CR	include/protect.h	108;"	d
DA_DPL0	include/protect.h	99;"	d
DA_DPL1	include/protect.h	100;"	d
DA_DPL2	include/protect.h	101;"	d
DA_DPL3	include/protect.h	102;"	d
DA_DR	include/protect.h	104;"	d
DA_DRW	include/protect.h	105;"	d
DA_DRWA	include/protect.h	106;"	d
DA_LDT	include/protect.h	112;"	d
DA_LIMIT_4K	include/protect.h	98;"	d
DA_TaskGate	include/protect.h	113;"	d
DEFAULT_CHAR_COLOR	include/console.h	29;"	d
DELETE	include/keyboard.h	63;"	d
DESCRIPTOR	include/protect.h	/^}DESCRIPTOR;$/;"	t	typeref:struct:descriptor
DEVICE	include/proc.h	145;"	d
DEV_CDROM	include/fs.h	16;"	d
DEV_CHAR_TTY	include/fs.h	18;"	d
DEV_CLOSE	include/proc.h	/^	DEV_CLOSE,$/;"	e	enum:msgtype
DEV_FLOPPY	include/fs.h	15;"	d
DEV_HD	include/fs.h	17;"	d
DEV_IOCTL	include/proc.h	/^	DEV_IOCTL$/;"	e	enum:msgtype
DEV_OPEN	include/proc.h	/^	DEV_OPEN = 1001,$/;"	e	enum:msgtype
DEV_READ	include/proc.h	/^	DEV_READ,$/;"	e	enum:msgtype
DEV_SCSI	include/fs.h	19;"	d
DEV_WRITE	include/proc.h	/^	DEV_WRITE,$/;"	e	enum:msgtype
DIOCTL_GET_GEO	include/hd.h	106;"	d
DOWN	include/keyboard.h	69;"	d
DispMemInfo	boot/loader.S	/^DispMemInfo:$/;"	l
DispStr	boot/boot.S	/^DispStr: $/;"	l
DispStrRealMode	boot/loader.S	/^DispStrRealMode:$/;"	l
E2BIG	include/errno.h	26;"	d
EACCES	include/errno.h	32;"	d
EAGAIN	include/errno.h	30;"	d
EBADF	include/errno.h	28;"	d
EBUSY	include/errno.h	35;"	d
ECHILD	include/errno.h	29;"	d
EDEADLK	include/errno.h	54;"	d
EDOM	include/errno.h	52;"	d
EEXIST	include/errno.h	36;"	d
EFAULT	include/errno.h	33;"	d
EFBIG	include/errno.h	46;"	d
EINTR	include/errno.h	23;"	d
EINVAL	include/errno.h	41;"	d
EIO	include/errno.h	24;"	d
EISDIR	include/errno.h	40;"	d
EMFILE	include/errno.h	43;"	d
EMLINK	include/errno.h	50;"	d
ENAMETOOLONG	include/errno.h	55;"	d
END	include/keyboard.h	65;"	d
ENFILE	include/errno.h	42;"	d
ENODEV	include/errno.h	38;"	d
ENOENT	include/errno.h	21;"	d
ENOEXEC	include/errno.h	27;"	d
ENOLCK	include/errno.h	56;"	d
ENOMEM	include/errno.h	31;"	d
ENOSPC	include/errno.h	47;"	d
ENOSYS	include/errno.h	57;"	d
ENOTBLK	include/errno.h	34;"	d
ENOTDIR	include/errno.h	39;"	d
ENOTEMPTY	include/errno.h	58;"	d
ENOTTY	include/errno.h	44;"	d
ENTER	include/keyboard.h	25;"	d
ENXIO	include/errno.h	25;"	d
EPERM	include/errno.h	20;"	d
EPIPE	include/errno.h	51;"	d
ERANGE	include/errno.h	53;"	d
EROFS	include/errno.h	49;"	d
ERROR	include/errno.h	19;"	d
ESC	include/keyboard.h	23;"	d
ESPIPE	include/errno.h	48;"	d
ESRCH	include/errno.h	22;"	d
ETHER_IRQ	include/i8259.h	13;"	d
ETXTBSY	include/errno.h	45;"	d
EXDEV	include/errno.h	37;"	d
EXEC	include/proc.h	/^	EXEC,WAIT,$/;"	e	enum:msgtype
EXIT	include/proc.h	/^	FORK, EXIT,$/;"	e	enum:msgtype
EXT_PART	include/hd.h	47;"	d
F1	include/keyboard.h	46;"	d
F10	include/keyboard.h	55;"	d
F11	include/keyboard.h	56;"	d
F12	include/keyboard.h	57;"	d
F2	include/keyboard.h	47;"	d
F3	include/keyboard.h	48;"	d
F4	include/keyboard.h	49;"	d
F5	include/keyboard.h	50;"	d
F6	include/keyboard.h	51;"	d
F7	include/keyboard.h	52;"	d
F8	include/keyboard.h	53;"	d
F9	include/keyboard.h	54;"	d
FALSE	include/const.h	10;"	d
FD	include/proc.h	137;"	d
FIRST_BLOCK_TABLE	include/fs.h	44;"	d
FIRST_PROC	include/proc.h	100;"	d
FIRST_SUPER_BLOCK	include/fs.h	43;"	d
FIRST_ZONE	include/fs.h	45;"	d
FLAGS	include/proc.h	139;"	d
FLAG_ALT_L	include/keyboard.h	14;"	d
FLAG_ALT_R	include/keyboard.h	15;"	d
FLAG_BREAK	include/keyboard.h	8;"	d
FLAG_CTRL_L	include/keyboard.h	12;"	d
FLAG_CTRL_R	include/keyboard.h	13;"	d
FLAG_EXT	include/keyboard.h	9;"	d
FLAG_PAD	include/keyboard.h	16;"	d
FLAG_SHIFT_L	include/keyboard.h	10;"	d
FLAG_SHIFT_R	include/keyboard.h	11;"	d
FLASH	include/console.h	9;"	d
FLOPPY_IRQ	include/i8259.h	17;"	d
FORK	include/proc.h	/^	FORK, EXIT,$/;"	e	enum:msgtype
FREE_SLOT	include/proc.h	35;"	d
GATE	include/protect.h	/^}GATE;$/;"	t	typeref:struct:gate
GDT_SIZE	include/protect.h	4;"	d
GET_PID	include/proc.h	/^	GET_TICKS,GET_PID,GET_RTC_TIME,$/;"	e	enum:msgtype
GET_RTC_TIME	include/proc.h	/^	GET_TICKS,GET_PID,GET_RTC_TIME,$/;"	e	enum:msgtype
GET_TICKS	include/proc.h	/^	GET_TICKS,GET_PID,GET_RTC_TIME,$/;"	e	enum:msgtype
GRAY_CHAR	include/console.h	30;"	d
GREEN	include/console.h	7;"	d
GUI_L	include/keyboard.h	28;"	d
GUI_R	include/keyboard.h	29;"	d
GdtPtr	boot/loader.S	/^GdtPtr:		.2byte	GdtLen-1$/;"	l
GetFATEntry	boot/boot.S	/^GetFATEntry:$/;"	l
GetFATEntry	boot/loader.S	/^GetFATEntry:$/;"	l
GoOnReading	boot/boot.S	/^GoOnReading:$/;"	l
GoOnReading	boot/loader.S	/^GoOnReading:$/;"	l
HANGING	include/proc.h	34;"	d
HARD_INT	include/proc.h	/^	HARD_INT = 1,$/;"	e	enum:msgtype
HASH_TYPE	fs/b_tree.c	6;"	d	file:
HD_INFO	include/hd.h	/^}HD_INFO;$/;"	t	typeref:struct:hd_info
HD_TIMEOUT	include/hd.h	101;"	d
HOME	include/keyboard.h	64;"	d
HZ	include/time.h	6;"	d
IDT_SIZE	include/protect.h	5;"	d
INCLUDE	Makefile	/^INCLUDE=include\/*$/;"	m
INDEX_DUMMY	include/protect.h	62;"	d
INDEX_FLAT_C	include/protect.h	63;"	d
INDEX_FLAT_RW	include/protect.h	64;"	d
INDEX_LDT_C	include/protect.h	82;"	d
INDEX_LDT_FIRST	include/protect.h	67;"	d
INDEX_LDT_RW	include/protect.h	83;"	d
INDEX_TSS	include/protect.h	66;"	d
INDEX_VIDEO	include/protect.h	65;"	d
INIT	include/proc.h	23;"	d
INODE_SIZE	include/fs.h	28;"	d
INSERT	include/keyboard.h	62;"	d
INTERRUPT	include/proc.h	17;"	d
INT_M_CTL	include/i8259.h	4;"	d
INT_M_CTLMASK	include/i8259.h	5;"	d
INT_S_CTL	include/i8259.h	6;"	d
INT_S_CTLMASK	include/i8259.h	7;"	d
INT_VECTOR_BOUNDS	include/protect.h	125;"	d
INT_VECTOR_BREAKPOINT	include/protect.h	123;"	d
INT_VECTOR_COPROC_ERR	include/protect.h	135;"	d
INT_VECTOR_COPROC_NOT	include/protect.h	127;"	d
INT_VECTOR_COPROC_SEG	include/protect.h	129;"	d
INT_VECTOR_DEBUG	include/protect.h	121;"	d
INT_VECTOR_DIVIDE	include/protect.h	120;"	d
INT_VECTOR_DOUBLE_FAULT	include/protect.h	128;"	d
INT_VECTOR_INVAL_OP	include/protect.h	126;"	d
INT_VECTOR_INVAL_TSS	include/protect.h	130;"	d
INT_VECTOR_IRQ0	include/protect.h	7;"	d
INT_VECTOR_IRQ8	include/protect.h	8;"	d
INT_VECTOR_NMI	include/protect.h	122;"	d
INT_VECTOR_OVERFLOW	include/protect.h	124;"	d
INT_VECTOR_PAGE_FAULT	include/protect.h	134;"	d
INT_VECTOR_PROTECTION	include/protect.h	133;"	d
INT_VECTOR_SEG_NOT	include/protect.h	131;"	d
INT_VECTOR_STACK_FAULT	include/protect.h	132;"	d
INT_VECTOR_SYS_CALL	include/protect.h	139;"	d
INVALID_DRIVER	include/proc.h	16;"	d
INVALID_INODE	include/fs.h	11;"	d
I_BLOCK_SPECIAL	include/fs.h	50;"	d
I_CHAR_SPECIAL	include/fs.h	52;"	d
I_DIRECTORY	include/fs.h	51;"	d
I_NAMED_PIPE	include/fs.h	53;"	d
I_REGULAR	include/fs.h	49;"	d
I_TYPE_MASK	include/fs.h	48;"	d
Init	kernel/main.c	/^void Init()$/;"	f
InitKernel	boot/loader.S	/^InitKernel:$/;"	l
KB_ACK	include/const.h	24;"	d
KB_CMD	include/port.h	20;"	d
KB_DATA	include/port.h	19;"	d
KB_INPUT	include/keyboard.h	/^}KB_INPUT;$/;"	t	typeref:struct:s_kb
KB_IN_BYTES	include/keyboard.h	4;"	d
KERNELNEEDFILE	Makefile	/^KERNELNEEDFILE= kernel\/console.o kernel\/hd.o kernel\/i8259.o kernel\/keyboard.o kernel\/main.o \\$/;"	m
KEYBOARD_IRQ	include/i8259.h	11;"	d
K_MEMORY_BEGIN	include/fs.h	33;"	d
K_MEMORY_SECTS	include/fs.h	32;"	d
K_MEMORY_SIZE	include/fs.h	31;"	d
KernelFileName	boot/loader.S	/^KernelFileName:	.asciz	"KERNEL  BIN"$/;"	l
KillMotor	boot/loader.S	/^KillMotor:$/;"	l
LABEL_BEGIN	boot/loader.S	/^LABEL_BEGIN:$/;"	l
LABEL_CMP_FILENAME	boot/boot.S	/^LABEL_CMP_FILENAME:$/;"	l
LABEL_CMP_FILENAME	boot/loader.S	/^LABEL_CMP_FILENAME:$/;"	l
LABEL_DATA	boot/loader.S	/^LABEL_DATA:$/;"	l
LABEL_DESC_FLAT_C	boot/loader.S	/^LABEL_DESC_FLAT_C:	Descriptor	0, 0xfffff,	(DA_CR + DA_32 + DA_LIMIT_4K)$/;"	l
LABEL_DESC_FLAT_RW	boot/loader.S	/^LABEL_DESC_FLAT_RW:	Descriptor	0, 0xfffff, (DA_DRW + DA_32 + DA_LIMIT_4K)$/;"	l
LABEL_DESC_VIDEO	boot/loader.S	/^LABEL_DESC_VIDEO:	Descriptor	0xb8000,	0xffff,(DA_DRW + DA_DPL3)$/;"	l
LABEL_DIFFERENT	boot/boot.S	/^LABEL_DIFFERENT:$/;"	l
LABEL_DIFFERENT	boot/loader.S	/^LABEL_DIFFERENT:$/;"	l
LABEL_EVEN	boot/boot.S	/^LABEL_EVEN:$/;"	l
LABEL_EVEN	boot/loader.S	/^LABEL_EVEN:$/;"	l
LABEL_EVEN_2	boot/boot.S	/^LABEL_EVEN_2:$/;"	l
LABEL_EVEN_2	boot/loader.S	/^LABEL_EVEN_2:$/;"	l
LABEL_FILENAME_FOUND	boot/boot.S	/^LABEL_FILENAME_FOUND:$/;"	l
LABEL_FILENAME_FOUND	boot/loader.S	/^LABEL_FILENAME_FOUND:$/;"	l
LABEL_FILE_LOADED	boot/boot.S	/^LABEL_FILE_LOADED:$/;"	l
LABEL_FILE_LOADED	boot/loader.S	/^LABEL_FILE_LOADED:$/;"	l
LABEL_GDT	boot/loader.S	/^LABEL_GDT:		Descriptor	0, 0, 0$/;"	l
LABEL_GET_FAT_ENTRY_OK	boot/boot.S	/^LABEL_GET_FAT_ENTRY_OK:$/;"	l
LABEL_GET_FAT_ENTRY_OK	boot/loader.S	/^LABEL_GET_FAT_ENTRY_OK:$/;"	l
LABEL_GOON_LOADING_FILE	boot/boot.S	/^LABEL_GOON_LOADING_FILE:$/;"	l
LABEL_GOON_LOADING_FILE	boot/loader.S	/^LABEL_GOON_LOADING_FILE:$/;"	l
LABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR	boot/boot.S	/^LABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR:$/;"	l
LABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR	boot/loader.S	/^LABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR:$/;"	l
LABEL_GO_ON	boot/boot.S	/^LABEL_GO_ON:$/;"	l
LABEL_GO_ON	boot/loader.S	/^LABEL_GO_ON:$/;"	l
LABEL_JMP_PROTECT	boot/loader.S	/^LABEL_JMP_PROTECT:$/;"	l
LABEL_NO_KERNELBIN	boot/loader.S	/^LABEL_NO_KERNELBIN:$/;"	l
LABEL_NO_LOADERBIN	boot/boot.S	/^LABEL_NO_LOADERBIN:$/;"	l
LABEL_PM_START	boot/loader.S	/^LABEL_PM_START:$/;"	l
LABEL_SEARCH_FOR_KERNELBIN	boot/loader.S	/^LABEL_SEARCH_FOR_KERNELBIN:$/;"	l
LABEL_SEARCH_FOR_LOADERBIN	boot/boot.S	/^LABEL_SEARCH_FOR_LOADERBIN:$/;"	l
LABEL_SEARCH_IN_ROOT_DIR_BEGIN	boot/boot.S	/^LABEL_SEARCH_IN_ROOT_DIR_BEGIN:$/;"	l
LABEL_SEARCH_IN_ROOT_DIR_BEGIN	boot/loader.S	/^LABEL_SEARCH_IN_ROOT_DIR_BEGIN:$/;"	l
LABEL_START	boot/boot.S	/^LABEL_START:$/;"	l
LAST_PROC	include/proc.h	101;"	d
LD	Makefile	/^LD=ld$/;"	m
LDFILE_BOOT	Makefile	/^LDFILE_BOOT=boot\/x86.ld$/;"	m
LDFILE_DOS	Makefile	/^LDFILE_DOS=boot\/x86_dos.ld$/;"	m
LDFILE_KERNEL	Makefile	/^LDFILE_KERNEL=x86_kernel.ld$/;"	m
LDFLAGS_BOOT	Makefile	/^LDFLAGS_BOOT=-T$(LDFILE_BOOT)$/;"	m
LDFLAGS_DOS	Makefile	/^LDFLAGS_DOS=-T$(LDFILE_DOS)$/;"	m
LDFLAGS_KERNEL	Makefile	/^LDFLAGS_KERNEL=-T$(LDFILE_KERNEL)$/;"	m
LDT_SIZE	include/protect.h	81;"	d
LED_CODE	include/const.h	23;"	d
LEFT	include/keyboard.h	70;"	d
LSEEK	include/proc.h	/^	OPEN,CLOSE,READ,WRITE,LSEEK,STAT,UNLINK,$/;"	e	enum:msgtype
Limit	boot/include/pm.h	/^.macro Descriptor Base, Limit, Attr$/;"	v
LoadMessage	boot/loader.S	/^LoadMessage:	.ascii	"Loading  "$/;"	l
LoaderFileName	boot/boot.S	/^LoaderFileName:     .asciz  "LOADER  BIN"        \/* File name *\/$/;"	l
MAGIC_V1	include/fs.h	26;"	d
MAG_CH_ASSERT	include/const.h	42;"	d
MAG_CH_PANIC	include/const.h	41;"	d
MAJOR	include/fs.h	23;"	d
MAJOR_SHIFT	include/fs.h	21;"	d
MAKE_COLOR	include/console.h	11;"	d
MAKE_DEV	include/fs.h	22;"	d
MAKE_DEVICE_REG	include/hd.h	108;"	d
MAP_COLS	include/keyboard.h	5;"	d
MASK_RAW	include/keyboard.h	18;"	d
MAX	include/stddef.h	17;"	d
MAX_ENTRY	fs/b_tree.c	5;"	d	file:
MAX_FILENAME_LEN	include/fs.h	29;"	d
MAX_PATH	include/fs.h	55;"	d
MAX_PRIM	include/hd.h	10;"	d
MAX_TICKS	include/time.h	7;"	d
MAY_EXEC	fs/namei.c	4;"	d	file:
MAY_READ	fs/namei.c	6;"	d	file:
MAY_WRITE	fs/namei.c	5;"	d	file:
MESSAGE	include/type.h	/^}MESSAGE;$/;"	t	typeref:struct:__anon1
MIN	include/stddef.h	18;"	d
MINOR	include/fs.h	24;"	d
MINOR_BOOT	include/hd.h	61;"	d
MINOR_hd1a	include/hd.h	56;"	d
MINOR_hd2a	include/hd.h	57;"	d
MINOR_hd2b	include/hd.h	58;"	d
MINOR_hd3a	include/hd.h	59;"	d
MINOR_hd4a	include/hd.h	60;"	d
MMBUF_SIZE	mm/exec.c	/^const int   MMBUF_SIZE  = 0x100000;$/;"	v
MemChkFail	boot/loader.S	/^MemChkFail:$/;"	l
MemChkLoop	boot/loader.S	/^MemChkLoop:$/;"	l
MemChkOK	boot/loader.S	/^MemChkOK:$/;"	l
Message1	boot/boot.S	/^Message1:           .ascii    "Loaded in"        \/* index 1 *\/$/;"	l
Message1	boot/loader.S	/^Message1:		.ascii	"Ready.   "$/;"	l
Message2	boot/boot.S	/^Message2:           .ascii    "No LOADER"        \/* index 2 *\/$/;"	l
Message2	boot/loader.S	/^Message2:		.ascii	"NoKERNEL "$/;"	l
NAME_LEN	include/proc.h	140;"	d
NO_DEV	include/fs.h	14;"	d
NO_PART	include/hd.h	46;"	d
NO_TASK	include/proc.h	25;"	d
NR_BLOCK_TABLE_ENTRY	include/fs.h	36;"	d
NR_BUFFER	fs/buffer.c	9;"	d	file:
NR_CONSOLES	include/console.h	15;"	d
NR_DEFAULT_FILE_SECTS	include/const.h	62;"	d
NR_FILES	include/proc.h	37;"	d
NR_FILE_DESC	include/fs.h	35;"	d
NR_HASH	fs/buffer.c	8;"	d	file:
NR_INODE	include/hd.h	49;"	d
NR_IRQ	include/i8259.h	9;"	d
NR_NATIVE_PROCS	include/proc.h	99;"	d
NR_PART_PER_DRIVE	include/hd.h	6;"	d
NR_PRIM_PER_DRIVE	include/hd.h	9;"	d
NR_PROCS	include/proc.h	98;"	d
NR_SCAN_CODES	include/keyboard.h	6;"	d
NR_SUB_PER_DRIVE	include/hd.h	8;"	d
NR_SUB_PER_PART	include/hd.h	7;"	d
NR_SUPER_BLOCK	include/hd.h	50;"	d
NR_SYS_CALL	include/proc.h	27;"	d
NR_TASKS	include/proc.h	97;"	d
NULL	include/stddef.h	14;"	d
NULL	include/stddef.h	15;"	d
NULL	include/string.h	5;"	d
NUM_LOCK	include/keyboard.h	42;"	d
OBJCOPY	Makefile	/^OBJCOPY=objcopy$/;"	m
OFFSET	include/proc.h	148;"	d
OPEN	include/proc.h	/^	OPEN,CLOSE,READ,WRITE,LSEEK,STAT,UNLINK,$/;"	e	enum:msgtype
O_CREAT	include/lib/fcntl.h	4;"	d
O_RDWR	include/lib/fcntl.h	5;"	d
Offset	boot/include/pm.h	/^.macro Gate  Selector, Offset, PCount, Attr$/;"	v
PAD_0	include/keyboard.h	85;"	d
PAD_1	include/keyboard.h	86;"	d
PAD_2	include/keyboard.h	87;"	d
PAD_3	include/keyboard.h	88;"	d
PAD_4	include/keyboard.h	89;"	d
PAD_5	include/keyboard.h	90;"	d
PAD_6	include/keyboard.h	91;"	d
PAD_7	include/keyboard.h	92;"	d
PAD_8	include/keyboard.h	93;"	d
PAD_9	include/keyboard.h	94;"	d
PAD_DEL	include/keyboard.h	105;"	d
PAD_DOT	include/keyboard.h	84;"	d
PAD_DOWN	include/keyboard.h	96;"	d
PAD_END	include/keyboard.h	100;"	d
PAD_ENTER	include/keyboard.h	83;"	d
PAD_HOME	include/keyboard.h	99;"	d
PAD_INS	include/keyboard.h	103;"	d
PAD_LEFT	include/keyboard.h	97;"	d
PAD_MID	include/keyboard.h	104;"	d
PAD_MINUS	include/keyboard.h	81;"	d
PAD_PAGEDOWN	include/keyboard.h	102;"	d
PAD_PAGEUP	include/keyboard.h	101;"	d
PAD_PLUS	include/keyboard.h	82;"	d
PAD_RIGHT	include/keyboard.h	98;"	d
PAD_SLASH	include/keyboard.h	79;"	d
PAD_STAR	include/keyboard.h	80;"	d
PAD_UP	include/keyboard.h	95;"	d
PAGEDOWN	include/keyboard.h	67;"	d
PAGEUP	include/keyboard.h	66;"	d
PARTITION_TABLE_OFFSET	include/hd.h	102;"	d
PART_ENTRY	include/hd.h	/^} PART_ENTRY;$/;"	t	typeref:struct:part_ent
PART_INFO	include/hd.h	/^}PART_INFO;$/;"	t	typeref:struct:part_info
PATHNAME	include/proc.h	138;"	d
PAUSEBREAK	include/keyboard.h	61;"	d
PCount	boot/include/pm.h	/^.macro Gate  Selector, Offset, PCount, Attr$/;"	v
PID	include/proc.h	151;"	d
PIGS_PART	include/hd.h	45;"	d
POSITION	include/proc.h	146;"	d
POWER	include/keyboard.h	74;"	d
PRINTER_IRQ	include/i8259.h	18;"	d
PRINTSCREEN	include/keyboard.h	60;"	d
PRIVAT	include/const.h	5;"	d
PRIVILEGE_KERNEL	include/const.h	13;"	d
PRIVILEGE_TASK	include/const.h	14;"	d
PRIVILEGE_USER	include/const.h	15;"	d
PROCESS	include/proc.h	/^}PROCESS;$/;"	t	typeref:struct:proc
PROCS_BASE	include/proc.h	8;"	d
PROC_IMAGE_SIZE_DEFAULT	include/proc.h	9;"	d
PROC_NR	include/proc.h	144;"	d
PROC_STACK	include/proc.h	10;"	d
PUBLIC	include/const.h	4;"	d
P_EXTENDED	include/hd.h	43;"	d
P_PRIMARY	include/hd.h	42;"	d
PrintF	boot/loader.S	/^PrintF:$/;"	l
RATE_GENERATOR	include/time.h	4;"	d
RD_SECT	include/fs.h	223;"	d
READ	include/proc.h	/^	OPEN,CLOSE,READ,WRITE,LSEEK,STAT,UNLINK,$/;"	e	enum:msgtype
RECEIVE	include/proc.h	13;"	d
RECEIVING	include/proc.h	31;"	d
RED	include/console.h	6;"	d
RED_CHAR	include/console.h	31;"	d
REG_ALT_STATUS	include/hd.h	38;"	d
REG_CMD	include/hd.h	33;"	d
REG_DATA	include/hd.h	12;"	d
REG_DEVICE	include/hd.h	20;"	d
REG_DEV_CTRL	include/hd.h	36;"	d
REG_DRV_ADDR	include/hd.h	40;"	d
REG_ERROR	include/hd.h	14;"	d
REG_FEATURES	include/hd.h	13;"	d
REG_LBA_HIGH	include/hd.h	19;"	d
REG_LBA_LOW	include/hd.h	17;"	d
REG_LBA_MID	include/hd.h	18;"	d
REG_NSECTOR	include/hd.h	16;"	d
REG_STATUS	include/hd.h	22;"	d
REQUEST	include/proc.h	143;"	d
RESUME_PROC	include/proc.h	/^	SUSPEND_PROC, RESUME_PROC, $/;"	e	enum:msgtype
RETVAL	include/proc.h	150;"	d
RETVAL	include/proc.h	153;"	d
RIGHT	include/keyboard.h	71;"	d
ROOT_DEV	include/hd.h	63;"	d
ROOT_INODE	include/fs.h	12;"	d
RPL_KERNEL	include/const.h	18;"	d
RPL_TASK	include/const.h	19;"	d
RPL_USER	include/const.h	20;"	d
RS232_IRQ	include/i8259.h	15;"	d
ReadSector	boot/boot.S	/^ReadSector:$/;"	l
ReadSector	boot/loader.S	/^ReadSector:$/;"	l
SA_RPL0	include/protect.h	87;"	d
SA_RPL1	include/protect.h	88;"	d
SA_RPL2	include/protect.h	89;"	d
SA_RPL3	include/protect.h	90;"	d
SA_RPL_MASK	include/protect.h	86;"	d
SA_TIG	include/protect.h	93;"	d
SA_TIL	include/protect.h	94;"	d
SA_TI_MASK	include/protect.h	92;"	d
SCREEN_SIZE	include/console.h	27;"	d
SCREEN_WIDTH	include/console.h	28;"	d
SCROLL_LOCK	include/keyboard.h	43;"	d
SCR_DN	include/console.h	26;"	d
SCR_UP	include/console.h	25;"	d
SECONDARY_IRQ	include/i8259.h	14;"	d
SECTOR_BITS	include/hd.h	53;"	d
SECTOR_SIZE	include/hd.h	52;"	d
SECTOR_SIZE_SHIFT	include/hd.h	54;"	d
SELECTOR_DUMMY	include/protect.h	69;"	d
SELECTOR_FLAT_C	include/protect.h	70;"	d
SELECTOR_FLAT_RW	include/protect.h	71;"	d
SELECTOR_KERNEL_CS	include/protect.h	76;"	d
SELECTOR_KERNEL_DS	include/protect.h	77;"	d
SELECTOR_KERNEL_GS	include/protect.h	78;"	d
SELECTOR_LDT_FIRST	include/protect.h	74;"	d
SELECTOR_TSS	include/protect.h	73;"	d
SELECTOR_VIDEO	include/protect.h	72;"	d
SEND	include/proc.h	12;"	d
SENDING	include/proc.h	30;"	d
SHIFT_L	include/keyboard.h	33;"	d
SHIFT_R	include/keyboard.h	34;"	d
SLEEP	include/proc.h	32;"	d
STACK_DEFAULT_SIZE	include/proc.h	103;"	d
STACK_FRAME	include/proc.h	/^}STACK_FRAME;$/;"	t	typeref:struct:stackframe
STACK_SIZE_FS	include/proc.h	107;"	d
STACK_SIZE_HD	include/proc.h	106;"	d
STACK_SIZE_INIT	include/proc.h	109;"	d
STACK_SIZE_MM	include/proc.h	108;"	d
STACK_SIZE_SYS	include/proc.h	105;"	d
STACK_SIZE_TESTA	include/proc.h	110;"	d
STACK_SIZE_TESTB	include/proc.h	111;"	d
STACK_SIZE_TESTC	include/proc.h	112;"	d
STACK_SIZE_TOTAL	include/proc.h	113;"	d
STACK_SIZE_TTY	include/proc.h	104;"	d
START_ADDR_H	include/port.h	13;"	d
START_ADDR_L	include/port.h	14;"	d
STAT	include/proc.h	/^	OPEN,CLOSE,READ,WRITE,LSEEK,STAT,UNLINK,$/;"	e	enum:msgtype
STATUS	include/proc.h	152;"	d
STATUS_BSY	include/hd.h	24;"	d
STATUS_CORR	include/hd.h	29;"	d
STATUS_DFSE	include/hd.h	26;"	d
STATUS_DRDY	include/hd.h	25;"	d
STATUS_DRQ	include/hd.h	28;"	d
STATUS_DSC	include/hd.h	27;"	d
STATUS_ERR	include/hd.h	31;"	d
STATUS_IDX	include/hd.h	30;"	d
STR_DEFAULT_LEN	include/const.h	7;"	d
SUPER_BLOCK_SIZE	include/fs.h	27;"	d
SUSPEND_PROC	include/proc.h	/^	SUSPEND_PROC, RESUME_PROC, $/;"	e	enum:msgtype
SYSCALL_RET	include/proc.h	/^	SYSCALL_RET,$/;"	e	enum:msgtype
SetupPaging	boot/loader.S	/^SetupPaging:$/;"	l
StackSpace	boot/loader.S	/^StackSpace:	.fill	1024$/;"	l
StackSpace	kernel/kernel.S	/^StackSpace:		.fill	2048$/;"	l
StackTop	kernel/kernel.S	/^StackTop:$/;"	l
TAB	include/keyboard.h	24;"	d
TASK	include/proc.h	/^}TASK;$/;"	t	typeref:struct:task
TASK_FS	include/proc.h	21;"	d
TASK_HD	include/proc.h	20;"	d
TASK_MM	include/proc.h	22;"	d
TASK_SYS	include/proc.h	19;"	d
TASK_TTY	include/proc.h	18;"	d
TIMER0_REG	include/port.h	6;"	d
TIMER_FREG	include/time.h	5;"	d
TIMER_MODE_REG	include/port.h	7;"	d
TRIM_FLAGS	Makefile	/^TRIM_FLAGS=-R .pdr -R .comment -R .note -S -O binary $/;"	m
TRUE	include/const.h	9;"	d
TSS	include/protect.h	/^}TSS;$/;"	t	typeref:struct:tss
TTY	include/tty.h	/^}TTY;$/;"	t	typeref:struct:tty
TTY_IN_BYTES	include/tty.h	5;"	d
TTY_OUT_BUF_LEN	include/tty.h	6;"	d
TestA	kernel/main.c	/^void TestA()$/;"	f
TestB	kernel/main.c	/^void TestB()$/;"	f
TestC	kernel/main.c	/^void TestC()$/;"	f
UNLINK	include/proc.h	/^	OPEN,CLOSE,READ,WRITE,LSEEK,STAT,UNLINK,$/;"	e	enum:msgtype
UP	include/keyboard.h	68;"	d
V_MEM_BASE	include/console.h	13;"	d
V_MEM_SIZE	include/console.h	14;"	d
WAIT	include/proc.h	/^	EXEC,WAIT,$/;"	e	enum:msgtype
WAITING	include/proc.h	33;"	d
WAKE	include/keyboard.h	76;"	d
WHENCE	include/proc.h	149;"	d
WHITE	include/console.h	5;"	d
WRITE	include/proc.h	/^	OPEN,CLOSE,READ,WRITE,LSEEK,STAT,UNLINK,$/;"	e	enum:msgtype
WR_SECT	include/fs.h	224;"	d
XT_WINI_IRQ	include/i8259.h	16;"	d
ZONE_ALL_SECTS	include/fs.h	41;"	d
ZONE_DATA_SECTS	include/fs.h	38;"	d
ZONE_DATA_SIZE	include/fs.h	37;"	d
ZONE_IMAP_SECTS	include/fs.h	39;"	d
ZONE_METE_SECTS	include/fs.h	40;"	d
_ARDStruct	boot/loader.S	/^_ARDStruct:$/;"	l
_C	include/ctype.h	7;"	d
_CONSOLE_H_	include/console.h	2;"	d
_CONST_H_	include/const.h	2;"	d
_CTYPE_H	include/ctype.h	2;"	d
_D	include/ctype.h	6;"	d
_ERRNO_H	include/errno.h	2;"	d
_FCNTL_	include/lib/fcntl.h	2;"	d
_I8259_	include/i8259.h	2;"	d
_KEYBOARD_H_	include/keyboard.h	2;"	d
_KEYMAP_H_	include/keymap.h	2;"	d
_L	include/ctype.h	5;"	d
_MemChkBuf	boot/loader.S	/^_MemChkBuf:		.fill	256$/;"	l
_ORANGES_FS_H_	include/fs.h	2;"	d
_ORANGES_HD_H_	include/hd.h	2;"	d
_P	include/ctype.h	8;"	d
_PORT_H_	include/port.h	2;"	d
_PROC_H_	include/proc.h	2;"	d
_PROTECT_H_	include/protect.h	2;"	d
_PROTO_H_	include/proto.h	2;"	d
_PTRDIFF_T	include/stddef.h	5;"	d
_S	include/ctype.h	9;"	d
_SCHED_	include/sched.h	2;"	d
_SCONST_H_	include/sconst.h	2;"	d
_SIZE_T	include/stddef.h	10;"	d
_SIZE_T	include/string.h	9;"	d
_SP	include/ctype.h	11;"	d
_STDARG_H	include/stdarg.h	2;"	d
_STDDEF_H	include/stddef.h	2;"	d
_STDIO_	include/lib/stdio.h	2;"	d
_STRING_H_	include/string.h	2;"	d
_TIME_	include/time.h	2;"	d
_TTY_H_	include/tty.h	2;"	d
_TYPE_H_	include/type.h	2;"	d
_U	include/ctype.h	4;"	d
_X	include/ctype.h	10;"	d
__va_rounded_size	include/stdarg.h	9;"	d
_ctmp	lib/ctype.c	/^char _ctmp;$/;"	v
_ctype	lib/ctype.c	/^unsigned char _ctype[] = {0x00,			\/* EOF *\/$/;"	v
_dwBaseAddrHigh	boot/loader.S	/^	_dwBaseAddrHigh:	.4byte	0$/;"	l
_dwBaseAddrLow	boot/loader.S	/^	_dwBaseAddrLow:		.4byte	0$/;"	l
_dwDispPos	boot/loader.S	/^_dwDispPos:		.4byte	(80 *6 ) *2$/;"	l
_dwLengthHigh	boot/loader.S	/^	_dwLengthHigh:		.4byte	0$/;"	l
_dwLengthLow	boot/loader.S	/^	_dwLengthLow:		.4byte	0$/;"	l
_dwMCRNumber	boot/loader.S	/^_dwMCRNumber:	.4byte	0$/;"	l
_dwMemSize	boot/loader.S	/^_dwMemSize:		.4byte	0$/;"	l
_dwType	boot/loader.S	/^	_dwType:			.byte	0$/;"	l
_hashfn	fs/buffer.c	11;"	d	file:
_set_gate	include/asm/system.h	22;"	d
_set_seg_desc	include/asm/system.h	42;"	d
_set_tssldt_desc	include/asm/system.h	52;"	d
_start	cmd/start.s	/^_start:$/;"	l
_start	kernel/kernel.S	/^_start:$/;"	l
_szMemChkTitle	boot/loader.S	/^_szMemChkTitle:	.asciz	"BaseAddrL  BaseAddrH  LengthLow  LengthHigh  Type\\n"$/;"	l
_szRAMSize	boot/loader.S	/^_szRAMSize:		.asciz	"RAM size:"$/;"	l
_szReturn	boot/loader.S	/^_szReturn:		.byte	0x0a,0$/;"	l
ah	boot/include/pm.h	/^	movb	%ah,(\\SegDesc +7)$/;"	v
al	boot/include/lib.h	/^	mov		%al,%dl$/;"	v
al	boot/include/lib.h	/^	mov		%al,%es:(%edi)$/;"	v
al	boot/include/lib.h	/^	test	%al,%al$/;"	v
al	boot/include/pm.h	/^	movb	%al,(\\SegDesc +4)$/;"	v
alloc_mem	mm/mm.c	/^int alloc_mem( int pid, int memsize )$/;"	f
alloc_memery_inode	fs/inode.c	/^static struct m_inode *alloc_memery_inode( )$/;"	f	file:
alt_l	kernel/keyboard.c	/^static int alt_l;$/;"	v	file:
alt_r	kernel/keyboard.c	/^static int alt_r;$/;"	v	file:
assert	include/const.h	30;"	d
assert	include/const.h	33;"	d
assertion_failure	lib/misc.c	/^void  assertion_failure(char *exp,char *file,char *base_file,int line)$/;"	f
atime	include/fs.h	/^	u64 atime;$/;"	m	struct:m_inode
attr	include/protect.h	/^	u8  attr;$/;"	m	struct:gate
attr1	include/protect.h	/^	u8	attr1;$/;"	m	struct:descriptor
ax	boot/include/lib.h	/^	mov		%ax,%gs:(%edi)$/;"	v
ax	boot/include/pm.h	/^	movw	%ax,(\\SegDesc +2)$/;"	v
b1	lib/kliba.s	/^b1:	$/;"	l
b2	lib/kliba.s	/^b2:$/;"	l
bOdd	boot/boot.S	/^bOdd:                   .byte   0       \/* odd or even? *\/$/;"	l
bOdd	boot/loader.S	/^bOdd:		.byte	0$/;"	l
backlink	include/protect.h	/^	u32 backlink;$/;"	m	struct:tss
base	include/hd.h	/^	u32 base;$/;"	m	struct:part_info
base_high	include/protect.h	/^	u8	base_high;$/;"	m	struct:descriptor
base_low	include/protect.h	/^	u16	base_low;$/;"	m	struct:descriptor
base_mid	include/protect.h	/^	u8	base_mid;$/;"	m	struct:descriptor
bdirty	fs/buffer.c	/^void bdirty( struct buffer_head *bh )$/;"	f
bitmap	include/fs.h	/^	u64 bitmap;$/;"	m	struct:d_inode
bitmap	include/fs.h	/^	u64 bitmap;$/;"	m	struct:m_inode
block	kernel/proc.c	/^static void block(struct proc *p)$/;"	f	file:
block_size	include/fs.h	/^	u32 block_size; \/\/1,2,4,...$/;"	m	struct:d_block_table_entry
blocknr	include/fs.h	/^	u64	 blocknr;$/;"	m	struct:buffer_head
boot_ind	include/hd.h	/^	u8 boot_ind;		$/;"	m	struct:part_ent
bounds_check	kernel/kernel.S	/^bounds_check:$/;"	l
bread	fs/buffer.c	/^struct buffer_head *bread( int dev, int block, int size )$/;"	f
breakpoint_exception	kernel/kernel.S	/^breakpoint_exception:$/;"	l
brelse	fs/buffer.c	/^void brelse( struct buffer_head *bh )$/;"	f
btree_find	fs/b_tree.c	/^int btree_find( struct m_inode *inode, char *name )$/;"	f
btree_find_pos	fs/b_tree.c	/^static int btree_find_pos( struct d_btree_node *p_bnode, u32 key )$/;"	f	file:
btree_init	fs/b_tree.c	/^static struct d_btree_node *btree_init( struct buffer_head *bh )$/;"	f	file:
btree_insert	fs/b_tree.c	/^int btree_insert( struct m_inode *inode, const char *name, u32 inode_num )$/;"	f
btree_new_root	fs/b_tree.c	/^struct d_btree_node *btree_new_root( struct buffer_head *bh, struct d_name_value_pair *pkv, int num )$/;"	f
btree_remove	fs/b_tree.c	/^int btree_remove( struct m_inode *inode, char *name )$/;"	f
buf	include/keyboard.h	/^	char	buf[KB_IN_BYTES];	\/* 缓冲区 *\/$/;"	m	struct:s_kb
buffer_head	include/fs.h	/^struct buffer_head{$/;"	s
buffer_num	fs/buffer.c	/^int buffer_num[NR_BUFFER]  = { 0 };$/;"	v
buffer_size	fs/buffer.c	/^int buffer_size[NR_BUFFER];$/;"	v
buffer_start	fs/buffer.c	/^void * buffer_start = (void *)K_MEMORY_BEGIN ;$/;"	v
bwrite	fs/buffer.c	/^int bwrite( struct buffer_head *bh )$/;"	f
caps_lock	kernel/keyboard.c	/^static int caps_lock;$/;"	v	file:
cleanup	mm/fork.c	/^static void cleanup( struct proc *proc )$/;"	f	file:
clear_map	fs/k_memory.c	/^static void clear_map( void *p )$/;"	f	file:
clear_screen	kernel/console.c	/^void clear_screen(int pos, int len) $/;"	f
cli	include/asm/system.h	17;"	d
clock_handler	kernel/time.c	/^void clock_handler(int irq)$/;"	f
close	lib/close.c	/^int close(int fd)$/;"	f
clr_imap_bit	fs/inode.c	/^static int clr_imap_bit( struct d_block_table_entry *bt, struct m_inode *inode )$/;"	f	file:
code_with_E0	kernel/keyboard.c	/^static int code_with_E0=0;$/;"	v	file:
column	kernel/keyboard.c	/^static int column;$/;"	v	file:
command	include/hd.h	/^	u8	command;$/;"	m	struct:hd_cmd
console	include/console.h	/^typedef struct console$/;"	s
console_table	kernel/console.c	/^CONSOLE console_table[NR_CONSOLES];$/;"	v
copr_error	kernel/kernel.S	/^copr_error:$/;"	l
copr_not_available	kernel/kernel.S	/^copr_not_available:$/;"	l
copr_seg_overrun	kernel/kernel.S	/^copr_seg_overrun:$/;"	l
count	include/fs.h	/^	u8	count;$/;"	m	struct:m_inode
count	include/fs.h	/^	u8   count;$/;"	m	struct:buffer_head
count	include/hd.h	/^	u8	count;$/;"	m	struct:hd_cmd
count	include/keyboard.h	/^	int	count;			\/* 缓冲区中共有多少字节 *\/$/;"	m	struct:s_kb
cr3	include/protect.h	/^	u32 cr3;$/;"	m	struct:tss
create_file	fs/open.c	/^static struct m_inode *create_file( char *name, int dev, int dir_inode_nr, int size )$/;"	f	file:
crypt_table	fs/b_tree.c	/^u32 crypt_table[0x500];$/;"	v
cs	boot/include/pm.h	/^	mov		%cs,%eax$/;"	v
cs	include/proc.h	/^	u32 cs;$/;"	m	struct:stackframe
cs	include/protect.h	/^	u32 cs;$/;"	m	struct:tss
csinit	kernel/kernel.S	/^csinit:$/;"	l
cstart	kernel/start.c	/^void cstart()$/;"	f
ctime	include/fs.h	/^	u64 ctime;$/;"	m	struct:m_inode
ctrl_l	kernel/keyboard.c	/^static int ctrl_l;$/;"	v	file:
ctrl_r	kernel/keyboard.c	/^static int ctrl_r;$/;"	v	file:
current_proc	include/sched.h	7;"	d
current_start_addr	include/console.h	/^	u32 current_start_addr;$/;"	m	struct:console
cursor	include/console.h	/^	u32 cursor;$/;"	m	struct:console
d_block_table_entry	include/fs.h	/^struct d_block_table_entry{$/;"	s
d_btree_node	include/fs.h	/^struct d_btree_node{$/;"	s
d_inode	include/fs.h	/^struct d_inode {$/;"	s
d_key_value_pair	include/fs.h	/^struct d_key_value_pair{$/;"	s
d_name_value_pair	include/fs.h	/^struct d_name_value_pair{$/;"	s
d_super_block	include/fs.h	/^struct d_super_block {$/;"	s
dcount	include/protect.h	/^	u8  dcount;$/;"	m	struct:gate
dd_map	fs/fs.c	/^struct dev_drv_map dd_map[] = {$/;"	v	typeref:struct:dev_drv_map
deadlock	kernel/proc.c	/^static int deadlock(int src,int dest)$/;"	f	file:
delete_inode	fs/inode.c	/^int delete_inode( struct m_inode *inode )$/;"	f
descriptor	include/protect.h	/^typedef	struct descriptor$/;"	s
dev	include/fs.h	/^	u16  dev;$/;"	m	struct:buffer_head
dev	include/fs.h	/^	u16 dev;$/;"	m	struct:m_inode
dev	include/fs.h	/^	u32 dev;$/;"	m	struct:d_block_table_entry
dev_drv_map	include/fs.h	/^struct dev_drv_map {$/;"	s
device	include/hd.h	/^	u8	device;$/;"	m	struct:hd_cmd
dirt	include/fs.h	/^	u8   dirt;$/;"	m	struct:buffer_head
dirt	include/fs.h	/^	u8  dirt;$/;"	m	struct:m_inode
dirt	include/fs.h	/^	u8  dirt;$/;"	m	struct:m_super_block
dis_already	lib/kliba.s	/^dis_already:	$/;"	l
disable_0	lib/kliba.s	/^disable_0:$/;"	l
disable_8	lib/kliba.s	/^disable_8:$/;"	l
disable_int	lib/kliba.s	/^disable_int:$/;"	l
disable_irq	lib/kliba.s	/^disable_irq:$/;"	l
disp_al	lib/kliba.s	/^disp_al:$/;"	l
disp_color_str	lib/kliba.s	/^disp_color_str:$/;"	l
disp_int	lib/kliba.s	/^disp_int:$/;"	l
disp_pos	kernel/console.c	/^int disp_pos;$/;"	v
disp_str	lib/kliba.s	/^disp_str:$/;"	l
divide_error	kernel/kernel.S	/^divide_error:$/;"	l
dl	boot/include/lib.h	/^	mov		%dl,%al$/;"	v
do_btree_find	fs/b_tree.c	/^static int do_btree_find( struct m_inode *inode, struct d_btree_node *p_bnode, int level, int key )$/;"	f	file:
do_btree_insert	fs/b_tree.c	/^static int do_btree_insert( struct m_inode *inode, struct d_btree_node *p_bnode, int level, u32 key, u32 inode_num )$/;"	f	file:
do_btree_remove	fs/b_tree.c	/^static int do_btree_remove( struct m_inode *inode, struct d_btree_node *p_bnode, int level, int key )$/;"	f	file:
do_btree_split	fs/b_tree.c	/^static int do_btree_split( struct m_inode *inode, struct d_btree_node *p_bnode)$/;"	f	file:
do_btree_split_root	fs/b_tree.c	/^static int do_btree_split_root( struct m_inode *inode, struct d_btree_node *p_bnode )$/;"	f	file:
do_close	fs/open.c	/^int do_close( MESSAGE *msg )$/;"	f
do_exec	mm/exec.c	/^int do_exec( MESSAGE *msg )$/;"	f
do_exit	mm/fork.c	/^void do_exit( MESSAGE *msg, int status )$/;"	f
do_fork	mm/fork.c	/^int do_fork( MESSAGE *msg )$/;"	f
do_open	fs/open.c	/^int do_open( MESSAGE *msg )$/;"	f
do_rdwr	fs/read_write.c	/^int do_rdwr( MESSAGE *msg )$/;"	f
do_unlink	fs/link.c	/^int do_unlink( int src, int name, int name_len)$/;"	f
do_wait	mm/fork.c	/^void do_wait( MESSAGE *msg)$/;"	f
double_fault	kernel/kernel.S	/^double_fault:$/;"	l
driver_nr	include/fs.h	/^	int driver_nr; \/**< The proc nr.\\ of the device driver. *\/$/;"	m	struct:dev_drv_map
ds	include/proc.h	/^	u32 ds;$/;"	m	struct:stackframe
ds	include/protect.h	/^	u32 ds;$/;"	m	struct:tss
dump_msg	kernel/proc.c	/^void dump_msg(const char * title, MESSAGE* m)$/;"	f
dump_proc	kernel/proc.c	/^void dump_proc(struct proc* p)$/;"	f
dwKernelSize	boot/loader.S	/^dwKernelSize:	.4byte	0$/;"	l
eax	boot/include/lib.h	/^	mov		%eax,%edi$/;"	v
eax	boot/include/pm.h	/^	xor		%eax,%eax$/;"	v
eax	include/proc.h	/^	u32 eax;$/;"	m	struct:stackframe
eax	include/protect.h	/^	u32 eax;$/;"	m	struct:tss
ebp	boot/include/lib.h	/^	mov		%ebp,%esp$/;"	v
ebp	include/proc.h	/^	u32 ebp;$/;"	m	struct:stackframe
ebp	include/protect.h	/^	u32 ebp;$/;"	m	struct:tss
ebx	include/proc.h	/^	u32 ebx;$/;"	m	struct:stackframe
ebx	include/protect.h	/^	u32 ebx;$/;"	m	struct:tss
ecx	include/proc.h	/^	u32 ecx;$/;"	m	struct:stackframe
ecx	include/protect.h	/^	u32 ecx;$/;"	m	struct:tss
edi	boot/include/lib.h	/^	mov		%edi,%eax$/;"	v
edi	boot/include/lib.h	/^	mov		%edi,(dwDispPos)$/;"	v
edi	include/proc.h	/^	u32 edi;$/;"	m	struct:stackframe
edi	include/protect.h	/^	u32 edi;$/;"	m	struct:tss
edx	include/proc.h	/^	u32 edx;$/;"	m	struct:stackframe
edx	include/protect.h	/^	u32 edx;$/;"	m	struct:tss
eflags	include/proc.h	/^	u32 eflags;$/;"	m	struct:stackframe
eip	include/proc.h	/^	u32 eip;$/;"	m	struct:stackframe
eip	include/protect.h	/^	u32 eip;$/;"	m	struct:tss
enable_0	lib/kliba.s	/^enable_0:$/;"	l
enable_8	lib/kliba.s	/^enable_8:$/;"	l
enable_int	lib/kliba.s	/^enable_int:$/;"	l
enable_irq	lib/kliba.s	/^enable_irq:$/;"	l
end_cyl	include/hd.h	/^	u8 end_cyl;		$/;"	m	struct:part_ent
end_head	include/hd.h	/^	u8 end_head;$/;"	m	struct:part_ent
end_sector	include/hd.h	/^	u8 end_sector;		$/;"	m	struct:part_ent
es	include/proc.h	/^	u32 es;$/;"	m	struct:stackframe
es	include/protect.h	/^	u32 es;$/;"	m	struct:tss
esi	include/proc.h	/^	u32 esi;$/;"	m	struct:stackframe
esi	include/protect.h	/^	u32 esi;$/;"	m	struct:tss
esp	boot/include/lib.h	/^	mov		%esp,%ebp$/;"	v
esp	include/proc.h	/^	u32 esp;$/;"	m	struct:stackframe
esp	include/protect.h	/^	u32 esp;$/;"	m	struct:tss
esp0	include/protect.h	/^	u32 esp0;$/;"	m	struct:tss
esp1	include/protect.h	/^	u32 esp1;$/;"	m	struct:tss
esp2	include/protect.h	/^	u32 esp2;$/;"	m	struct:tss
exception	kernel/kernel.S	/^exception:$/;"	l
exception_handler	kernel/protect.c	/^void exception_handler(int vec_no,int err_code,int eip,int cs,int eflags)$/;"	f
execl	lib/exec.c	/^int execl( const char *path, const char *arg, ... )$/;"	f
execv	lib/exec.c	/^int execv( const char *path, char *argv[] )$/;"	f
exit	lib/exit.c	/^void exit(int status)$/;"	f
exit_status	include/proc.h	/^	int exit_status;$/;"	m	struct:proc
extern	lib/string.c	1;"	d	file:
f	Makefile	/^	dd if=boot\/boot.bin of=image bs=512 count=1 conv=notrunc$/;"	m
f	Makefile	/^	dd if=cmd\/hello of=c.img seek=17580544 bs=1 count=32k conv=notrunc$/;"	m
f	Makefile	/^	dd if=cmd\/hello of=c.img seek=17613312 bs=1 count=32k conv=notrunc$/;"	m
fd_count	include/fs.h	/^	u32		fd_count;$/;"	m	struct:file_desc
fd_flags	include/fs.h	/^	u32		fd_flags;$/;"	m	struct:file_desc
fd_inode	include/fs.h	/^	struct m_inode*	fd_inode;	\/**< Ptr to the i-node *\/$/;"	m	struct:file_desc	typeref:struct:file_desc::m_inode
fd_mode	include/fs.h	/^	u32		fd_mode;	\/**< R or W *\/$/;"	m	struct:file_desc
fd_pos	include/fs.h	/^	u32		fd_pos;		\/**< Current position for R\/W. *\/$/;"	m	struct:file_desc
features	include/hd.h	/^	u8	features;$/;"	m	struct:hd_cmd
file_desc	include/fs.h	/^struct file_desc {$/;"	s
file_desc_table	fs/fs.c	/^struct file_desc file_desc_table[NR_FILE_DESC];$/;"	v	typeref:struct:file_desc
filp	include/proc.h	/^	struct file_desc *filp[NR_FILES];$/;"	m	struct:proc	typeref:struct:proc::file_desc
find_buffer	fs/buffer.c	/^static struct buffer_head *find_buffer( int dev, int block, int size )$/;"	f	file:
find_entry	fs/namei.c	/^int find_entry( char *path_name, char **file_name, int *dir_inode_nr )$/;"	f
find_file_in_dir	fs/namei.c	/^int find_file_in_dir( char *name, int dev, int dir_inode_nr )$/;"	f
find_next_free	fs/k_memory.c	/^static void *find_next_free( void *p )$/;"	f	file:
first_block_table_sect	include/fs.h	/^	u32	first_block_table_sect;	  \/**< Number of the 1st data sector *\/$/;"	m	struct:d_super_block
first_block_table_sect	include/fs.h	/^	u32 first_block_table_sect;$/;"	m	struct:m_super_block
first_inode_num	include/fs.h	/^	u32 first_inode_num;$/;"	m	struct:d_block_table_entry
flags	include/proc.h	/^	int flags;$/;"	m	struct:proc
flags	include/protect.h	/^	u32 flags;$/;"	m	struct:tss
flush	kernel/console.c	/^static void flush(CONSOLE* p_con)$/;"	f	file:
fork	lib/fork.c	/^int fork()$/;"	f
free_inode	fs/inode.c	/^static void free_inode( struct m_inode *inode )$/;"	f	file:
free_inode_num	include/fs.h	/^	u32 free_inode_num;$/;"	m	struct:d_block_table_entry
free_list	fs/buffer.c	/^static struct buffer_head *free_list[NR_BUFFER];$/;"	v	typeref:struct:buffer_head	file:
free_mem	mm/mm.c	/^int free_mem( int pid )$/;"	f
free_memery_inode	fs/inode.c	/^static void free_memery_inode( struct m_inode *inode )$/;"	f	file:
free_super_block	fs/super.c	/^void free_super_block( int dev )$/;"	f
fs	include/proc.h	/^	u32 fs;$/;"	m	struct:stackframe
fs	include/protect.h	/^	u32 fs;$/;"	m	struct:tss
fs_exit	fs/fs.c	/^static int fs_exit( MESSAGE *msg )$/;"	f	file:
fs_fork	fs/fs.c	/^static int fs_fork( MESSAGE *msg )$/;"	f	file:
gate	include/protect.h	/^typedef struct gate$/;"	s
gdt	kernel/protect.c	/^DESCRIPTOR gdt[GDT_SIZE];$/;"	v
gdt_ptr	kernel/protect.c	/^u8 gdt_ptr[6];$/;"	v
general_protection	kernel/kernel.S	/^general_protection:$/;"	l
get_block_table	fs/block_table.c	/^struct d_block_table_entry *get_block_table( int dev, int size, int n )$/;"	f
get_block_table_from_nr	fs/inode.c	/^static struct d_block_table_entry *get_block_table_from_nr( int dev, int nr )$/;"	f	file:
get_byte_from_kbuf	kernel/keyboard.c	/^static u8 get_byte_from_kbuf()$/;"	f	file:
get_ds	include/asm/segment.h	/^extern inline unsigned long get_ds() $/;"	f
get_from_hash_table	fs/buffer.c	/^struct buffer_head *get_from_hash_table( int dev, int block, int size )$/;"	f
get_fs	include/asm/segment.h	/^extern inline unsigned long get_fs() $/;"	f
get_fs_byte	include/asm/segment.h	/^extern inline unsigned char get_fs_byte(const char * addr)$/;"	f
get_fs_long	include/asm/segment.h	/^extern inline unsigned long get_fs_long(const unsigned long *addr)$/;"	f
get_fs_word	include/asm/segment.h	/^extern inline unsigned short get_fs_word(const unsigned short *addr)$/;"	f
get_inode	fs/inode.c	/^struct m_inode *get_inode( int dev, int nr )$/;"	f
get_inode_data	fs/inode.c	/^struct buffer_head *get_inode_data( int dev, int nr )$/;"	f
get_inode_empty_sector	fs/b_tree.c	/^static int get_inode_empty_sector( struct m_inode *inode )$/;"	f	file:
get_inode_info_from_nr	fs/inode.c	/^static void get_inode_info_from_nr( struct m_inode *inode, int dev, int nr )$/;"	f	file:
get_inode_itable	fs/inode.c	/^static struct d_inode *get_inode_itable( int dev, int nr )$/;"	f	file:
get_part_table	kernel/hd.c	/^static void get_part_table( int drive, int sect_nr, struct part_ent *entry )$/;"	f	file:
get_super_block	fs/super.c	/^struct m_super_block *get_super_block( int dev )$/;"	f
get_ticks	kernel/time.c	/^int get_ticks()$/;"	f
getblk	fs/buffer.c	/^struct buffer_head *getblk( int dev, int block, int size )$/;"	f
getpid	lib/getpid.c	/^int getpid()$/;"	f
gid	include/fs.h	/^	u32 gid;$/;"	m	struct:d_inode
gid	include/fs.h	/^	u32 gid;$/;"	m	struct:m_inode
gs	include/proc.h	/^	u32 gs;$/;"	m	struct:stackframe
gs	include/protect.h	/^	u32 gs;$/;"	m	struct:tss
has_int_msg	include/proc.h	/^	int has_int_msg;$/;"	m	struct:proc
hash	fs/buffer.c	12;"	d	file:
hash_string	fs/b_tree.c	/^u32 hash_string( char *name, u8 hash_type )$/;"	f
hash_table	fs/buffer.c	/^struct buffer_head *hash_table[NR_HASH*NR_BUFFER];$/;"	v	typeref:struct:buffer_head
hd_close	kernel/hd.c	/^static void hd_close( int device )$/;"	f	file:
hd_cmd	include/hd.h	/^struct hd_cmd {$/;"	s
hd_cmd_out	kernel/hd.c	/^static void hd_cmd_out(struct hd_cmd* cmd)$/;"	f	file:
hd_handler	kernel/hd.c	/^void hd_handler(int irq)$/;"	f
hd_identify	kernel/hd.c	/^static void hd_identify(int drive)$/;"	f	file:
hd_info	include/hd.h	/^typedef struct hd_info{$/;"	s
hd_info	kernel/hd.c	/^static HD_INFO hd_info[1];$/;"	v	file:
hd_ioctl	kernel/hd.c	/^static void hd_ioctl( MESSAGE *p)$/;"	f	file:
hd_open	kernel/hd.c	/^static void hd_open( int device )$/;"	f	file:
hd_rdwt	kernel/hd.c	/^static void hd_rdwt( MESSAGE *p )$/;"	f	file:
hd_status	kernel/hd.c	/^static	u8	hd_status;$/;"	v	file:
hdbuf	kernel/hd.c	/^static	u8	hdbuf[SECTOR_SIZE * 2];$/;"	v	file:
hwint00	kernel/kernel.S	/^hwint00:    $/;"	l
hwint01	kernel/kernel.S	/^hwint01:                # Interrupt routine for irq 1 (keyboard)$/;"	l
hwint02	kernel/kernel.S	/^hwint02:                #Interrupt routine for irq 2 (cascade!)$/;"	l
hwint03	kernel/kernel.S	/^hwint03:                # Interrupt routine for irq 3 (second serial)$/;"	l
hwint04	kernel/kernel.S	/^hwint04:                # Interrupt routine for irq 4 (first serial)$/;"	l
hwint05	kernel/kernel.S	/^hwint05:                # Interrupt routine for irq 5 (XT winchester)$/;"	l
hwint06	kernel/kernel.S	/^hwint06:                # Interrupt routine for irq 6 (floppy)$/;"	l
hwint07	kernel/kernel.S	/^hwint07:                # Interrupt routine for irq 7 (printer)$/;"	l
hwint08	kernel/kernel.S	/^hwint08:                # Interrupt routine for irq 8 (realtime clock).$/;"	l
hwint09	kernel/kernel.S	/^hwint09:                # Interrupt routine for irq 9 (irq 2 redirected)$/;"	l
hwint10	kernel/kernel.S	/^hwint10:                # Interrupt routine for irq 10$/;"	l
hwint11	kernel/kernel.S	/^hwint11:                # Interrupt routine for irq 11$/;"	l
hwint12	kernel/kernel.S	/^hwint12:                # Interrupt routine for irq 12$/;"	l
hwint13	kernel/kernel.S	/^hwint13:                # Interrupt routine for irq 13 (FPU exception)$/;"	l
hwint14	kernel/kernel.S	/^hwint14:                # Interrupt routine for irq 14 (AT winchester)$/;"	l
hwint15	kernel/kernel.S	/^hwint15:                # Interrupt routine for irq 15$/;"	l
i2a	lib/vsprintf.c	/^static char *i2a(int val,int base,char **ps)$/;"	f	file:
idt	kernel/protect.c	/^GATE idt[IDT_SIZE];$/;"	v
idt_ptr	kernel/protect.c	/^u8	idt_ptr[6];$/;"	v
imap	include/fs.h	/^	struct buffer_head *imap[8];$/;"	m	struct:m_super_block	typeref:struct:m_super_block::buffer_head
in_buf	include/tty.h	/^	u32 in_buf[TTY_IN_BYTES];$/;"	m	struct:tty
in_byte	lib/kliba.s	/^in_byte:$/;"	l
in_process	kernel/tty.c	/^void in_process(TTY* p_tty,u32 key)$/;"	f
inb	include/asm/io.h	5;"	d
inb_p	include/asm/io.h	17;"	d
inbuf_count	include/tty.h	/^	int inbuf_count;$/;"	m	struct:tty
inform_int	kernel/proc.c	/^void inform_int(int task_nr)$/;"	f
init_8259A	kernel/i8259.c	/^void init_8259A()$/;"	f
init_buffer	fs/buffer.c	/^void init_buffer( u32 buffer_end )$/;"	f
init_clock	kernel/time.c	/^void init_clock()$/;"	f
init_descriptor	kernel/protect.c	/^void init_descriptor(DESCRIPTOR* p_desc,u32 base,u32 limit,u16 attribute)$/;"	f
init_fs	fs/fs.c	/^static void init_fs()$/;"	f	file:
init_hash	fs/b_tree.c	/^void init_hash()$/;"	f
init_hd	kernel/hd.c	/^static void init_hd()$/;"	f	file:
init_idt_desc	kernel/protect.c	/^static void init_idt_desc(unsigned char vector, u8 desc_type,$/;"	f	file:
init_keyboard	kernel/keyboard.c	/^void init_keyboard()$/;"	f
init_proc	kernel/proc.c	/^void init_proc()$/;"	f
init_protect	kernel/protect.c	/^void init_protect()$/;"	f
init_screen	kernel/console.c	/^void init_screen(TTY* p_tty)$/;"	f
init_tty	kernel/tty.c	/^static void init_tty(TTY* p_tty)$/;"	f	file:
initial_eip	include/proc.h	/^	task_f initial_eip;$/;"	m	struct:task
inline	lib/string.c	2;"	d	file:
inode_count	include/fs.h	/^	u32 inode_count;$/;"	m	struct:d_block_table_entry
inode_num	include/fs.h	/^	u32 inode_num;$/;"	m	struct:m_inode
inode_table	fs/inode.c	/^struct m_inode inode_table[NR_INODE];$/;"	v	typeref:struct:m_inode
insert_into_queues	fs/buffer.c	/^static inline void insert_into_queues( struct buffer_head *bh )$/;"	f	file:
insert_pair	fs/b_tree.c	/^static int insert_pair( struct d_btree_node *p_bnode, u32 key, u32 value )$/;"	f	file:
int_handler	include/type.h	/^typedef void (* int_handler) ();$/;"	t
interrupt_wait	kernel/hd.c	/^static void interrupt_wait()$/;"	f	file:
inval_opcode	kernel/kernel.S	/^inval_opcode:$/;"	l
inval_tss	kernel/kernel.S	/^inval_tss:$/;"	l
invalidate_inode	fs/inode.c	/^void invalidate_inode( int dev )$/;"	f
iobase	include/protect.h	/^	u16 iobase;$/;"	m	struct:tss
iret	include/asm/system.h	20;"	d
irq_handler	include/type.h	/^typedef void (* irq_handler)(int irq);$/;"	t
irq_table	kernel/i8259.c	/^irq_handler irq_table[NR_IRQ];$/;"	v
is_current_console	kernel/console.c	/^int is_current_console(CONSOLE* p_con)$/;"	f
is_special	include/const.h	59;"	d
isalnum	include/ctype.h	16;"	d
isalpha	include/ctype.h	17;"	d
isascii	include/ctype.h	28;"	d
iscntrl	include/ctype.h	18;"	d
isdigit	include/ctype.h	19;"	d
isgraph	include/ctype.h	20;"	d
islower	include/ctype.h	21;"	d
isprint	include/ctype.h	22;"	d
ispunct	include/ctype.h	23;"	d
isroot	include/fs.h	/^	u8  isroot;$/;"	m	struct:d_btree_node
isspace	include/ctype.h	24;"	d
isupper	include/ctype.h	25;"	d
isxdigit	include/ctype.h	26;"	d
k_reenter	kernel/proc.c	/^int k_reenter = 0;$/;"	v
kb_ack	kernel/keyboard.c	/^static void kb_ack()$/;"	f	file:
kb_in	kernel/keyboard.c	/^static KB_INPUT kb_in;$/;"	v	file:
kb_wait	kernel/keyboard.c	/^static void kb_wait()$/;"	f	file:
kernel_esp	include/proc.h	/^	u32 kernel_esp;$/;"	m	struct:stackframe
kernel_main	kernel/main.c	/^int kernel_main()$/;"	f
key	include/fs.h	/^	u32 key;$/;"	m	struct:d_key_value_pair
key_pressed	kernel/tty.c	/^int key_pressed = 0;$/;"	v
keyboard_handler	kernel/keyboard.c	/^void keyboard_handler(int irq)$/;"	f
keyboard_read	kernel/keyboard.c	/^void keyboard_read(TTY* p_tty)$/;"	f
keymap	include/keymap.h	/^u32 keymap[NR_SCAN_CODES * MAP_COLS] = {$/;"	v
kfree	fs/k_memory.c	/^void kfree( void* p )$/;"	f
km_map	fs/k_memory.c	/^static u32 km_map[K_MEMORY_SECTS\/32] = { 0 };$/;"	v	file:
kmalloc	fs/k_memory.c	/^void *kmalloc( int size )$/;"	f
kv	include/fs.h	/^	struct d_key_value_pair kv[63];$/;"	m	struct:d_btree_node	typeref:struct:d_btree_node::d_key_value_pair
lba_high	include/hd.h	/^	u8	lba_high;$/;"	m	struct:hd_cmd
lba_low	include/hd.h	/^	u8	lba_low;$/;"	m	struct:hd_cmd
lba_mid	include/hd.h	/^	u8	lba_mid;$/;"	m	struct:hd_cmd
ldt	include/protect.h	/^	u32 ldt;$/;"	m	struct:tss
ldt_seg_linear	kernel/proc.c	/^int ldt_seg_linear(struct proc *p,int idx)$/;"	f
ldt_sel	include/proc.h	/^	u16 ldt_sel;$/;"	m	struct:proc
level	include/fs.h	/^	u16 level;$/;"	m	struct:d_btree_node
limit_high_attr2	include/protect.h	/^	u8	limit_high_attr2;$/;"	m	struct:descriptor
limit_low	include/protect.h	/^	u16	limit_low;$/;"	m	struct:descriptor
lock	include/fs.h	/^	u8   lock;$/;"	m	struct:buffer_head
lock	include/fs.h	/^	u8  lock;$/;"	m	struct:m_inode
logical	include/hd.h	/^	PART_INFO logical[NR_SUB_PER_DRIVE];$/;"	m	struct:hd_info
m1	include/type.h	/^		struct mess1 m1;$/;"	m	union:__anon1::__anon2	typeref:struct:__anon1::__anon2::mess1
m2	include/type.h	/^		struct mess2 m2;$/;"	m	union:__anon1::__anon2	typeref:struct:__anon1::__anon2::mess2
m2p1	include/type.h	/^	void *m2p1;$/;"	m	struct:mess2
m2p2	include/type.h	/^	void *m2p2;$/;"	m	struct:mess2
m2p3	include/type.h	/^	void *m2p3;$/;"	m	struct:mess2
m2p4	include/type.h	/^	void *m2p4;$/;"	m	struct:mess2
m3	include/type.h	/^		struct mess3 m3;$/;"	m	union:__anon1::__anon2	typeref:struct:__anon1::__anon2::mess3
m3i1	include/type.h	/^	int m3i1;$/;"	m	struct:mess3
m3i2	include/type.h	/^	int m3i2;$/;"	m	struct:mess3
m3i3	include/type.h	/^	int m3i3;$/;"	m	struct:mess3
m3i4	include/type.h	/^	int m3i4;$/;"	m	struct:mess3
m3l1	include/type.h	/^	u64 m3l1;$/;"	m	struct:mess3
m3l2	include/type.h	/^	u64 m3l2;$/;"	m	struct:mess3
m3p1	include/type.h	/^	void *m3p1;$/;"	m	struct:mess3
m3p2	include/type.h	/^	void *m3p2;$/;"	m	struct:mess3
m_inode	include/fs.h	/^struct m_inode{$/;"	s
m_super_block	include/fs.h	/^struct m_super_block{$/;"	s
magic	include/fs.h	/^	u32	magic;		  \/**< Magic number *\/$/;"	m	struct:d_super_block
magic	include/fs.h	/^	u32 magic;$/;"	m	struct:m_super_block
main	cmd/hello.c	/^int main( int argc, char *argv[] )$/;"	f
memchr	include/string.h	/^extern inline void * memchr(const void * cs,char c,int count)$/;"	f
memcmp	include/string.h	/^extern inline int memcmp(const void * cs,const void * ct,int count)$/;"	f
memcpy	include/string.h	/^extern inline void * memcpy(void * dest,const void * src, int n)$/;"	f
memmove	include/string.h	/^extern inline void * memmove(void * dest,const void * src, int n)$/;"	f
memset	include/string.h	/^extern inline void * memset(void * s,char c,int count)$/;"	f
mess1	include/type.h	/^struct mess1$/;"	s
mess2	include/type.h	/^struct mess2$/;"	s
mess3	include/type.h	/^struct mess3$/;"	s
milli_delay	kernel/time.c	/^void milli_delay(int milli_sec)$/;"	f
mkfs	fs/fs.c	/^static void mkfs()$/;"	f	file:
mli1	include/type.h	/^	int mli1;$/;"	m	struct:mess1
mli2	include/type.h	/^	int mli2;$/;"	m	struct:mess1
mli3	include/type.h	/^	int mli3;$/;"	m	struct:mess1
mli4	include/type.h	/^	int mli4;$/;"	m	struct:mess1
mmbuf	mm/exec.c	/^u8 *        mmbuf       = (u8*)0x700000;$/;"	v
mode	include/fs.h	/^	u32	mode;		\/**< Accsess mode. Unused currently *\/$/;"	m	struct:d_inode
mode	include/fs.h	/^	u32 mode;$/;"	m	struct:m_inode
mount_root	fs/super.c	/^void mount_root( void )$/;"	f
mov_inode_data	fs/inode.c	/^void mov_inode_data( struct m_inode *des, struct m_inode *src )$/;"	f
move_to_user_mode	include/asm/system.h	1;"	d
msg_receive	kernel/proc.c	/^static int msg_receive(struct proc *current,int src,MESSAGE *m)$/;"	f	file:
msg_send	kernel/proc.c	/^static int msg_send(struct proc *current,int dest,MESSAGE *m)$/;"	f	file:
msgtype	include/proc.h	/^enum msgtype {$/;"	g
mtime	include/fs.h	/^	u64 mtime;$/;"	m	struct:d_inode
mtime	include/fs.h	/^	u64 mtime;$/;"	m	struct:m_inode
name	include/fs.h	/^	char *name;$/;"	m	struct:d_name_value_pair
name	include/fs.h	/^	char name[20];$/;"	m	struct:d_inode
name	include/fs.h	/^	char name[20];$/;"	m	struct:m_inode
name	include/proc.h	/^	char name[16];$/;"	m	struct:proc
name	include/proc.h	/^	char name[32];$/;"	m	struct:task
new_inode	fs/inode.c	/^struct m_inode *new_inode( int dev, int size )$/;"	f
next	include/fs.h	/^	struct buffer_head *next;$/;"	m	struct:buffer_head	typeref:struct:buffer_head::buffer_head
next_free	include/fs.h	/^	struct buffer_head *next_free;$/;"	m	struct:buffer_head	typeref:struct:buffer_head::buffer_head
next_inode_id	include/fs.h	/^	u32 next_inode_id;$/;"	m	struct:d_inode
next_inode_id	include/fs.h	/^	u32 next_inode_id;$/;"	m	struct:m_inode
next_node_index	include/fs.h	/^	u16 next_node_index;$/;"	m	struct:d_btree_node
next_sending	include/proc.h	/^	struct proc *next_sending;$/;"	m	struct:proc	typeref:struct:proc::proc
nlinks	include/fs.h	/^	u32 nlinks;$/;"	m	struct:d_inode
nlinks	include/fs.h	/^	u32 nlinks;$/;"	m	struct:m_inode
nmi	kernel/kernel.S	/^nmi:$/;"	l
nop	include/asm/system.h	18;"	d
nr_current_console	kernel/console.c	/^int nr_current_console;$/;"	v
nr_sects	include/hd.h	/^	u32 nr_sects;		$/;"	m	struct:part_ent
nr_tty	include/proc.h	/^	int nr_tty;$/;"	m	struct:proc
num	include/fs.h	/^	u8  num;$/;"	m	struct:d_btree_node
num_lock	kernel/keyboard.c	/^static int num_lock;$/;"	v	file:
offset_high	include/protect.h	/^	u16 offset_high;$/;"	m	struct:gate
offset_low	include/protect.h	/^	u16 offset_low;$/;"	m	struct:gate
offsetof	include/stddef.h	20;"	d
open	lib/open.c	/^int open( const char *pathname, int flags )$/;"	f
open_cnt	include/hd.h	/^	int open_cnt;$/;"	m	struct:hd_info
original_addr	include/console.h	/^	u32 original_addr;$/;"	m	struct:console
out_byte	lib/kliba.s	/^out_byte:$/;"	l
out_char	kernel/console.c	/^void out_char(CONSOLE* p_con,char ch)$/;"	f
outb	include/asm/io.h	1;"	d
outb_p	include/asm/io.h	11;"	d
overflow	kernel/kernel.S	/^overflow:$/;"	l
p_block_table	include/fs.h	/^	struct d_block_table_entry p_block_table[NR_BLOCK_TABLE_ENTRY];$/;"	m	struct:m_super_block	typeref:struct:m_super_block::d_block_table_entry
p_console	include/tty.h	/^	struct console* p_console;$/;"	m	struct:tty	typeref:struct:tty::console
p_free	fs/k_memory.c	/^static void* p_free = (void *)0x700000;$/;"	v	file:
p_head	include/keyboard.h	/^	char*	p_head;			\/* 指向缓冲区中下一个空闲位置 *\/$/;"	m	struct:s_kb
p_inbuf_head	include/tty.h	/^	u32* p_inbuf_head;$/;"	m	struct:tty
p_inbuf_tail	include/tty.h	/^	u32* p_inbuf_tail;$/;"	m	struct:tty
p_msg	include/proc.h	/^	MESSAGE *p_msg;$/;"	m	struct:proc
p_proc_ready	include/sched.h	/^PROCESS* p_proc_ready;$/;"	v
p_proc_ready	kernel/sched.c	/^PROCESS* p_proc_ready;$/;"	v
p_tail	include/keyboard.h	/^	char*	p_tail;			\/* 指向键盘任务应处理的字节 *\/$/;"	m	struct:s_kb
page_fault	kernel/kernel.S	/^page_fault:$/;"	l
panic	lib/misc.c	/^void panic(const char *fmt,...)$/;"	f
parent	include/proc.h	/^	int parent;$/;"	m	struct:proc
part_ent	include/hd.h	/^typedef struct part_ent {$/;"	s
part_info	include/hd.h	/^typedef struct part_info {$/;"	s
partition	kernel/hd.c	/^static void partition( int device, int opt )$/;"	f	file:
pcaller	fs/fs.c	/^struct proc *pcaller;$/;"	v	typeref:struct:proc
pdata	include/fs.h	/^	void *pdata;$/;"	m	struct:buffer_head
pid	include/proc.h	/^	u32 pid;$/;"	m	struct:proc
port_read	lib/kliba.s	/^port_read:$/;"	l
port_write	lib/kliba.s	/^port_write:$/;"	l
prev	include/fs.h	/^	struct buffer_head *prev;$/;"	m	struct:buffer_head	typeref:struct:buffer_head::buffer_head
prev_free	include/fs.h	/^	struct buffer_head *prev_free;$/;"	m	struct:buffer_head	typeref:struct:buffer_head::buffer_head
prev_node_index	include/fs.h	/^	u16 prev_node_index;$/;"	m	struct:d_btree_node
primary	include/hd.h	/^	PART_INFO primary[NR_PRIM_PER_DRIVE];$/;"	m	struct:hd_info
print_hdinfo	kernel/hd.c	/^static void print_hdinfo( HD_INFO *hd_if )$/;"	f	file:
print_identify_info	kernel/hd.c	/^static void print_identify_info(u16* hdinfo)$/;"	f	file:
printf	lib/printf.c	/^int printf( const char *fmt, ... )$/;"	f
printk	lib/printf.c	/^int printk(const char *fmt, ...)$/;"	f
printx	lib/syscall.S	/^printx:$/;"	l
priority	include/proc.h	/^	int priority;$/;"	m	struct:proc
proc	include/proc.h	/^typedef struct proc$/;"	s
proc2pid	include/proc.h	95;"	d
proc_table	kernel/proc.c	/^PROCESS proc_table[NR_TASKS+ NR_PROCS];$/;"	v
ptrdiff_t	include/stddef.h	/^typedef long ptrdiff_t;$/;"	t
put_fs_byte	include/asm/segment.h	/^extern inline void put_fs_byte(char val,char *addr)$/;"	f
put_fs_long	include/asm/segment.h	/^extern inline void put_fs_long(unsigned long val,unsigned long * addr)$/;"	f
put_fs_word	include/asm/segment.h	/^extern inline void put_fs_word(short val,short * addr)$/;"	f
put_inode	fs/inode.c	/^void put_inode( struct m_inode *inode )$/;"	f
put_inode_data	fs/inode.c	/^static int put_inode_data( struct m_inode *inode )$/;"	f	file:
put_inode_itable	fs/inode.c	/^static void put_inode_itable( struct m_inode *inode )$/;"	f	file:
put_irq_handler	kernel/i8259.c	/^void put_irq_handler(int irq,irq_handler handler)$/;"	f
put_key	kernel/tty.c	/^static void put_key(TTY* p_tty,u32 key)$/;"	f	file:
q_sending	include/proc.h	/^	struct proc *q_sending;$/;"	m	struct:proc	typeref:struct:proc::proc
read	lib/read.c	/^int read(int fd, void *buf, int count )$/;"	f
read_block_table	fs/block_table.c	/^void read_block_table( struct m_super_block *psb )$/;"	f
read_super_block	fs/super.c	/^static void read_super_block(int dev)$/;"	f	file:
recvfrom	include/proc.h	/^	int recvfrom;$/;"	m	struct:proc
remove_from_queues	fs/buffer.c	/^static inline void remove_from_queues( struct buffer_head *bh )$/;"	f	file:
reset_msg	kernel/proc.c	/^void reset_msg(MESSAGE *p)$/;"	f
restart	kernel/kernel.S	/^restart:$/;"	l
restart_reenter	kernel/kernel.S	/^restart_reenter:$/;"	l
retaddr	include/proc.h	/^	u32 retaddr;$/;"	m	struct:stackframe
root_inode	fs/fs.c	/^struct m_inode *root_inode;$/;"	v	typeref:struct:m_inode
root_inode	include/fs.h	/^	u32 root_inode;$/;"	m	struct:d_super_block
root_inode	include/fs.h	/^	u32 root_inode;$/;"	m	struct:m_super_block
rw_sector	fs/read_write.c	/^int rw_sector( int io_type, struct buffer_head *bh )$/;"	f
s_kb	include/keyboard.h	/^typedef struct s_kb {$/;"	s
s_ldts	include/proc.h	/^	DESCRIPTOR s_ldts[LDT_SIZE];$/;"	m	struct:proc
s_regs	include/proc.h	/^	STACK_FRAME s_regs;$/;"	m	struct:proc
save	kernel/kernel.S	/^save:$/;"	l
sb_dev	include/fs.h	/^	u16	sb_dev; 	\/**< the super block's home device *\/$/;"	m	struct:m_super_block
schedule	kernel/sched.c	/^void schedule()$/;"	f
scroll_lock	kernel/keyboard.c	/^static int scroll_lock;$/;"	v	file:
scroll_screen	kernel/console.c	/^void scroll_screen(CONSOLE* p_con,int direction)$/;"	f
seek	include/fs.h	/^	u32 seek;$/;"	m	struct:m_inode
seg2phys	kernel/protect.c	/^u32 seg2phys(u16 seg)$/;"	f
segment_not_present	kernel/kernel.S	/^segment_not_present:$/;"	l
select_console	kernel/console.c	/^void select_console(int nr_console)$/;"	f
selector	include/protect.h	/^	u16 selector;$/;"	m	struct:gate
send_recv	lib/misc.c	/^int send_recv(int function,int src_dest,MESSAGE *msg)$/;"	f
sendrec	lib/syscall.S	/^sendrec:$/;"	l
sendto	include/proc.h	/^	int sendto;$/;"	m	struct:proc
set_cursor	kernel/console.c	/^void set_cursor(u32 position)$/;"	f
set_fs	include/asm/segment.h	/^extern inline void set_fs(unsigned long val)$/;"	f
set_imap_first_zero	fs/inode.c	/^static int set_imap_first_zero( struct d_block_table_entry *bt, struct m_inode *inode )$/;"	f	file:
set_intr_gate	include/asm/system.h	33;"	d
set_ldt_desc	include/asm/system.h	66;"	d
set_leds	kernel/keyboard.c	/^static void set_leds()$/;"	f	file:
set_map	fs/k_memory.c	/^static void set_map( void *p )$/;"	f	file:
set_system_gate	include/asm/system.h	39;"	d
set_trap_gate	include/asm/system.h	36;"	d
set_tss_desc	include/asm/system.h	65;"	d
set_video_start_addr	kernel/console.c	/^static void set_video_start_addr(u32 addr)$/;"	f	file:
shell	kernel/main.c	/^void shell()$/;"	f
shift_l	kernel/keyboard.c	/^static int shift_l;$/;"	v	file:
shift_r	kernel/keyboard.c	/^static int shift_r;$/;"	v	file:
single_step_exception	kernel/kernel.S	/^single_step_exception:$/;"	l
size	include/fs.h	/^	u16 size; \/\/0,1,2,3,4,5,6$/;"	m	struct:m_inode
size	include/fs.h	/^	u32 size; \/\/0,1,2,3...$/;"	m	struct:d_inode
size	include/fs.h	/^	u64 size;$/;"	m	struct:m_super_block
size	include/fs.h	/^	u8	 size;$/;"	m	struct:buffer_head
size	include/hd.h	/^	u32 size;$/;"	m	struct:part_info
size_t	include/stddef.h	/^typedef unsigned long size_t;$/;"	t
size_t	include/string.h	/^typedef unsigned int size_t;$/;"	t
sleep_on	kernel/sched.c	/^void sleep_on( struct proc **p )$/;"	f
source	include/type.h	/^	int source;$/;"	m	struct:__anon1
spin	lib/misc.c	/^void spin(char *func_name)$/;"	f
sprintf	lib/vsprintf.c	/^int sprintf(char *buf, const char *fmt, ...)$/;"	f
spurious_irq	kernel/i8259.c	/^void spurious_irq(int irq)$/;"	f
ss	include/proc.h	/^	u32 ss;$/;"	m	struct:stackframe
ss	include/protect.h	/^	u32 ss;$/;"	m	struct:tss
ss0	include/protect.h	/^	u32 ss0;$/;"	m	struct:tss
ss1	include/protect.h	/^	u32 ss1;$/;"	m	struct:tss
ss2	include/protect.h	/^	u32 ss2;$/;"	m	struct:tss
stack_exception	kernel/kernel.S	/^stack_exception:$/;"	l
stackframe	include/proc.h	/^typedef struct stackframe$/;"	s
stacksize	include/proc.h	/^	int stacksize;$/;"	m	struct:task
start_buffer	fs/buffer.c	/^struct buffer_head *start_buffer[NR_BUFFER] ;$/;"	v	typeref:struct:buffer_head
start_cyl	include/hd.h	/^	u8 start_cyl;		$/;"	m	struct:part_ent
start_data_nr	include/fs.h	/^	u32 start_data_nr;$/;"	m	struct:d_block_table_entry
start_data_sect	include/fs.h	/^	u32 start_data_sect;$/;"	m	struct:d_inode
start_data_sect	include/fs.h	/^	u32 start_data_sect;$/;"	m	struct:m_inode
start_head	include/hd.h	/^	u8 start_head;		$/;"	m	struct:part_ent
start_imap_nr	include/fs.h	/^	u32 start_imap_nr;$/;"	m	struct:d_block_table_entry
start_imap_sect	include/fs.h	/^	u32 start_imap_sect;$/;"	m	struct:m_inode
start_itable_nr	include/fs.h	/^	u32 start_itable_nr;$/;"	m	struct:d_block_table_entry
start_itable_sect	include/fs.h	/^	u32 start_itable_sect;$/;"	m	struct:m_inode
start_sect	include/hd.h	/^	u32 start_sect;	$/;"	m	struct:part_ent
start_sector	include/hd.h	/^	u8 start_sector;	$/;"	m	struct:part_ent
sti	include/asm/system.h	16;"	d
strcat	include/string.h	/^extern inline char * strcat(char * dest,const char * src)$/;"	f
strchr	include/string.h	/^extern inline char * strchr(const char * s,char c)$/;"	f
strcmp	include/string.h	/^extern inline int strcmp(const char * cs,const char * ct)$/;"	f
strcpy	include/string.h	/^extern inline char * strcpy(char * dest,const char *src)$/;"	f
strcspn	include/string.h	/^extern inline int strcspn(const char * cs, const char * ct)$/;"	f
strlen	include/string.h	/^extern inline int strlen(const char * s)$/;"	f
strncat	include/string.h	/^extern inline char * strncat(char * dest,const char * src,int count)$/;"	f
strncmp	include/string.h	/^extern inline int strncmp(const char * cs,const char * ct,int count)$/;"	f
strncpy	include/string.h	/^extern inline char * strncpy(char * dest,const char *src,int count)$/;"	f
strpbrk	include/string.h	/^extern inline char * strpbrk(const char * cs,const char * ct)$/;"	f
strrchr	include/string.h	/^extern inline char * strrchr(const char * s,char c)$/;"	f
strspn	include/string.h	/^extern inline int strspn(const char * cs, const char * ct)$/;"	f
strstr	include/string.h	/^extern inline char * strstr(const char * cs,const char * ct)$/;"	f
strtok	include/string.h	/^extern inline char * strtok(char * s,const char * ct)$/;"	f
super_block_table	fs/super.c	/^struct m_super_block super_block_table[NR_SUPER_BLOCK];$/;"	v	typeref:struct:m_super_block
sync_dev	fs/buffer.c	/^int sync_dev( int dev )$/;"	f
sys_call	kernel/kernel.S	/^sys_call:$/;"	l
sys_call_table	kernel/proc.c	/^system_call sys_call_table[NR_SYS_CALL]={sys_printx,$/;"	v
sys_id	include/hd.h	/^	u8 sys_id;		$/;"	m	struct:part_ent
sys_printx	kernel/tty.c	/^int sys_printx(int _unsued1,int _unused2,char *s,struct proc *p_proc)$/;"	f
sys_sendrec	kernel/proc.c	/^int sys_sendrec(int function,int src_dest,MESSAGE* m,struct proc*p)$/;"	f
sys_sync	fs/buffer.c	/^int sys_sync(void)$/;"	f
system_call	include/type.h	/^typedef void* system_call;$/;"	t
task	include/proc.h	/^typedef struct task$/;"	s
task_f	include/type.h	/^typedef void (*task_f)();$/;"	t
task_fs	fs/fs.c	/^void task_fs()$/;"	f
task_hd	kernel/hd.c	/^void task_hd()$/;"	f
task_mm	mm/mm.c	/^void task_mm()$/;"	f
task_stack	kernel/proc.c	/^char task_stack[STACK_SIZE_TOTAL];$/;"	v
task_sys	kernel/systask.c	/^void task_sys()$/;"	f
task_table	kernel/proc.c	/^TASK task_table[NR_TASKS]=$/;"	v
task_tty	kernel/tty.c	/^void task_tty()$/;"	f
ticks	include/proc.h	/^	int ticks;$/;"	m	struct:proc
ticks	kernel/time.c	/^int ticks = 0;$/;"	v
toascii	include/ctype.h	29;"	d
tolower	include/ctype.h	31;"	d
toupper	include/ctype.h	32;"	d
trap	include/protect.h	/^	u16 trap;$/;"	m	struct:tss
tss	include/protect.h	/^typedef struct tss$/;"	s
tss	kernel/protect.c	/^TSS tss;$/;"	v
tty	include/tty.h	/^typedef struct tty$/;"	s
tty_caller	include/tty.h	/^	int tty_caller;$/;"	m	struct:tty
tty_dev_read	kernel/tty.c	/^static void tty_dev_read(TTY* p_tty)$/;"	f	file:
tty_dev_write	kernel/tty.c	/^static void tty_dev_write(TTY* p_tty)$/;"	f	file:
tty_do_read	kernel/tty.c	/^static void tty_do_read( TTY *p_tty, MESSAGE *msg )$/;"	f	file:
tty_do_write	kernel/tty.c	/^static void tty_do_write( TTY *p_tty, MESSAGE *msg )$/;"	f	file:
tty_left_cnt	include/tty.h	/^	int tty_left_cnt;$/;"	m	struct:tty
tty_procnr	include/tty.h	/^	int tty_procnr;$/;"	m	struct:tty
tty_req_buf	include/tty.h	/^	void *tty_req_buf;$/;"	m	struct:tty
tty_table	kernel/tty.c	/^TTY tty_table[NR_CONSOLES];$/;"	v
tty_trans_cnt	include/tty.h	/^	int tty_trans_cnt;$/;"	m	struct:tty
type	include/type.h	/^	int type;$/;"	m	struct:__anon1
u	include/type.h	/^	}u;$/;"	m	struct:__anon1	typeref:union:__anon1::__anon2
u16	include/type.h	/^typedef	unsigned	short	u16;$/;"	t
u32	include/type.h	/^typedef	unsigned	int		u32;$/;"	t
u64	include/type.h	/^typedef unsigned long long u64;$/;"	t
u8	include/type.h	/^typedef	unsigned	char	u8;$/;"	t
uid	include/fs.h	/^	u32 uid;$/;"	m	struct:d_inode
uid	include/fs.h	/^	u32 uid;$/;"	m	struct:m_inode
unblock	kernel/proc.c	/^static void unblock(struct proc *p)$/;"	f	file:
update	include/fs.h	/^	u8  update;$/;"	m	struct:m_inode
user_proc_table	kernel/proc.c	/^TASK user_proc_table[NR_NATIVE_PROCS]=$/;"	v
v_mem_limit	include/console.h	/^	u32 v_mem_limit;$/;"	m	struct:console
va2la	kernel/proc.c	/^void *va2la(int pid,void *va)$/;"	f
va_arg	include/stdarg.h	24;"	d
va_end	include/stdarg.h	22;"	d
va_list	include/stdarg.h	/^typedef char *va_list;$/;"	t
va_start	include/stdarg.h	13;"	d
va_start	include/stdarg.h	16;"	d
value	include/fs.h	/^	u32  value;$/;"	m	struct:d_name_value_pair
value	include/fs.h	/^	u32 value;$/;"	m	struct:d_key_value_pair
vir2phys	include/protect.h	141;"	d
vsprintf	lib/vsprintf.c	/^int vsprintf(char* buf,const char* fmt,va_list args)$/;"	f
wRootDirSizeForLoop	boot/boot.S	/^wRootDirSizeForLoop:    .2byte  RootDirSectors$/;"	l
wRootDirSizeForLoop	boot/loader.S	/^wRootDirSizeForLoop:	.2byte	RootDirSectors$/;"	l
wSectorNo	boot/boot.S	/^wSectorNo:              .2byte  0       \/* Sector number to read *\/$/;"	l
wSectorNo	boot/loader.S	/^wSectorNo:	.2byte	0$/;"	l
wait	include/fs.h	/^	struct proc *wait;$/;"	m	struct:buffer_head	typeref:struct:buffer_head::proc
wait	lib/wait.c	/^int wait(int * status)$/;"	f
waitfor	kernel/hd.c	/^static int waitfor(int mask, int val, int timeout)$/;"	f	file:
wake_up	kernel/sched.c	/^void wake_up( struct proc **p )$/;"	f
write	lib/write.c	/^int write( int fd, const void *buf, int count )$/;"	f
zone_data_sects	include/fs.h	/^	u32 zone_data_sects;$/;"	m	struct:d_super_block
zone_data_sects	include/fs.h	/^	u32 zone_data_sects;$/;"	m	struct:m_super_block
zone_first_inode_num	include/fs.h	/^	u32 zone_first_inode_num;$/;"	m	struct:m_inode
zone_mete_sects	include/fs.h	/^	u32 zone_mete_sects;$/;"	m	struct:d_super_block
zone_mete_sects	include/fs.h	/^	u32 zone_mete_sects;$/;"	m	struct:m_super_block
