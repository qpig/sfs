cscope 15 $HOME/mylinux/kernel               0000058010
	@clock.c

1 
	~"hód.h
"

2 
	$˛ock_h™dÀr
(
úq
)

4 
ticks
++;

5 
p_¥oc_ªady
->
ticks
--;

6 if(
k_ªíãr
!=0)

10 
	`scheduÀ
();

11 
	}
}

13 
	$mûli_dñay
(
mûli_£c
)

15 
t
=
	`gë_ticks
();

16 ((
	`gë_ticks
()-
t
Ë*1000 /
HZ
Ë< 
mûli_£c
){}

17 
	}
}

19 
	$öô_˛ock
()

22 
	`out_byã
(
TIMER_MODE_REG
,
RATE_GENERATOR
);

23 
	`out_byã
(
TIMER0_REG
,(
u8
Ë(
TIMER_FREG
/
HZ
));

24 
	`out_byã
(
TIMER0_REG
,(
u8
)((
TIMER_FREG
/
HZ
)>>8));

26 
	`put_úq_h™dÀr
(
CLOCK_IRQ
,
˛ock_h™dÀr
);

27 
	`íabÀ_úq
(
CLOCK_IRQ
);

28 
	}
}

	@console.c

1 
	~"hód.h
"

2 
	~"keybﬂrd.h
"

4 
£t_curs‹
(
u32
 
posôi⁄
);

5 
£t_video_°¨t_addr
(
u32
 
addr
);

6 
Êush
(
CONSOLE
* 
p_c⁄
);

8 
	$s¸ﬁl_s¸ìn
(
CONSOLE
* 
p_c⁄
,
dúe˘i⁄
)

10 if(
dúe˘i⁄
 =
SCR_UP
)

12 if((()(
p_c⁄
->
cuºít_°¨t_addr
)-
SCREEN_WIDTH
Ë> ()’_c⁄->
‹igöÆ_addr
))

13 
p_c⁄
->
cuºít_°¨t_addr
-=
SCREEN_WIDTH
;

15 if(
dúe˘i⁄
 =
SCR_DN
)

17 if(
p_c⁄
->
cuºít_°¨t_addr
+
SCREEN_SIZE
 <Ö_c⁄->
‹igöÆ_addr
+p_c⁄->
v_mem_limô
)

18 
p_c⁄
->
cuºít_°¨t_addr
+=
SCREEN_WIDTH
;

22 
	`£t_video_°¨t_addr
(
p_c⁄
->
cuºít_°¨t_addr
);

23 
	`£t_curs‹
(
p_c⁄
->
curs‹
);

24 
	}
}

26 
	$is_cuºít_c⁄sﬁe
(
CONSOLE
* 
p_c⁄
)

28  (
p_c⁄
 =
c⁄sﬁe_èbÀ
+ 
ƒ_cuºít_c⁄sﬁe
);

29 
	}
}

31 
	$out_ch¨
(
CONSOLE
* 
p_c⁄
,
ch
)

33 
u8
* 
p_vmem
=(u8*)(
V_MEM_BASE
 +
p_c⁄
->
curs‹
*2);

34 
ch
)

37 if(
p_c⁄
->
curs‹
 <Ö_c⁄->
‹igöÆ_addr
+p_c⁄->
v_mem_limô
-
SCREEN_WIDTH
)

39 
p_c⁄
->
curs‹
ı_c⁄->
‹igöÆ_addr
+
SCREEN_WIDTH
*((p_con->cursor-p_con->original_addr)/SCREEN_WIDTH +1);

43 if(
p_c⁄
->
curs‹
>Ö_c⁄->
‹igöÆ_addr
)

45 
p_c⁄
->
curs‹
--;

46 *(
p_vmem
-2)=' ';

47 *(
p_vmem
-1)=
DEFAULT_CHAR_COLOR
;

51 if(
p_c⁄
->
curs‹
 <Ö_c⁄->
‹igöÆ_addr
+p_c⁄->
v_mem_limô
 -1)

53 *
p_vmem
++=
ch
;

54 *
p_vmem
++=
DEFAULT_CHAR_COLOR
;

55 
p_c⁄
->
curs‹
++;

58 
p_c⁄
->
curs‹
>ı_c⁄->
cuºít_°¨t_addr
+
SCREEN_SIZE
)

60 
	`s¸ﬁl_s¸ìn
(
p_c⁄
,
SCR_DN
);

62 if(
	`is_cuºít_c⁄sﬁe
(
p_c⁄
))

63 
	`Êush
(
p_c⁄
);

64 
	}
}

66 
	$Êush
(
CONSOLE
* 
p_c⁄
)

68 
	`£t_curs‹
(
p_c⁄
->
curs‹
);

69 
	`£t_video_°¨t_addr
(
p_c⁄
->
cuºít_°¨t_addr
);

70 
	}
}

73 
	$£t_curs‹
(
u32
 
posôi⁄
)

75 
	`dißbÀ_öt
();

76 
	`out_byã
(
CRTC_ADDR_REG
,
CURSOR_H
);

77 
	`out_byã
(
CRTC_DATA_REG
,(
posôi⁄
>>8)&0xff);

78 
	`out_byã
(
CRTC_ADDR_REG
,
CURSOR_L
);

79 
	`out_byã
(
CRTC_DATA_REG
,
posôi⁄
 & 0xff);

80 
	`íabÀ_öt
();

81 
	}
}

84 
	$öô_s¸ìn
(
TTY
* 
p_ây
)

86 
ƒ_ây
=
p_ây
-
ây_èbÀ
;

87 
p_ây
->
p_c⁄sﬁe
=
c⁄sﬁe_èbÀ
+
ƒ_ây
;

88 
v_mem_size
=
V_MEM_SIZE
>>1;

89 
c⁄_v_mem_size
=
v_mem_size
/
NR_CONSOLES
;

90 
p_ây
->
p_c⁄sﬁe
->
‹igöÆ_addr
=
ƒ_ây
*
c⁄_v_mem_size
;

91 
p_ây
->
p_c⁄sﬁe
->
v_mem_limô
=
c⁄_v_mem_size
;

92 
p_ây
->
p_c⁄sﬁe
->
cuºít_°¨t_addr
ı_ây->p_c⁄sﬁe->
‹igöÆ_addr
;

93 
p_ây
->
p_c⁄sﬁe
->
curs‹
ı_ây->p_c⁄sﬁe->
‹igöÆ_addr
;

94 if(
ƒ_ây
 ==0)

96 
p_ây
->
p_c⁄sﬁe
->
curs‹
=
di•_pos
/2;

97 
di•_pos
=0;

101 
	`out_ch¨
(
p_ây
->
p_c⁄sﬁe
,
ƒ_ây
+'0');

102 
	`out_ch¨
(
p_ây
->
p_c⁄sﬁe
,'#');

105 
	`£t_curs‹
(
p_ây
->
p_c⁄sﬁe
->
curs‹
);

106 
	}
}

108 
	$£À˘_c⁄sﬁe
(
ƒ_c⁄sﬁe
)

110 if((
ƒ_c⁄sﬁe
<0Ë||“r_c⁄sﬁe>=
NR_CONSOLES
))

114 
ƒ_cuºít_c⁄sﬁe
=
ƒ_c⁄sﬁe
;

115 
	`£t_curs‹
(
c⁄sﬁe_èbÀ
[
ƒ_cuºít_c⁄sﬁe
].
curs‹
);

116 
	`£t_video_°¨t_addr
(
c⁄sﬁe_èbÀ
[
ƒ_cuºít_c⁄sﬁe
].
cuºít_°¨t_addr
);

117 
	}
}

120 
	$£t_video_°¨t_addr
(
u32
 
addr
)

122 
	`dißbÀ_öt
();

123 
	`out_byã
(
CRTC_ADDR_REG
,
START_ADDR_H
);

124 
	`out_byã
(
CRTC_DATA_REG
,(
addr
>>8)&0xff);

125 
	`out_byã
(
CRTC_ADDR_REG
,
START_ADDR_L
);

126 
	`out_byã
(
CRTC_DATA_REG
,
addr
&0xff);

127 
	`íabÀ_öt
();

128 
	}
}

	@global.c

1 
	#GLOBAL_VARIABLES_HERE


	)

3 
	~"hód.h
"

4 
PROCESS
 
	g¥oc_èbÀ
[
NR_TASKS
+ 
NR_PROCS
];

6 
TASK
 
	gèsk_èbÀ
[
NR_TASKS
]=

8 {
èsk_ây
,
STACK_SIZE_TTY
,"TTY"},

9 {
èsk_sys
,
STACK_SIZE_SYS
,"SYS"}

11 
TASK
 
	gu£r_¥oc_èbÀ
[
NR_PROCS
]=

13 {
Te°A
,
STACK_SIZE_TESTA
,"TestA"},

14 {
Te°B
,
STACK_SIZE_TESTB
,"TestB"},

15 {
Te°C
,
STACK_SIZE_TESTC
,"TestC"}

17 
	gèsk_°ack
[
STACK_SIZE_TOTAL
];

18 
TTY
 
	gây_èbÀ
[
NR_CONSOLES
];

19 
CONSOLE
 
	gc⁄sﬁe_èbÀ
[
NR_CONSOLES
];

20 
úq_h™dÀr
 
	gúq_èbÀ
[
NR_IRQ
];

21 
sy°em_ˇŒ
 
	gsys_ˇŒ_èbÀ
[
NR_SYS_CALL
]={
sys_¥ötx
,

22 
sys_£ndªc
};

	@i8259.c

1 
	~"hód.h
"

3 
	$öô_8259A
()

5 
	`out_byã
(
INT_M_CTL
,0x11);

7 
	`out_byã
(
INT_S_CTL
,0x11);

9 
	`out_byã
(
INT_M_CTLMASK
,
INT_VECTOR_IRQ0
);

11 
	`out_byã
(
INT_S_CTLMASK
,
INT_VECTOR_IRQ8
);

13 
	`out_byã
(
INT_M_CTLMASK
,0x4);

15 
	`out_byã
(
INT_S_CTLMASK
,0x2);

17 
	`out_byã
(
INT_M_CTLMASK
,0X1);

19 
	`out_byã
(
INT_S_CTLMASK
,0x1);

21 
	`out_byã
(
INT_M_CTLMASK
,0xff);

23 
	`out_byã
(
INT_S_CTLMASK
,0xff);

25 
i
;

26 
i
=0;i<
NR_IRQ
;i++)

28 
úq_èbÀ
[
i
]=
•urious_úq
;

30 
	}
}

33 
	$•urious_úq
(
úq
)

35 
	`di•_°r
("spurious_irq: ");

36 
	`di•_öt
(
úq
);

37 
	`di•_°r
("\n");

38 
	}
}

40 
	$put_úq_h™dÀr
(
úq
,
úq_h™dÀr
 
h™dÀr
)

42 
	`dißbÀ_úq
(
úq
);

43 
úq_èbÀ
[
úq
]=
h™dÀr
;

44 
	}
}

	@kernel.S

2 .
gdt_±r
,
idt_±r
,
p_¥oc_ªady
,
tss
,
di•_pos
,
k_ªíãr


4 .
c°¨t
,
kî√l_maö
,
ex˚±i⁄_h™dÀr
,
•urious_úq
,
˛ock_h™dÀr
,
sys_ˇŒ_èbÀ


7 .
bss


8 
SèckS∑˚
: .
fûl
 2048

9 
SèckT›
:

11 .
ãxt


13 
	~"sc⁄°.h
"

14 .
globÆ
 
_°¨t
 ,
ª°¨t
,
sys_ˇŒ


16 .
globÆ
 
divide_îr‹
,
sögÀ_°ï_ex˚±i⁄
,
nmi
,
bªakpoöt_ex˚±i⁄


17 .
globÆ
 
ovîÊow
,
bounds_check
,
övÆ_›code
,
c›r_nŸ_avaûabÀ


18 .
globÆ
 
doubÀ_Áu…
,
c›r_£g_ovîrun
,
övÆ_tss
,
£gmít_nŸ_¥e£¡


19 .
globÆ
 
°ack_ex˚±i⁄
,
gíîÆ_¥Ÿe˘i⁄
,
∑ge_Áu…
,
c›r_îr‹


20 .
globÆ
 
hwöt00


21 .
globÆ
 
hwöt01


22 .
globÆ
 
hwöt02


23 .
globÆ
 
hwöt03


24 .
globÆ
 
hwöt04


25 .
globÆ
 
hwöt05


26 .
globÆ
 
hwöt06


27 .
globÆ
 
hwöt07


28 .
globÆ
 
hwöt08


29 .
globÆ
 
hwöt09


30 .
globÆ
 
hwöt10


31 .
globÆ
 
hwöt11


32 .
globÆ
 
hwöt12


33 .
globÆ
 
hwöt13


34 .
globÆ
 
hwöt14


35 .
globÆ
 
hwöt15


38 
_°¨t
:

39 
mov
 
$SèckT›
,%
e•


40 
movl
 
$0
,(
di•_pos
)

41 
	$sgdt
 (
gdt_±r
)

42 
ˇŒ
 
c°¨t


43 
	$lgdt
 (
gdt_±r
)

44 
	$lidt
 (
idt_±r
)

46 
jmp
 
$SELECTOR_KERNEL_CS
,
$csöô


47 
csöô
:

48 
movb
 
$0x0f
,%
ah


49 
movb
 
$
'K',%
Æ


50 
mov
 %
ax
,%
gs
:((80*1+39)*2)

51 
x‹
 %
óx
,%eax

52 
mov
 
$SELECTOR_TSS
,%
ax


53 
…r
 %
ax


54 
jmp
 
kî√l_maö


56 .
ma¸o
 
hwöt_ma°î
 
n


57 
ˇŒ
 
ßve


58 
ö
 
$0x21
,%
Æ


59 
‹
 
	`$
(1<<\
n
),%
Æ


60 
out
 %
Æ
,
$0x21


62 
mov
 
$EOI
,%
Æ


63 
out
 %
Æ
,
$0x20


64 
°i


66 
push
 
	`$
(\
n
)

67 
mov
 
$úq_èbÀ
,%
ebx


68 
ˇŒ
 *(4*\
n
)(%
ebx
)

69 
add
 
$4
,%
e•


70 
˛i


72 
ö
 
$0x21
,%
Æ


73 
™d
 
$
~(1<<\
n
),%
Æ


74 
out
 %
Æ
,
$0x21


76 
ªt


77 .
ídm


79 .
Æign
 16

80 
sys_ˇŒ
:

81 
ˇŒ
 
ßve


82 
	$pushl
 (
p_¥oc_ªady
)

83 
°i


84 
push
 %
esi


85 
push
 %
edx


86 
push
 %
ecx


87 
push
 %
ebx


88 
ˇŒ
 *
	`sys_ˇŒ_èbÀ
(,%
óx
,4)

89 
add
 
$16
,%
e•


90 
p›
 %
esi


91 
mov
 %
óx
,(
EAXREG
-
P_STACKBASE
)(%
esi
)

92 
˛i


93 
ªt


95 
hwöt00
:

96 
hwöt_ma°î
 0

97 
ßve
:

98 
pushÆ


99 
push
 %
ds


100 
push
 %
es


101 
push
 %
fs


102 
push
 %
gs


103 
mov
 %
edx
,%
esi


104 
mov
 %
ss
,%
dx


105 
mov
 %
dx
,%
ds


106 
mov
 %
dx
,%
es


107 
mov
 %
esi
,%
edx


109 
mov
 %
e•
,%
esi


111 
	$ö˛
 (
k_ªíãr
)

112 
cm∂
 
$0
,(
k_ªíãr
)

113 
j√
 .
ª_íãr1


115 
mov
 
$SèckT›
,%
e•


116 
push
 
$ª°¨t


117 
jmp
 *(
RETADR
-
P_STACKBASE
)(%
esi
)

118 .
ª_íãr1
:

119 
push
 
$ª°¨t_ªíãr


120 
jmp
 *(
RETADR
-
P_STACKBASE
)(%
esi
)

123 .
Æign
 16

124 
hwöt01
: #I¡îru± 
routöe
 
úq
 1 (
keybﬂrd
)

125 
hwöt_ma°î
 1

127 .
Æign
 16

128 
hwöt02
: #I¡îru± 
routöe
 
úq
 2 (
ˇsˇde
!)

129 
hwöt_ma°î
 2

131 .
Æign
 16

132 
hwöt03
: #I¡îru± 
routöe
 
úq
 3 (
£c⁄d
 
£rül
)

133 
hwöt_ma°î
 3

135 .
Æign
 16

136 
hwöt04
: #I¡îru± 
routöe
 
úq
 4 (
fú°
 
£rül
)

137 
hwöt_ma°î
 4

139 .
Æign
 16

140 
hwöt05
: #I¡îru± 
routöe
 
úq
 5 (
XT
 
wöche°î
)

141 
hwöt_ma°î
 5

143 .
Æign
 16

144 
hwöt06
: #I¡îru± 
routöe
 
úq
 6 (
Ê›py
)

145 
hwöt_ma°î
 6

147 .
Æign
 16

148 
hwöt07
: #I¡îru± 
routöe
 
úq
 7 (
¥öãr
)

149 
hwöt_ma°î
 7

151 .
ma¸o
 
hwöt_¶ave
 
n


152 
push
 
	`$
(\
n
)

153 
ˇŒ
 
•urious_úq


154 
add
 
$4
,%
e•


155 
úë


156 .
ídm


158 .
Æign
 16

159 
hwöt08
: #I¡îru± 
routöe
 
úq
 8 (
ªÆtime
 
˛ock
).

160 
hwöt_¶ave
 8

162 .
Æign
 16

163 
hwöt09
: #I¡îru± 
routöe
 
úq
 9 (úq 2 
ªdúe˘ed
)

164 
hwöt_¶ave
 9

166 .
Æign
 16

167 
hwöt10
: #I¡îru± 
routöe
 
úq
 10

168 
hwöt_¶ave
 10

170 .
Æign
 16

171 
hwöt11
: #I¡îru± 
routöe
 
úq
 11

172 
hwöt_¶ave
 11

174 .
Æign
 16

175 
hwöt12
: #I¡îru± 
routöe
 
úq
 12

176 
hwöt_¶ave
 12

178 .
Æign
 16

179 
hwöt13
: #I¡îru± 
routöe
 
úq
 13 (
FPU
 
ex˚±i⁄
)

180 
hwöt_¶ave
 13

182 .
Æign
 16

183 
hwöt14
: #I¡îru± 
routöe
 
úq
 14 (
AT
 
wöche°î
)

184 
hwöt_¶ave
 14

186 .
Æign
 16

187 
hwöt15
: #I¡îru± 
routöe
 
úq
 15

188 
hwöt_¶ave
 15

190 
divide_îr‹
:

191 
push
 
$0xffffffff


192 
push
 
$0


193 
jmp
 
ex˚±i⁄


194 
sögÀ_°ï_ex˚±i⁄
:

195 
push
 
$0xffffffff


196 
push
 
$1


197 
jmp
 
ex˚±i⁄


198 
nmi
:

199 
push
 
$0xffffffff


200 
push
 
$2


201 
jmp
 
ex˚±i⁄


202 
bªakpoöt_ex˚±i⁄
:

203 
push
 
$0xffffffff


204 
push
 
$3


205 
jmp
 
ex˚±i⁄


206 
ovîÊow
:

207 
push
 
$0xffffffff


208 
push
 
$4


209 
jmp
 
ex˚±i⁄


210 
bounds_check
:

211 
push
 
$0xffffffff


212 
push
 
$5


213 
jmp
 
ex˚±i⁄


214 
övÆ_›code
:

215 
push
 
$0xffffffff


216 
push
 
$6


217 
jmp
 
ex˚±i⁄


218 
c›r_nŸ_avaûabÀ
:

219 
push
 
$0xffffffff


220 
push
 
$7


221 
jmp
 
ex˚±i⁄


222 
doubÀ_Áu…
:

223 
push
 
$8


224 
jmp
 
ex˚±i⁄


225 
c›r_£g_ovîrun
:

226 
push
 
$0xffffffff


227 
push
 
$9


228 
jmp
 
ex˚±i⁄


229 
övÆ_tss
:

230 
push
 
$10


231 
jmp
 
ex˚±i⁄


232 
£gmít_nŸ_¥e£¡
:

233 
push
 
$11


234 
jmp
 
ex˚±i⁄


235 
°ack_ex˚±i⁄
:

236 
push
 
$12


237 
jmp
 
ex˚±i⁄


238 
gíîÆ_¥Ÿe˘i⁄
:

239 
push
 
$13


240 
jmp
 
ex˚±i⁄


241 
∑ge_Áu…
:

242 
push
 
$14


243 
jmp
 
ex˚±i⁄


244 
c›r_îr‹
:

245 
push
 0xffffffff

246 
push
 
$16


247 
jmp
 
ex˚±i⁄


249 
ex˚±i⁄
:

250 
ˇŒ
 
ex˚±i⁄_h™dÀr


251 
add
 
$8
,%
e•


252 
jmp
 .

254 
ª°¨t
:

255 
	`mov
 (
p_¥oc_ªady
),%
e•


256 
	`Œdt
 (
P_LDT_SEL
)(%
e•
)

257 
	`Àa
 (
P_STACKTOP
)(%
e•
),%
óx


258 
mov
 
$tss
,%
ebx


259 
mov
 %
óx
,(
TSS3_S_SP0
)(%
ebx
)

261 
ª°¨t_ªíãr
:

262 
	$de˛
 (
k_ªíãr
)

263 
p›
 %
gs


264 
p›
 %
fs


265 
p›
 %
es


266 
p›
 %
ds


267 
p›Æ


269 
add
 
$4
,%
e•


271 
úë


	@keyboard.c

1 
	~"hód.h
"

2 
	~"keybﬂrd.h
"

3 
	~"keym≠.h
"

5 
KB_INPUT
 
	gkb_ö
;

6 
	gcode_wôh_E0
=0;

7 
	gshi·_l
;

8 
	gshi·_r
;

9 
	gÆt_l
;

10 
	gÆt_r
;

11 
	g˘æ_l
;

12 
	g˘æ_r
;

13 
	gˇps_lock
;

14 
	gnum_lock
;

15 
	gs¸ﬁl_lock
;

16 
	gcﬁumn
;

18 
u8
 
gë_byã_‰om_kbuf
();

19 
kb_waô
();

20 
kb_ack
();

21 
£t_Àds
();

23 
	$keybﬂrd_h™dÀr
(
úq
)

25 
u8
 
sˇn_code
=
	`ö_byã
(0x60);

27 if(
kb_ö
.
cou¡
< 
KB_IN_BYTES
)

29 *(
kb_ö
.
p_hód
++)=
sˇn_code
;

30 if(
kb_ö
.
p_hód
 =kb_ö.
buf
+
KB_IN_BYTES
)

32 
kb_ö
.
p_hód
=kb_ö.
buf
;

34 
kb_ö
.
cou¡
++;

36 
	}
}

38 
	$öô_keybﬂrd
()

40 
kb_ö
.
cou¡
=0;

41 
kb_ö
.
p_hód
=kb_ö.
p_èû
=kb_ö.
buf
;

42 
shi·_l
=
shi·_r
=0;

43 
Æt_l
=
Æt_r
=0;

44 
˘æ_l
=
˘æ_r
=0;

45 
ˇps_lock
=1;

46 
num_lock
=1;

47 
s¸ﬁl_lock
=0;

48 
	`£t_Àds
();

49 
	`put_úq_h™dÀr
(
KEYBOARD_IRQ
,
keybﬂrd_h™dÀr
);

50 
	`íabÀ_úq
(
KEYBOARD_IRQ
);

51 
	}
}

53 
	$keybﬂrd_ªad
(
TTY
* 
p_ây
)

55 
u8
 
sˇn_code
;

56 
make
;

57 
u32
 
key
=0;

58 
u32
* 
keyrow
=0;

60 if(
kb_ö
.
cou¡
 > 0)

62 
code_wôh_E0
=0;

63 
	`dißbÀ_öt
();

64 
sˇn_code
=
	`gë_byã_‰om_kbuf
();

66 if(
sˇn_code
 == 0xe1)

68 
i
;

69 
u8
 
∑u£bªak_scode
[]={0xE1,0x1D,0x45,0xE1,0x9d,0xc5};

70 
is_∑u£bªak
=1;

71 
i
=1;i<6;i++)

73 if(
	`gë_byã_‰om_kbuf
()!=
∑u£bªak_scode
[
i
])

75 
is_∑u£bªak
=0;

79 if(
is_∑u£bªak
)

81 
key
=
PAUSEBREAK
;

84 if(
sˇn_code
 == 0xe0)

86 
sˇn_code
=
	`gë_byã_‰om_kbuf
();

87 if(
sˇn_code
== 0x2a)

88 if(
	`gë_byã_‰om_kbuf
() == 0xe0)

89 if(
	`gë_byã_‰om_kbuf
() == 0x37)

91 
key
=
PRINTSCREEN
;

92 
make
=1;

94 if(
sˇn_code
 == 0xb7)

95 if(
	`gë_byã_‰om_kbuf
() == 0xe0)

96 if(
	`gë_byã_‰om_kbuf
() == 0xaa)

98 
key
=
PRINTSCREEN
;

99 
make
=0;

101 if(
key
==0)

102 
code_wôh_E0
=1;

104 if((
key
 !
PAUSEBREAK
Ë&& (key !
PRINTSCREEN
))

106 
make
=(
sˇn_code
 & 
FLAG_BREAK
 ? 
FALSE
 : 
TRUE
);

107 
keyrow
=&
keym≠
[(
sˇn_code
 & 0x7f)* 
MAP_COLS
];

108 
cﬁumn
=0;

110 
ˇps
=
shi·_l
||
shi·_r
;

111 if(
ˇps_lock
)

113 if((
keyrow
[0] >= 'a') && (keyrow[0] <= 'z'))

115 
ˇps
=!caps;

118 if(
ˇps
)

120 
cﬁumn
=1;

122 if(
code_wôh_E0
)

124 
cﬁumn
=2;

125 
code_wôh_E0
=0;

127 
key
=
keyrow
[
cﬁumn
];

129 
key
)

131 
SHIFT_L
:

132 
shi·_l
=
make
;

134 
SHIFT_R
:

135 
shi·_r
=
make
;

137 
CTRL_L
:

138 
˘æ_l
=
make
;

140 
CTRL_R
:

141 
˘æ_r
=
make
;

143 
ALT_L
:

144 
Æt_l
=
make
;

146 
ALT_R
:

147 
Æt_r
=
make
;

149 
CAPS_LOCK
:

150 if(
make
)

152 
ˇps_lock
 = !caps_lock;

153 
	`£t_Àds
();

156 
NUM_LOCK
:

157 if(
make
)

159 
num_lock
=!num_lock;

160 
	`£t_Àds
();

163 
SCROLL_LOCK
:

164 if(
make
)

166 
s¸ﬁl_lock
=!scroll_lock;

167 
	`£t_Àds
();

173 if(
make
 == 1)

175 
∑d
=0;

176 if((
key
>=
PAD_SLASH
Ë&& (key<=
PAD_9
))

178 
∑d
=1;

179 
key
)

181 
PAD_SLASH
:

182 
key
='/';

184 
PAD_STAR
:

185 
key
='*';

187 
PAD_MINUS
:

188 
key
='-';

190 
PAD_PLUS
:

191 
key
='+';

193 
PAD_ENTER
:

194 
key
=
ENTER
;

197 if(
num_lock
 && (
key
>=
PAD_0
Ë&& (key<=
PAD_9
))

199 
key
=key-
PAD_0
+'0';

201 if(
num_lock
 && 
key
 =
PAD_DOT
)

203 
key
='.';

207 
key
)

209 
PAD_HOME
:

210 
key
=
HOME
;

212 
PAD_END
:

213 
key
=
END
;

215 
PAD_PAGEUP
:

216 
key
=
PAGEUP
;

218 
PAD_PAGEDOWN
:

219 
key
=
PAGEDOWN
;

221 
PAD_INS
:

222 
key
=
INSERT
;

224 
PAD_UP
:

225 
key
=
UP
;

227 
PAD_DOWN
:

228 
key
=
DOWN
;

230 
PAD_LEFT
:

231 
key
=
LEFT
;

233 
PAD_RIGHT
:

234 
key
=
RIGHT
;

236 
PAD_DOT
:

237 
key
=
DELETE
;

246 
key
 |
shi·_l
 ? 
FLAG_SHIFT_L
 :0;

247 
key
 |
shi·_r
 ? 
FLAG_SHIFT_R
 :0;

248 
key
 |
˘æ_l
 ? 
FLAG_CTRL_L
 :0;

249 
key
 |
˘æ_r
 ? 
FLAG_CTRL_R
 :0;

250 
key
 |
Æt_l
 ? 
FLAG_ALT_L
 :0;

251 
key
 |
Æt_r
 ? 
FLAG_ALT_R
 :0;

252 
key
 |=
∑d
 ? 
FLAG_PAD
 :0;

254 
	`ö_¥o˚ss
(
p_ây
,
key
);

258 
	}
}

261 
u8
 
	$gë_byã_‰om_kbuf
()

263 
u8
 
sˇn_code
;

264 
kb_ö
.
cou¡
 <=0)

267 
	`dißbÀ_öt
();

268 
sˇn_code
=*(
kb_ö
.
p_èû
++);

269 if(
kb_ö
.
p_èû
 =kb_ö.
buf
+
KB_IN_BYTES
)

271 
kb_ö
.
p_èû
=kb_ö.
buf
;

273 
kb_ö
.
cou¡
--;

274 
	`íabÀ_öt
();

275  
sˇn_code
;

276 
	}
}

278 
	$kb_waô
()

280 
u8
 
kb_°©
;

283 
kb_°©
 = 
	`ö_byã
(
KB_CMD
);

284 }
kb_°©
&0x02);

285 
	}
}

287 
	$kb_ack
()

289 
u8
 
kb_ªad
;

292 
kb_ªad
=
	`ö_byã
(
KB_DATA
);

293 }
kb_ªad
!=
KB_ACK
);

294 
	}
}

296 
	$£t_Àds
()

298 
u8
 
Àds
=(
ˇps_lock
<<2)|(
num_lock
<<1Ë|
s¸ﬁl_lock
;

299 
	`kb_waô
();

300 
	`out_byã
(
KB_DATA
,
LED_CODE
);

301 
	`kb_ack
();

302 
	`kb_waô
();

303 
	`out_byã
(
KB_DATA
,
Àds
);

304 
	`kb_ack
();

305 
	}
}

	@main.c

1 
	~"hód.h
"

3 
	$kî√l_maö
()

5 
ticks
=0;

6 
	`di•_°r
("-----kernel_main begins ----\n");

7 
TASK
* 
p_èsk
=
èsk_èbÀ
;

8 
PROCESS
* 
p_¥oc
 = 
¥oc_èbÀ
;

9 
u8
 
¥ivûege
;

10 
u8
 
Ωl
;

11 
eÊags
;

12 * 
p_èsk_°ack
=
èsk_°ack
+
STACK_SIZE_TOTAL
;

13 
u16
 
£À˘‹_ldt
=
SELECTOR_LDT_FIRST
;

14 
¥io
;

15 
i
;

16 
i
=0;i<
NR_TASKS
+
NR_PROCS
;i++)

18 if(
i
<
NR_TASKS
)

20 
p_èsk
=
èsk_èbÀ
+
i
;

21 
¥ivûege
=
PRIVILEGE_TASK
;

22 
Ωl
=
RPL_TASK
;

23 
eÊags
=0x1202;

24 
¥io
=15;

28 
p_èsk
=
u£r_¥oc_èbÀ
+(
i
-
NR_TASKS
);

29 
¥ivûege
=
PRIVILEGE_USER
;

30 
Ωl
=
RPL_USER
;

31 
eÊags
=0x202;

32 
¥io
=5;

34 
	`°r˝y
(
p_¥oc
->
«me
,
p_èsk
->name);

35 
p_¥oc
->
pid
=
i
;

36 
p_¥oc
->
ldt_£l
=
£À˘‹_ldt
;

37 
	`mem˝y
(&
p_¥oc
->
s_ldts
[0],

38 &
gdt
[
SELECTOR_KERNEL_CS
>>3],

39 (
DESCRIPTOR
));

40 
p_¥oc
->
s_ldts
[0].
©å1
=
DA_C
|
¥ivûege
<<5;

41 
	`mem˝y
(&
p_¥oc
->
s_ldts
[1],

42 &
gdt
[
SELECTOR_KERNEL_DS
>>3],

43 (
DESCRIPTOR
));

44 
p_¥oc
->
s_ldts
[1].
©å1
 =
DA_DRW
 |
¥ivûege
 <<5;

45 
p_¥oc
->
s_ªgs
.
cs
=(0 & 
SA_RPL_MASK
 & 
SA_TI_MASK
 )| 
SA_TIL
 | 
Ωl
;

46 
p_¥oc
->
s_ªgs
.
ds
=(8 & 
SA_RPL_MASK
 & 
SA_TI_MASK
 ) | 
SA_TIL
| 
Ωl
;

47 
p_¥oc
->
s_ªgs
.
es
=(8 & 
SA_RPL_MASK
 & 
SA_TI_MASK
 ) | 
SA_TIL
 |
Ωl
;

48 
p_¥oc
->
s_ªgs
.
fs
=(8 & 
SA_RPL_MASK
 & 
SA_TI_MASK
 ) | 
SA_TIL
 | 
Ωl
;

49 
p_¥oc
->
s_ªgs
.
ss
=(8 & 
SA_RPL_MASK
 & 
SA_TI_MASK
 ) | 
SA_TIL
 | 
Ωl
;

50 
p_¥oc
->
s_ªgs
.
gs
=(
SELECTOR_KERNEL_GS
 & 
SA_RPL_MASK
Ë| 
Ωl
;

51 
p_¥oc
->
s_ªgs
.
eù
=(
u32
Ë
p_èsk
->
öôül_eù
;

52 
p_¥oc
->
s_ªgs
.
e•
=(
u32
Ë
p_èsk_°ack
;

53 
p_¥oc
->
s_ªgs
.
eÊags
=eflags;

55 
p_¥oc
->
ƒ_ây
=0;

56 
p_¥oc
->
Êags
=0;

57 
p_¥oc
->
p_msg
=0;

58 
p_¥oc
->
ªcv‰om
=
NO_TASK
;

59 
p_¥oc
->
£ndto
=
NO_TASK
;

60 
p_¥oc
->
has_öt_msg
=0;

61 
p_¥oc
->
q_£ndög
=0;

62 
p_¥oc
->
√xt_£ndög
=0;

63 
p_¥oc
->
¥i‹ôy
=
¥io
;

64 
p_èsk_°ack
-=
p_èsk
->
°acksize
;

65 
p_¥oc
++;

66 
p_èsk
++;

67 
£À˘‹_ldt
+=1<<3;

70 
k_ªíãr
=0;

71 
p_¥oc_ªady
 = 
¥oc_èbÀ
;

74 
¥oc_èbÀ
[2].
ƒ_ây
=0;

75 
¥oc_èbÀ
[3].
ƒ_ây
=0;

76 
¥oc_èbÀ
[4].
ƒ_ây
=0;

78 
	`öô_˛ock
();

79 
	`ª°¨t
();

84 
	}
}

87 
	$Te°A
()

91 
	`¥ötf
("%d",
	`gë_ticks
());

92 
	`¥ötf
("A");

93 
	`mûli_dñay
(1000);

95 
	}
}

97 
	$Te°B
()

102 
	`mûli_dñay
(1000);

104 
	}
}

106 
	$Te°C
()

111 
	`mûli_dñay
(1000);

113 
	}
}

115 
	$∑nic
(c⁄° *
fmt
,...)

117 
i
;

118 
buf
[256];

119 
va_li°
 
¨g
=(va_li°)((*)&
fmt
+4);

120 
i
=
	`v•rötf
(
buf
,
fmt
,
¨g
);

121 
	`¥ötf
("%¯∑ni¯%s",
MAG_CH_PANIC
,
buf
);

122 
	}
}

124 
	$gë_ticks
()

126 
MESSAGE
 
msg
;

127 
	`ª£t_msg
(&
msg
);

128 
msg
.
ty≥
=
GET_TICKS
;

129 
	`£nd_ªcv
(
BOTH
,
TASK_SYS
,&
msg
);

130  
msg
.
RETVAL
;

131 
	}
}

	@misc.c

1 
	~"hód.h
"

3 
	$•ö
(*
func_«me
)

5 
	`¥ötf
("\n•önög i¿%†...\n",
func_«me
);

8 
	}
}

10 
	$as£πi⁄_Áûuª
(*
exp
,*
fûe
,*
ba£_fûe
,
löe
)

12 
	`¥ötf
("%¯ás£π(%sËÁûed: fûe: %s, ba£_fûe: %s, i¿%d",
MAG_CH_ASSERT
,
exp
,
fûe
,
ba£_fûe
,
löe
);

13 
	`•ö
("assertion_failure()");

14 
__asm__
 
	`__vﬁ©ûe__
("ud2");

15 
	}
}

	@printf.c

1 
	~"hód.h
"

2 
	$¥ötf
(c⁄° *
fmt
, ...)

4 
i
;

5 
buf
[256];

6 
va_li°
 
¨g
=(va_li°)((* )(&
fmt
)+4);

7 
i
=
	`v•rötf
(
buf
,
fmt
,
¨g
);

8 
buf
[
i
]=0;

9 
	`¥ötx
(
buf
);

10  
i
;

11 
	}
}

	@proc.c

1 
	~"hód.h
"

2 
block
(
¥oc
 *
p
);

3 
unblock
(
¥oc
 *
p
);

4 
dódlock
(
§c
,
de°
);

5 
msg_£nd
(
¥oc
 *
cuºít
,
de°
,
MESSAGE
 *
m
);

6 
msg_ª˚ive
(
¥oc
 *
cuºít
,
§c
,
MESSAGE
 *
m
);

7 
£ndªcv
(
fun˘i⁄
,
§c_de°
,
MESSAGE
 *
msg
);

9 
	$sys_gë_ticks
()

11  
ticks
;

12 
	}
}

14 
	$scheduÀ
()

16 
PROCESS
* 
p
;

17 
gª©e°_ticks
=0;

19 !
gª©e°_ticks
)

21 
p
=
¥oc_èbÀ
;p<¥oc_èbÀ+
NR_TASKS
+
NR_PROCS
;p++)

23 if(
p
->
Êags
==0)

25 if(
p
->
ticks
>
gª©e°_ticks
)

27 
gª©e°_ticks
=
p
->
ticks
;

28 
p_¥oc_ªady
=
p
;

32 if(!
gª©e°_ticks
)

34 
p
=
¥oc_èbÀ
;p<¥oc_èbÀ+
NR_TASKS
+
NR_PROCS
;p++)

35 if(
p
->
Êags
==0)

36 
p
->
ticks
ı->
¥i‹ôy
;

39 
	}
}

41 
	$sys_£ndªc
(
fun˘i⁄
,
§c_de°
,
MESSAGE
* 
m
,
¥oc
*
p
)

43 
	`as£π
(
k_ªíãr
==0);

44 
	`as£π
((
§c_de°
 >0 && src_de° < 
NR_TASKS
 + 
NR_PROCS
)

45 || 
§c_de°
 ==
ANY
 || src_de° =
INTERRUPT
);

46 
ªt
=0;

47 
ˇŒî
=
	`¥oc2pid
(
p
);

48 
MESSAGE
* 
mœ
=(MESSAGE*)
	`va2œ
(
ˇŒî
,
m
);

49 
mœ
->
sour˚
=
ˇŒî
;

50 
	`as£π
(
mœ
->
sour˚
 !
§c_de°
);

51 if(
fun˘i⁄
 =
SEND
)

53 
ªt
=
	`msg_£nd
(
p
,
§c_de°
,
m
);

54 if(
ªt
 !=0)

55  
ªt
;

57 if(
fun˘i⁄
 =
RECEIVE
)

59 
ªt
=
	`msg_ª˚ive
(
p
,
§c_de°
,
m
);

60 if(
ªt
 !=0)

61  
ªt
;

65 
	`¥ötf
("proc.c:65");

66 
	`∑nic
("sys_sendrec invalid function: %d (SEND: %d, RECEIVE: %d).",

67 
fun˘i⁄
,
SEND
,
RECEIVE
);

70 
	}
}

72 *
	$va2œ
(
pid
,*
va
)

74 
¥oc
 *
p
=&
¥oc_èbÀ
[
pid
];

75 
u32
 
£g_ba£
=
	`ldt_£g_löór
(
p
,
INDEX_LDT_RW
);

76 
u32
 
œ
=
£g_ba£
 +(u32)
va
;

77 if(
pid
<
NR_TASKS
+
NR_PROCS
)

79 
	`as£π
(
œ
==(
u32
)
va
);

81  (*)
œ
;

82 
	}
}

84 
	$ldt_£g_löór
(
¥oc
 *
p
,
idx
)

86 
des¸ùt‹
 *
d
=&(
p
->
s_ldts
[
idx
]);

87  
d
->
ba£_high
<<24 | d->
ba£_mid
<<16 || d->
ba£_low
;

88 
	}
}

90 
	$ª£t_msg
(
MESSAGE
 *
p
)

92 
	`mem£t
(
p
,0,(
MESSAGE
));

93 
	}
}

95 
	$block
(
¥oc
 *
p
)

97 
	`as£π
(
p
->
Êags
);

98 
	`scheduÀ
();

99 
	}
}

101 
	$unblock
(
¥oc
 *
p
)

103 
	`as£π
(
p
->
Êags
==0);

104 
	}
}

106 
	$dódlock
(
§c
,
de°
)

108 
¥oc
 *
p
=
¥oc_èbÀ
+
de°
;

111 if(
p
->
Êags
 & 
SENDING
)

113 if(
p
->
£ndto
 ==
§c
)

115 
p
=
¥oc_èbÀ
+
de°
;

116 
	`¥ötf
("=_=%s",
p
->
«me
);

119 
	`as£π
(
p
->
p_msg
);

120 
p
=
¥oc_èbÀ
+p->
£ndto
;

121 
	`¥ötf
("->%s",
p
->
«me
);

122 }
p
!=
¥oc_èbÀ
+
§c
);

123 
	`¥ötf
("=_=");

126 
p
=
¥oc_èbÀ
+p->
£ndto
;

134 
	}
}

137 
	$msg_£nd
(
¥oc
 *
cuºít
,
de°
,
MESSAGE
 *
m
)

139 
¥oc
 *
£ndî
=
cuºít
;

140 
¥oc
 *
p_de°
=
¥oc_èbÀ
+
de°
;

141 
	`as£π
(
	`¥oc2pid
(
£ndî
)!=
de°
);

142 if(
	`dódlock
(
	`¥oc2pid
(
£ndî
),
de°
))

144 
	`∑nic
(">>DEADLOCK<< %s->%s",
£ndî
->
«me
,
p_de°
->name);

146 if((
p_de°
->
Êags
 & 
RECEIVING
) &&

147 (
p_de°
->
ªcv‰om
 =
	`¥oc2pid
(
£ndî
Ë||Ö_de°->ªcv‰om=
ANY
))

149 
	`as£π
(
p_de°
->
p_msg
);

150 
	`as£π
(
m
);

152 
	`phys_c›y
(
	`va2œ
(
de°
,
p_de°
->
p_msg
),

153 
	`va2œ
(
	`¥oc2pid
(
£ndî
),
m
),

154 (
MESSAGE
));

155 
p_de°
->
p_msg
=0;

156 
p_de°
->
Êags
&=~
RECEIVING
;

157 
p_de°
->
ªcv‰om
=
NO_TASK
;

158 
	`unblock
(
p_de°
);

159 
	`as£π
(
p_de°
->
Êags
 ==0);

160 
	`as£π
(
p_de°
->
p_msg
 ==0);

161 
	`as£π
(
p_de°
->
ªcv‰om
==
NO_TASK
);

162 
	`as£π
(
p_de°
->
£ndto
 ==
NO_TASK
);

163 
	`as£π
(
£ndî
->
Êags
==0);

164 
	`as£π
(
£ndî
->
p_msg
==0);

165 
	`as£π
(
£ndî
->
ªcv‰om
==
NO_TASK
);

166 
	`as£π
(
£ndî
->
£ndto
==
NO_TASK
);

170 
£ndî
->
Êags
 |
SENDING
;

172 
£ndî
->
£ndto
=
de°
;

173 
£ndî
->
p_msg
=
m
;

174 
¥oc
 *
p
;

175 if(
p_de°
->
q_£ndög
)

177 
p
=
p_de°
->
q_£ndög
;

178 
p
->
√xt_£ndög
)

180 
p
ı->
√xt_£ndög
;

182 
p
->
√xt_£ndög
=
£ndî
;

186 
p_de°
->
q_£ndög
=
£ndî
;

188 
£ndî
->
√xt_£ndög
=0;

189 
	`block
(
£ndî
);

191 
	`as£π
(
£ndî
->
Êags
==
SENDING
);

192 
	`as£π
(
£ndî
->
p_msg
!=0);

193 
	`as£π
(
£ndî
->
ªcv‰om
==
NO_TASK
);

194 
	`as£π
(
£ndî
->
£ndto
==
de°
);

197 
	}
}

199 
	$msg_ª˚ive
(
¥oc
 *
cuºít
,
§c
,
MESSAGE
 *
m
)

201 
¥oc
 *
p_who_ªcv
=
cuºít
;

202 
¥oc
 *
p_‰om
=0;

203 
¥oc
 *
¥ev
=0;

204 
c›yok
=0;

206 if((
p_who_ªcv
->
has_öt_msg
) &&

207 ((
§c
==
ANY
Ë|| (§¯==
INTERRUPT
)))

209 
MESSAGE
 
msg
;

210 
	`ª£t_msg
(&
msg
);

211 
msg
.
sour˚
=
INTERRUPT
;

212 
msg
.
ty≥
=
HARD_INT
;

213 
	`phys_c›y
(
	`va2œ
(
	`¥oc2pid
(
p_who_ªcv
),
m
),&
msg
,(
MESSAGE
));

214 
p_who_ªcv
->
has_öt_msg
=0;

215 
	`as£π
(
m
);

216 
	`as£π
(
p_who_ªcv
->
Êags
==0);

217 
	`as£π
(
p_who_ªcv
->
p_msg
==0);

218 
	`as£π
(
p_who_ªcv
->
£ndto
==
NO_TASK
);

219 
	`as£π
(
p_who_ªcv
->
has_öt_msg
==0);

222 if(
§c
==
ANY
)

224 if(
p_who_ªcv
->
q_£ndög
)

226 
p_‰om
=
p_who_ªcv
->
q_£ndög
;

227 
c›yok
=1;

230 if(
§c
>=0 &&

231 
§c
< 
NR_TASKS
+
NR_PROCS
)

233 
p_‰om
=&
¥oc_èbÀ
[
§c
];

234 if((
p_‰om
->
Êags
 & 
SENDING
) &&

235 (
p_‰om
->
£ndto
 =
	`¥oc2pid
(
p_who_ªcv
)))

237 
c›yok
=1;

238 
¥oc
 *
p
=
p_who_ªcv
->
q_£ndög
;

239 
	`as£π
(
p
);

240 
p
)

242 if(
	`¥oc2pid
(
p
Ë==
§c
)

244 
¥ev
=
p
;

245 
p
ı->
√xt_£ndög
;

250 if(
c›yok
)

252 if(
p_‰om
 ==
p_who_ªcv
->
q_£ndög
)

254 
p_who_ªcv
->
q_£ndög
=
p_‰om
->
√xt_£ndög
;

255 
p_‰om
->
√xt_£ndög
=0;

259 
¥ev
->
√xt_£ndög
=
p_‰om
->next_sending;

260 
p_‰om
->
√xt_£ndög
=0;

263 
	`phys_c›y
(
	`va2œ
(
	`¥oc2pid
(
p_who_ªcv
),
m
),

264 
	`va2œ
(
	`¥oc2pid
(
p_‰om
),p_‰om->
p_msg
),

265 (
MESSAGE
));

266 
p_‰om
->
p_msg
=0;

267 
p_‰om
->
£ndto
=
NO_TASK
;

268 
p_‰om
->
Êags
&=~
SENDING
;

269 
	`unblock
(
p_‰om
);

274 
p_who_ªcv
->
Êags
|=
RECEIVING
;

275 
p_who_ªcv
->
p_msg
=
m
;

276 
p_who_ªcv
->
ªcv‰om
=
§c
;

277 
	`block
(
p_who_ªcv
);

281 
	}
}

283 
	$£nd_ªcv
(
fun˘i⁄
,
§c_de°
,
MESSAGE
 *
msg
)

285 
ªt
=0;

286 if(
fun˘i⁄
==
RECEIVE
)

287 
	`mem£t
(
msg
,0,(
MESSAGE
));

288 
fun˘i⁄
)

290 
BOTH
:

291 
ªt
=
	`£ndªc
(
SEND
,
§c_de°
,
msg
);

292 if(
ªt
==0)

293 
ªt
=
	`£ndªc
(
RECEIVE
,
§c_de°
,
msg
);

295 
SEND
:

296 
RECEIVE
:

297 
ªt
 = 
	`£ndªc
(
fun˘i⁄
,
§c_de°
,
msg
);

300 
	`as£π
((
fun˘i⁄
==
BOTH
) ||

301 (
fun˘i⁄
=
SEND
) ||

302 (
fun˘i⁄
 =
RECEIVE
));

305  
ªt
;

306 
	}
}

	@protect.c

1 
	~"hód.h
"

3 
öô_idt_desc
(
ve˘‹
, 
u8
 
desc_ty≥
,

4 
öt_h™dÀr
 
h™dÀr
, 
¥ivûege
);

5 
öô_des¸ùt‹
(
DESCRIPTOR
* 
p_desc
,
u32
 
ba£
 ,u32 
limô
,
u16
 
©åibuã
);

8 
divide_îr‹
();

9 
sögÀ_°ï_ex˚±i⁄
();

10 
nmi
();

11 
bªakpoöt_ex˚±i⁄
();

12 
ovîÊow
();

13 
bounds_check
();

14 
övÆ_›code
();

15 
c›r_nŸ_avaûabÀ
();

16 
doubÀ_Áu…
();

17 
c›r_£g_ovîrun
();

18 
övÆ_tss
();

19 
£gmít_nŸ_¥e£¡
();

20 
°ack_ex˚±i⁄
();

21 
gíîÆ_¥Ÿe˘i⁄
();

22 
∑ge_Áu…
();

23 
c›r_îr‹
();

24 
hwöt00
();

25 
hwöt01
();

26 
hwöt02
();

27 
hwöt03
();

28 
hwöt04
();

29 
hwöt05
();

30 
hwöt06
();

31 
hwöt07
();

32 
hwöt08
();

33 
hwöt09
();

34 
hwöt10
();

35 
hwöt11
();

36 
hwöt12
();

37 
hwöt13
();

38 
hwöt14
();

39 
hwöt15
();

41 
	$öô_¥Ÿ
()

43 
	`öô_8259A
();

45 
	`öô_idt_desc
(
INT_VECTOR_SYS_CALL
,
DA_386IG©e
,

46 
sys_ˇŒ
,
PRIVILEGE_USER
);

49 
	`öô_idt_desc
(
INT_VECTOR_DIVIDE
, 
DA_386IG©e
,

50 
divide_îr‹
, 
PRIVILEGE_KERNEL
);

52 
	`öô_idt_desc
(
INT_VECTOR_DEBUG
, 
DA_386IG©e
,

53 
sögÀ_°ï_ex˚±i⁄
, 
PRIVILEGE_KERNEL
);

55 
	`öô_idt_desc
(
INT_VECTOR_NMI
, 
DA_386IG©e
,

56 
nmi
, 
PRIVILEGE_KERNEL
);

58 
	`öô_idt_desc
(
INT_VECTOR_BREAKPOINT
, 
DA_386IG©e
,

59 
bªakpoöt_ex˚±i⁄
, 
PRIVILEGE_USER
);

61 
	`öô_idt_desc
(
INT_VECTOR_OVERFLOW
, 
DA_386IG©e
,

62 
ovîÊow
, 
PRIVILEGE_USER
);

64 
	`öô_idt_desc
(
INT_VECTOR_BOUNDS
, 
DA_386IG©e
,

65 
bounds_check
, 
PRIVILEGE_KERNEL
);

67 
	`öô_idt_desc
(
INT_VECTOR_INVAL_OP
, 
DA_386IG©e
,

68 
övÆ_›code
, 
PRIVILEGE_KERNEL
);

70 
	`öô_idt_desc
(
INT_VECTOR_COPROC_NOT
, 
DA_386IG©e
,

71 
c›r_nŸ_avaûabÀ
, 
PRIVILEGE_KERNEL
);

73 
	`öô_idt_desc
(
INT_VECTOR_DOUBLE_FAULT
, 
DA_386IG©e
,

74 
doubÀ_Áu…
, 
PRIVILEGE_KERNEL
);

76 
	`öô_idt_desc
(
INT_VECTOR_COPROC_SEG
, 
DA_386IG©e
,

77 
c›r_£g_ovîrun
, 
PRIVILEGE_KERNEL
);

79 
	`öô_idt_desc
(
INT_VECTOR_INVAL_TSS
, 
DA_386IG©e
,

80 
övÆ_tss
, 
PRIVILEGE_KERNEL
);

82 
	`öô_idt_desc
(
INT_VECTOR_SEG_NOT
, 
DA_386IG©e
,

83 
£gmít_nŸ_¥e£¡
, 
PRIVILEGE_KERNEL
);

85 
	`öô_idt_desc
(
INT_VECTOR_STACK_FAULT
, 
DA_386IG©e
,

86 
°ack_ex˚±i⁄
, 
PRIVILEGE_KERNEL
);

88 
	`öô_idt_desc
(
INT_VECTOR_PROTECTION
, 
DA_386IG©e
,

89 
gíîÆ_¥Ÿe˘i⁄
, 
PRIVILEGE_KERNEL
);

91 
	`öô_idt_desc
(
INT_VECTOR_PAGE_FAULT
, 
DA_386IG©e
,

92 
∑ge_Áu…
, 
PRIVILEGE_KERNEL
);

94 
	`öô_idt_desc
(
INT_VECTOR_COPROC_ERR
, 
DA_386IG©e
,

95 
c›r_îr‹
, 
PRIVILEGE_KERNEL
);

97 
	`öô_idt_desc
(
INT_VECTOR_IRQ0
 + 0, 
DA_386IG©e
,

98 
hwöt00
, 
PRIVILEGE_KERNEL
);

100 
	`öô_idt_desc
(
INT_VECTOR_IRQ0
 + 1, 
DA_386IG©e
,

101 
hwöt01
, 
PRIVILEGE_KERNEL
);

103 
	`öô_idt_desc
(
INT_VECTOR_IRQ0
 + 2, 
DA_386IG©e
,

104 
hwöt02
, 
PRIVILEGE_KERNEL
);

106 
	`öô_idt_desc
(
INT_VECTOR_IRQ0
 + 3, 
DA_386IG©e
,

107 
hwöt03
, 
PRIVILEGE_KERNEL
);

109 
	`öô_idt_desc
(
INT_VECTOR_IRQ0
 + 4, 
DA_386IG©e
,

110 
hwöt04
, 
PRIVILEGE_KERNEL
);

112 
	`öô_idt_desc
(
INT_VECTOR_IRQ0
 + 5, 
DA_386IG©e
,

113 
hwöt05
, 
PRIVILEGE_KERNEL
);

115 
	`öô_idt_desc
(
INT_VECTOR_IRQ0
 + 6, 
DA_386IG©e
,

116 
hwöt06
, 
PRIVILEGE_KERNEL
);

118 
	`öô_idt_desc
(
INT_VECTOR_IRQ0
 + 7, 
DA_386IG©e
,

119 
hwöt07
, 
PRIVILEGE_KERNEL
);

121 
	`öô_idt_desc
(
INT_VECTOR_IRQ8
 + 0, 
DA_386IG©e
,

122 
hwöt08
, 
PRIVILEGE_KERNEL
);

124 
	`öô_idt_desc
(
INT_VECTOR_IRQ8
 + 1, 
DA_386IG©e
,

125 
hwöt09
, 
PRIVILEGE_KERNEL
);

127 
	`öô_idt_desc
(
INT_VECTOR_IRQ8
 + 2, 
DA_386IG©e
,

128 
hwöt10
, 
PRIVILEGE_KERNEL
);

130 
	`öô_idt_desc
(
INT_VECTOR_IRQ8
 + 3, 
DA_386IG©e
,

131 
hwöt11
, 
PRIVILEGE_KERNEL
);

133 
	`öô_idt_desc
(
INT_VECTOR_IRQ8
 + 4, 
DA_386IG©e
,

134 
hwöt12
, 
PRIVILEGE_KERNEL
);

136 
	`öô_idt_desc
(
INT_VECTOR_IRQ8
 + 5, 
DA_386IG©e
,

137 
hwöt13
, 
PRIVILEGE_KERNEL
);

139 
	`öô_idt_desc
(
INT_VECTOR_IRQ8
 + 6, 
DA_386IG©e
,

140 
hwöt14
, 
PRIVILEGE_KERNEL
);

142 
	`öô_idt_desc
(
INT_VECTOR_IRQ8
 + 7, 
DA_386IG©e
,

143 
hwöt15
, 
PRIVILEGE_KERNEL
);

144 
i
;

145 
PROCESS
* 
p_¥oc
=
¥oc_èbÀ
;

146 
u16
 
£À˘‹_ldt
=
INDEX_LDT_FIRST
<<3;

147 
i
=0;i<
NR_TASKS
+
NR_PROCS
;i++)

149 
	`öô_des¸ùt‹
(&
gdt
[
£À˘‹_ldt
>>3],

150 
	`vú2phys
(
	`£g2phys
(
SELECTOR_KERNEL_DS
),
¥oc_èbÀ
[
i
].
s_ldts
),

151 
LDT_SIZE
*(
DESCRIPTOR
)-1,
DA_LDT
);

152 
p_¥oc
++;

153 
£À˘‹_ldt
+=1<<3;

155 
	`mem£t
(&
tss
,0,(tss));

156 
tss
.
ss0
=
SELECTOR_KERNEL_DS
;

157 
	`öô_des¸ùt‹
(&
gdt
[
INDEX_TSS
],

158 
	`vú2phys
(
	`£g2phys
(
SELECTOR_KERNEL_DS
),&
tss
),

159 (
tss
)-1,
DA_386TSS
);

160 
tss
.
ioba£
=(tss);

162 
	}
}

165 
u32
 
	$£g2phys
(
u16
 
£g
)

167 
DESCRIPTOR
* 
p_de°
=&
gdt
[
£g
 >> 3];

168  (
p_de°
->
ba£_high
 << 24 |Ö_de°->
ba£_mid
 <<16 |Ö_de°->
ba£_low
);

170 
	}
}

172 
	$öô_idt_desc
(
ve˘‹
, 
u8
 
desc_ty≥
,

173 
öt_h™dÀr
 
h™dÀr
, 
¥ivûege
)

175 
GATE
 * 
p_g©e
 = &
idt
[
ve˘‹
];

176 
u32
 
ba£
 = (u32)
h™dÀr
;

177 
p_g©e
->
off£t_low
 = 
ba£
 & 0xFFFF;

178 
p_g©e
->
£À˘‹
 = 
SELECTOR_KERNEL_CS
;

179 
p_g©e
->
dcou¡
 = 0;

180 
p_g©e
->
©å
 = 
desc_ty≥
 | (
¥ivûege
 << 5);

181 
p_g©e
->
off£t_high
 = (
ba£
 >> 16) & 0xFFFF;

182 
	}
}

184 
	$öô_des¸ùt‹
(
DESCRIPTOR
* 
p_desc
,
u32
 
ba£
,u32 
limô
,
u16
 
©åibuã
)

186 
p_desc
->
limô_low
=
limô
&0x0ffff;

187 
p_desc
->
ba£_low
=
ba£
 & 0x0ffff;

188 
p_desc
->
ba£_mid
=(
ba£
>>16) & 0xff;

189 
p_desc
->
©å1
 =
©åibuã
 & 0xff;

190 
p_desc
->
limô_high_©å2
=((
limô
>>16Ë& 0xfË|((
©åibuã
 >>8) & 0xf0);

191 
p_desc
->
ba£_high
=(
ba£
>>24) & 0xff;

192 
	}
}

194 
	$ex˚±i⁄_h™dÀr
(
vec_no
,
îr_code
,
eù
,
cs
,
eÊags
)

196 
i
;

197 
ãxt_cﬁ‹
 = 0x74;

199 * 
îr_msg
[] = {"#DE Divide Error",

222 
di•_pos
 = 0;

223 
i
=0;i<80*5;i++){

224 
	`di•_°r
(" ");

226 
di•_pos
 = 0;

228 
	`di•_cﬁ‹_°r
("Ex˚±i⁄! --> ", 
ãxt_cﬁ‹
);

229 
	`di•_cﬁ‹_°r
(
îr_msg
[
vec_no
], 
ãxt_cﬁ‹
);

230 
	`di•_cﬁ‹_°r
("\n\n", 
ãxt_cﬁ‹
);

231 
	`di•_cﬁ‹_°r
("EFLAGS:", 
ãxt_cﬁ‹
);

232 
	`di•_öt
(
eÊags
);

233 
	`di•_cﬁ‹_°r
("CS:", 
ãxt_cﬁ‹
);

234 
	`di•_öt
(
cs
);

235 
	`di•_cﬁ‹_°r
("EIP:", 
ãxt_cﬁ‹
);

236 
	`di•_öt
(
eù
);

238 if(
îr_code
 != 0xFFFFFFFF){

239 
	`di•_cﬁ‹_°r
("Eº‹ code:", 
ãxt_cﬁ‹
);

240 
	`di•_öt
(
îr_code
);

242 
	}
}

	@start.c

1 
	~"hód.h
"

3 
	$c°¨t
()

5 
	`di•_°r
("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n------cstart------\n");

6 
	`mem˝y
(&
gdt
,(*)(*((
u32
*)(&
gdt_±r
[2]))),*((
u16
*)(&gdt_ptr[0]))+1);

7 
u16
* 
p_gdt_limô
=(u16*)(&
gdt_±r
[0]);

8 
u32
* 
p_gdt_ba£
 = (u32*)(&
gdt_±r
[2]);

9 *
p_gdt_limô
 = 
GDT_SIZE
 * (
DESCRIPTOR
) -1;

10 *
p_gdt_ba£
 = (
u32
Ë&
gdt
;

12 
u16
* 
p_idt_limô
=(u16*)(&
idt_±r
[0]);

13 
u32
* 
p_idt_ba£
=(u32*)(&
idt_±r
[2]);

14 *
p_idt_limô
 = 
IDT_SIZE
 *(
GATE
) -1;

15 *
p_idt_ba£
(
u32
)&
idt
;

17 
	`öô_¥Ÿ
();

19 
	`di•_°r
("-------cstartÉnds------\n");

20 
	}
}

	@syscall.S

1 
	~"sc⁄°.h
"

3 .
£t
 
	g_NR_¥ötx
,0

4 .
£t
 
	g_NR_£ndªc
,1

5 .
£t
 
	gINT_VECTOR_SYS_CALL
,0x90

7 .
globÆ
 
	g¥ötx
,
£ndªc


9 
	g¥ötx
:

10 
mov
 
$_NR_¥ötx
,%
óx


11 
	gmov
 4(%
	ge•
),%
edx


12 
$INT_VECTOR_SYS_CALL


13 
ªt


15 
	g£ndªc
:

16 
mov
 
$_NR_£ndªc
,%
óx


17 
	gmov
 4(%
	ge•
),%
ebx


18 
	gmov
 8(%
	ge•
),%
ecx


19 
	gmov
 12(%
	ge•
),%
edx


20 
$INT_VECTOR_SYS_CALL


21 
	gªt


	@systask.c

1 
	~"hód.h
"

3 
	$èsk_sys
()

5 
MESSAGE
 
msg
;

8 
	`£nd_ªcv
(
RECEIVE
,
ANY
,&
msg
);

9 
§c
=
msg
.
sour˚
;

10 
msg
.
ty≥
)

12 
GET_TICKS
:

13 
msg
.
RETVAL
=
ticks
;

14 
	`£nd_ªcv
(
SEND
,
§c
,&
msg
);

17 
	`∑nic
("unknown msgÅype");

21 
	}
}

	@tty.c

1 
	~"hód.h
"

2 
	~"keybﬂrd.h
"

4 
öô_ây
(
TTY
* 
p_ây
);

5 
ây_do_ªad
(
TTY
* 
p_ây
);

6 
ây_do_wrôe
(
TTY
* 
p_ây
);

7 
put_key
(
TTY
* 
ây
,
u32
 
key
);

9 
	$èsk_ây
()

11 
TTY
* 
p_ây
;

12 
	`öô_keybﬂrd
();

14 
p_ây
=
ây_èbÀ
;p_ây<ây_èbÀ+
NR_CONSOLES
;p_tty++)

16 
	`öô_ây
(
p_ây
);

18 
	`£À˘_c⁄sﬁe
(0);

21 
p_ây
=
ây_èbÀ
;p_ây<ây_èbÀ+
NR_CONSOLES
;p_tty++)

23 
	`ây_do_ªad
(
p_ây
);

24 
	`ây_do_wrôe
(
p_ây
);

27 
	}
}

29 
	$öô_ây
(
TTY
* 
p_ây
)

31 
p_ây
->
öbuf_cou¡
=0;

32 
p_ây
->
p_öbuf_hód
ı_ây->
p_öbuf_èû
ı_ây->
ö_buf
;

33 
	`öô_s¸ìn
(
p_ây
);

34 
	}
}

36 
	$ây_do_ªad
(
TTY
* 
p_ây
)

38 if(
	`is_cuºít_c⁄sﬁe
(
p_ây
->
p_c⁄sﬁe
))

40 
	`keybﬂrd_ªad
(
p_ây
);

42 
	}
}

44 
	$ây_do_wrôe
(
TTY
* 
p_ây
)

46 if(
p_ây
->
öbuf_cou¡
>0)

48 
ch
=*(
p_ây
->
p_öbuf_èû
++);

49 if(
p_ây
->
p_öbuf_èû
 =p_ây->
ö_buf
+
TTY_IN_BYTES
)

51 
p_ây
->
p_öbuf_èû
ı_ây->
ö_buf
;

53 
p_ây
->
öbuf_cou¡
--;

54 
	`out_ch¨
(
p_ây
->
p_c⁄sﬁe
,
ch
);

56 
	}
}

58 
	$ây_wrôe
(
TTY
* 
p_ây
,* 
buf
,
Àn
)

60 * 
p
=
buf
;

61 
i
=
Àn
;

62 
i
)

64 
	`out_ch¨
(
p_ây
->
p_c⁄sﬁe
,*
p
++);

65 
i
--;

67 
	}
}

69 
	$sys_wrôe
(* 
buf
,
Àn
,
PROCESS
* 
p_¥oc
)

71 
	`ây_wrôe
(&
ây_èbÀ
[
p_¥oc
->
ƒ_ây
],
buf
,
Àn
);

73 
	}
}

74 
	$put_key
(
TTY
* 
p_ây
,
u32
 
key
)

76 if(
p_ây
->
öbuf_cou¡
<
TTY_IN_BYTES
)

78 *(
p_ây
->
p_öbuf_hód
++)=
key
;

79 if(
p_ây
->
p_öbuf_hód
=ı_ây->
ö_buf
+
TTY_IN_BYTES
)

81 
p_ây
->
p_öbuf_hód
ı_ây->
ö_buf
;

83 
p_ây
->
öbuf_cou¡
++;

85 
	}
}

87 
	$ö_¥o˚ss
(
TTY
* 
p_ây
,
u32
 
key
)

89 if(!(
key
 & 
FLAG_EXT
))

91 
	`put_key
(
p_ây
,
key
);

95 
øw_code
=
key
& 
MASK_RAW
;

96 
øw_code
)

98 
ENTER
:

99 
	`put_key
(
p_ây
,'\n');

101 
BACKSPACE
:

102 
	`put_key
(
p_ây
,'\b');

104 
UP
:

105 if((
key
 & 
FLAG_SHIFT_L
Ë|| (key& 
FLAG_SHIFT_R
))

107 
	`s¸ﬁl_s¸ìn
(
p_ây
->
p_c⁄sﬁe
,
SCR_UP
);

110 
DOWN
:

111 if((
key
 & 
FLAG_SHIFT_L
Ë|| (key& 
FLAG_SHIFT_R
))

113 
	`s¸ﬁl_s¸ìn
(
p_ây
->
p_c⁄sﬁe
,
SCR_DN
);

116 
F1
:

117 
F2
:

118 
F3
:

119 
F4
:

120 
F5
:

121 
F6
:

122 
F7
:

123 if((
key
 & 
FLAG_ALT_L
Ë|| (key & 
FLAG_ALT_R
))

125 
	`£À˘_c⁄sﬁe
(
øw_code
-
F1
);

130 
	}
}

132 
	$sys_¥ötx
(
_unsued1
,
_unu£d2
,*
s
,
¥oc
 *
p_¥oc
)

134 c⁄° *
p
;

135 
ch
;

136 
ªíãr_îr
[]=" k_reenter is incorrrect for unknownÑeason";

137 
ªíãr_îr
[0]=
MAG_CH_PANIC
;

139 if(
k_ªíãr
==0)

140 
p
=
	`va2œ
(
	`¥oc2pid
(
p_¥oc
),
s
);

141 if(
k_ªíãr
>0)

142 
p
=
s
;

144 
p
=
ªíãr_îr
;

146 if((*
p
==
MAG_CH_PANIC
) ||

147 (*
p
==
MAG_CH_ASSERT
 && 
p_¥oc_ªady
<&
¥oc_èbÀ
[
NR_TASKS
]))

149 
	`dißbÀ_öt
();

150 *
v
=(*)
V_MEM_BASE
;

151 c⁄° * 
q
=
p
+1;

152 
v
<(*)(
V_MEM_BASE
+
V_MEM_SIZE
))

154 *
v
++=*
q
++;

155 *
v
++=
RED_CHAR
;

156 if(!*
q
)

158 (()
v
-
V_MEM_BASE
Ë+(
SCREEN_WIDTH
*16))

160 
v
++;

161 *
v
++=
GRAY_CHAR
;

163 
q
=
p
+1;

166 
__asm__
 
	`__vﬁ©ûe__
("hlt");

168 (
ch
=*
p
++)!=0)

170 if(
ch
=
MAG_CH_PANIC
 || ch=
MAG_CH_ASSERT
)

174 
	`out_ch¨
(
ây_èbÀ
[
p_¥oc
->
ƒ_ây
].
p_c⁄sﬁe
,
ch
);

177 
	}
}

	@vsprintf.c

1 
	~"ty≥.h
"

2 
	~"c⁄°.h
"

3 
	~"°rög.h
"

5 *
	$i2a
(
vÆ
,
ba£
,**
ps
)

7 
m
=
vÆ
 %
ba£
;

8 
q
=
vÆ
/
ba£
;

9 if(
q
)

11 
	`i2a
(
q
,
ba£
,
ps
);

13 *(*
ps
)++=(
m
<10)? (m+'0'): (m-10+'A');

14  *
ps
;

15 
	}
}

18 
	$v•rötf
(* 
buf
,c⁄° * 
fmt
,
va_li°
 
¨gs
)

20 * 
p
;

21 
va_li°
 
p_√xt_¨g
=
¨gs
;

22 
m
;

23 
ö√r_buf
[
STR_DEFAULT_LEN
];

24 
cs
;

25 
Æign_ƒ
;

26 
p
=
buf
;*
fmt
;fmt++)

28 if(*
fmt
 != '%')

30 *
p
++=*
fmt
;

35 
Æign_ƒ
=0;

37 
fmt
++;

38 if(*
fmt
 =='%')

40 *
p
++=*
fmt
;

43 if(*
fmt
=='0')

45 
cs
='0';

46 
fmt
++;

50 
cs
=' ';

52 (()(*
fmt
)>='0') &&

53 (()(*
fmt
)<='9'))

55 
Æign_ƒ
*=10;

56 
Æign_ƒ
+=*
fmt
-'0';

57 
fmt
++;

59 *
q
=
ö√r_buf
;

60 
	`mem£t
(
q
,0,(
ö√r_buf
));

62 *
fmt
)

65 *
q
++=*((*)
p_√xt_¨g
);

66 
p_√xt_¨g
+=4;

69 
m
=*((*)
p_√xt_¨g
);

70 
	`i2a
(
m
,16,&
q
);

71 
p_√xt_¨g
+=4;

74 
m
=*((*)
p_√xt_¨g
);

75 if(
m
<0)

77 
m
=m*(-1);

78 *
q
++='-';

80 
	`i2a
(
m
,10,&
q
);

81 
p_√xt_¨g
+=4;

84 
	`°r˝y
(
q
,(*((**)
p_√xt_¨g
)));

85 
q
+=
	`°æí
(*((**)
p_√xt_¨g
));

86 
p_√xt_¨g
+=4;

91 
k
;

92 
k
=0;k<((
Æign_ƒ
 >
	`°æí
(
ö√r_buf
))?

93 (
Æign_ƒ
-
	`°æí
(
ö√r_buf
)): 0);
k
++)

95 *
p
++=
cs
;

97 
q
=
ö√r_buf
;

98 *
q
)

100 *
p
++=*
q
++;

103 *
p
=0;

104  (
p
-
buf
);

105 
	}
}

	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC99


98 #unde‡
__USE_ISOC95


99 #unde‡
__USE_POSIX


100 #unde‡
__USE_POSIX2


101 #unde‡
__USE_POSIX199309


102 #unde‡
__USE_POSIX199506


103 #unde‡
__USE_XOPEN


104 #unde‡
__USE_XOPEN_EXTENDED


105 #unde‡
__USE_UNIX98


106 #unde‡
__USE_XOPEN2K


107 #unde‡
__USE_XOPEN2KXSI


108 #unde‡
__USE_XOPEN2K8


109 #unde‡
__USE_XOPEN2K8XSI


110 #unde‡
__USE_LARGEFILE


111 #unde‡
__USE_LARGEFILE64


112 #unde‡
__USE_FILE_OFFSET64


113 #unde‡
__USE_BSD


114 #unde‡
__USE_SVID


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__FAVOR_BSD


121 #unde‡
__KERNEL_STRICT_NAMES


125 #i‚de‡
_LOOSE_KERNEL_NAMES


126 
	#__KERNEL_STRICT_NAMES


	)

130 
	#__USE_ANSI
 1

	)

139 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


140 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

141 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

143 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

148 #i‡
deföed
 
_BSD_SOURCE
 && \

149 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

150 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

151 
	#__FAVOR_BSD
 1

	)

155 #ifde‡
_GNU_SOURCE


156 #unde‡
_ISOC95_SOURCE


157 
	#_ISOC95_SOURCE
 1

	)

158 #unde‡
_ISOC99_SOURCE


159 
	#_ISOC99_SOURCE
 1

	)

160 #unde‡
_POSIX_SOURCE


161 
	#_POSIX_SOURCE
 1

	)

162 #unde‡
_POSIX_C_SOURCE


163 
	#_POSIX_C_SOURCE
 200809L

	)

164 #unde‡
_XOPEN_SOURCE


165 
	#_XOPEN_SOURCE
 700

	)

166 #unde‡
_XOPEN_SOURCE_EXTENDED


167 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

168 #unde‡
_LARGEFILE64_SOURCE


169 
	#_LARGEFILE64_SOURCE
 1

	)

170 #unde‡
_BSD_SOURCE


171 
	#_BSD_SOURCE
 1

	)

172 #unde‡
_SVID_SOURCE


173 
	#_SVID_SOURCE
 1

	)

174 #unde‡
_ATFILE_SOURCE


175 
	#_ATFILE_SOURCE
 1

	)

180 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

181 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

182 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

183 
	#_BSD_SOURCE
 1

	)

184 
	#_SVID_SOURCE
 1

	)

191 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

192 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

193 
	#__USE_ISOC99
 1

	)

197 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

198 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

199 
	#__USE_ISOC95
 1

	)

204 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

205 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

206 
	#_POSIX_SOURCE
 1

	)

207 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

208 
	#_POSIX_C_SOURCE
 2

	)

209 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

210 
	#_POSIX_C_SOURCE
 199506L

	)

211 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

212 
	#_POSIX_C_SOURCE
 200112L

	)

214 
	#_POSIX_C_SOURCE
 200809L

	)

216 
	#__USE_POSIX_IMPLICITLY
 1

	)

219 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


220 
	#__USE_POSIX
 1

	)

223 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


224 
	#__USE_POSIX2
 1

	)

227 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

228 
	#__USE_POSIX199309
 1

	)

231 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

232 
	#__USE_POSIX199506
 1

	)

235 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

236 
	#__USE_XOPEN2K
 1

	)

237 #unde‡
__USE_ISOC95


238 
	#__USE_ISOC95
 1

	)

239 #unde‡
__USE_ISOC99


240 
	#__USE_ISOC99
 1

	)

243 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

244 
	#__USE_XOPEN2K8
 1

	)

245 #unde‡
_ATFILE_SOURCE


246 
	#_ATFILE_SOURCE
 1

	)

249 #ifdef 
_XOPEN_SOURCE


250 
	#__USE_XOPEN
 1

	)

251 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

252 
	#__USE_XOPEN_EXTENDED
 1

	)

253 
	#__USE_UNIX98
 1

	)

254 #unde‡
_LARGEFILE_SOURCE


255 
	#_LARGEFILE_SOURCE
 1

	)

256 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

258 
	#__USE_XOPEN2K8
 1

	)

259 
	#__USE_XOPEN2K8XSI
 1

	)

261 
	#__USE_XOPEN2K
 1

	)

262 
	#__USE_XOPEN2KXSI
 1

	)

263 #unde‡
__USE_ISOC95


264 
	#__USE_ISOC95
 1

	)

265 #unde‡
__USE_ISOC99


266 
	#__USE_ISOC99
 1

	)

269 #ifde‡
_XOPEN_SOURCE_EXTENDED


270 
	#__USE_XOPEN_EXTENDED
 1

	)

275 #ifde‡
_LARGEFILE_SOURCE


276 
	#__USE_LARGEFILE
 1

	)

279 #ifde‡
_LARGEFILE64_SOURCE


280 
	#__USE_LARGEFILE64
 1

	)

283 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

284 
	#__USE_FILE_OFFSET64
 1

	)

287 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


288 
	#__USE_MISC
 1

	)

291 #ifdef 
_BSD_SOURCE


292 
	#__USE_BSD
 1

	)

295 #ifdef 
_SVID_SOURCE


296 
	#__USE_SVID
 1

	)

299 #ifdef 
_ATFILE_SOURCE


300 
	#__USE_ATFILE
 1

	)

303 #ifdef 
_GNU_SOURCE


304 
	#__USE_GNU
 1

	)

307 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


308 
	#__USE_REENTRANT
 1

	)

311 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

312 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

313 #i‡
_FORTIFY_SOURCE
 > 1

314 
	#__USE_FORTIFY_LEVEL
 2

	)

316 
	#__USE_FORTIFY_LEVEL
 1

	)

319 
	#__USE_FORTIFY_LEVEL
 0

	)

323 
	~<bôs/¥edefs.h
>

326 
	#__STDC_ISO_10646__
 200009L

	)

334 #unde‡
__GNU_LIBRARY__


335 
	#__GNU_LIBRARY__
 6

	)

339 
	#__GLIBC__
 2

	)

340 
	#__GLIBC_MINOR__
 13

	)

342 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

343 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

346 #i‡
deföed
 
__GNUC__
 \

347 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

348 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

349 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

350 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

354 #i‚de‡
__ASSEMBLER__


355 #i‚de‡
_SYS_CDEFS_H


356 
	~<sys/cdefs.h
>

361 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


362 
	#__USE_LARGEFILE
 1

	)

363 
	#__USE_LARGEFILE64
 1

	)

369 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

370 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

371 && 
deföed
 
	g__exã∫_ölöe


372 
	#__USE_EXTERN_INLINES
 1

	)

377 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

378 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

379 && 
deföed
 
	g__exã∫_ölöe


380 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

388 
	~<gnu/°ubs.h
>

	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@
1
.
1
/usr/include
19
209
clock.c
console.c
global.c
i8259.c
kernel.S
keyboard.c
main.c
misc.c
printf.c
proc.c
protect.c
start.c
syscall.S
systask.c
tty.c
vsprintf.c
/usr/include/string.h
/usr/include/features.h
/usr/include/xlocale.h
