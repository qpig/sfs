!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
GLOBAL_VARIABLES_HERE	global.c	1;"	d	file:
StackSpace	kernel.S	/^StackSpace:		.fill	2048$/;"	l
StackTop	kernel.S	/^StackTop:$/;"	l
TestA	main.c	/^void TestA()$/;"	f
TestB	main.c	/^void TestB()$/;"	f
TestC	main.c	/^void TestC()$/;"	f
_start	kernel.S	/^_start:$/;"	l
alt_l	keyboard.c	/^static int alt_l;$/;"	v	file:
alt_r	keyboard.c	/^static int alt_r;$/;"	v	file:
assertion_failure	misc.c	/^void  assertion_failure(char *exp,char *file,char *base_file,int line)$/;"	f
block	proc.c	/^static void block(struct proc *p)$/;"	f	file:
bounds_check	kernel.S	/^bounds_check:$/;"	l
breakpoint_exception	kernel.S	/^breakpoint_exception:$/;"	l
caps_lock	keyboard.c	/^static int caps_lock;$/;"	v	file:
clock_handler	clock.c	/^void clock_handler(int irq)$/;"	f
code_with_E0	keyboard.c	/^static int code_with_E0=0;$/;"	v	file:
column	keyboard.c	/^static int column;$/;"	v	file:
console_table	global.c	/^CONSOLE console_table[NR_CONSOLES];$/;"	v
copr_error	kernel.S	/^copr_error:$/;"	l
copr_not_available	kernel.S	/^copr_not_available:$/;"	l
copr_seg_overrun	kernel.S	/^copr_seg_overrun:$/;"	l
csinit	kernel.S	/^csinit:$/;"	l
cstart	start.c	/^void cstart()$/;"	f
ctrl_l	keyboard.c	/^static int ctrl_l;$/;"	v	file:
ctrl_r	keyboard.c	/^static int ctrl_r;$/;"	v	file:
deadlock	proc.c	/^static int deadlock(int src,int dest)$/;"	f	file:
divide_error	kernel.S	/^divide_error:$/;"	l
double_fault	kernel.S	/^double_fault:$/;"	l
exception	kernel.S	/^exception:$/;"	l
exception_handler	protect.c	/^void exception_handler(int vec_no,int err_code,int eip,int cs,int eflags)$/;"	f
flush	console.c	/^static void flush(CONSOLE* p_con)$/;"	f	file:
general_protection	kernel.S	/^general_protection:$/;"	l
get_byte_from_kbuf	keyboard.c	/^static u8 get_byte_from_kbuf()$/;"	f	file:
get_ticks	main.c	/^int get_ticks()$/;"	f
hwint00	kernel.S	/^hwint00:    $/;"	l
hwint01	kernel.S	/^hwint01:                # Interrupt routine for irq 1 (keyboard)$/;"	l
hwint02	kernel.S	/^hwint02:                #Interrupt routine for irq 2 (cascade!)$/;"	l
hwint03	kernel.S	/^hwint03:                # Interrupt routine for irq 3 (second serial)$/;"	l
hwint04	kernel.S	/^hwint04:                # Interrupt routine for irq 4 (first serial)$/;"	l
hwint05	kernel.S	/^hwint05:                # Interrupt routine for irq 5 (XT winchester)$/;"	l
hwint06	kernel.S	/^hwint06:                # Interrupt routine for irq 6 (floppy)$/;"	l
hwint07	kernel.S	/^hwint07:                # Interrupt routine for irq 7 (printer)$/;"	l
hwint08	kernel.S	/^hwint08:                # Interrupt routine for irq 8 (realtime clock).$/;"	l
hwint09	kernel.S	/^hwint09:                # Interrupt routine for irq 9 (irq 2 redirected)$/;"	l
hwint10	kernel.S	/^hwint10:                # Interrupt routine for irq 10$/;"	l
hwint11	kernel.S	/^hwint11:                # Interrupt routine for irq 11$/;"	l
hwint12	kernel.S	/^hwint12:                # Interrupt routine for irq 12$/;"	l
hwint13	kernel.S	/^hwint13:                # Interrupt routine for irq 13 (FPU exception)$/;"	l
hwint14	kernel.S	/^hwint14:                # Interrupt routine for irq 14 (AT winchester)$/;"	l
hwint15	kernel.S	/^hwint15:                # Interrupt routine for irq 15$/;"	l
i2a	vsprintf.c	/^static char *i2a(int val,int base,char **ps)$/;"	f	file:
in_process	tty.c	/^void in_process(TTY* p_tty,u32 key)$/;"	f
init_8259A	i8259.c	/^void init_8259A()$/;"	f
init_clock	clock.c	/^void init_clock()$/;"	f
init_descriptor	protect.c	/^void init_descriptor(DESCRIPTOR* p_desc,u32 base,u32 limit,u16 attribute)$/;"	f
init_idt_desc	protect.c	/^void init_idt_desc(unsigned char vector, u8 desc_type,$/;"	f
init_keyboard	keyboard.c	/^void init_keyboard()$/;"	f
init_prot	protect.c	/^void init_prot()$/;"	f
init_screen	console.c	/^void init_screen(TTY* p_tty)$/;"	f
init_tty	tty.c	/^static void init_tty(TTY* p_tty)$/;"	f	file:
inval_opcode	kernel.S	/^inval_opcode:$/;"	l
inval_tss	kernel.S	/^inval_tss:$/;"	l
irq_table	global.c	/^irq_handler irq_table[NR_IRQ];$/;"	v
is_current_console	console.c	/^int is_current_console(CONSOLE* p_con)$/;"	f
jmp	kernel.S	/^jmp		.$/;"	l
kb_ack	keyboard.c	/^static void kb_ack()$/;"	f	file:
kb_in	keyboard.c	/^static KB_INPUT kb_in;$/;"	v	file:
kb_wait	keyboard.c	/^static void kb_wait()$/;"	f	file:
kernel_main	main.c	/^int kernel_main()$/;"	f
keyboard_handler	keyboard.c	/^void keyboard_handler(int irq)$/;"	f
keyboard_read	keyboard.c	/^void keyboard_read(TTY* p_tty)$/;"	f
ldt_seg_linear	proc.c	/^int ldt_seg_linear(struct proc *p,int idx)$/;"	f
milli_delay	clock.c	/^void milli_delay(int milli_sec)$/;"	f
msg_receive	proc.c	/^static int msg_receive(struct proc *current,int src,MESSAGE *m)$/;"	f	file:
msg_send	proc.c	/^static int msg_send(struct proc *current,int dest,MESSAGE *m)$/;"	f	file:
nmi	kernel.S	/^nmi:$/;"	l
num_lock	keyboard.c	/^static int num_lock;$/;"	v	file:
out_char	console.c	/^void out_char(CONSOLE* p_con,char ch)$/;"	f
overflow	kernel.S	/^overflow:$/;"	l
page_fault	kernel.S	/^page_fault:$/;"	l
panic	main.c	/^void panic(const char *fmt,...)$/;"	f
printf	printf.c	/^int printf(const char *fmt, ...)$/;"	f
printx	syscall.S	/^printx:$/;"	l
proc_table	global.c	/^PROCESS proc_table[NR_TASKS+ NR_PROCS];$/;"	v
put_irq_handler	i8259.c	/^void put_irq_handler(int irq,irq_handler handler)$/;"	f
put_key	tty.c	/^static void put_key(TTY* p_tty,u32 key)$/;"	f	file:
reset_msg	proc.c	/^void reset_msg(MESSAGE *p)$/;"	f
restart	kernel.S	/^restart:$/;"	l
restart_reenter	kernel.S	/^restart_reenter:$/;"	l
save	kernel.S	/^save:$/;"	l
schedule	proc.c	/^void schedule()$/;"	f
scroll_lock	keyboard.c	/^static int scroll_lock;$/;"	v	file:
scroll_screen	console.c	/^void scroll_screen(CONSOLE* p_con,int direction)$/;"	f
seg2phys	protect.c	/^u32 seg2phys(u16 seg)$/;"	f
segment_not_present	kernel.S	/^segment_not_present:$/;"	l
select_console	console.c	/^void select_console(int nr_console)$/;"	f
send_recv	proc.c	/^int send_recv(int function,int src_dest,MESSAGE *msg)$/;"	f
sendrec	syscall.S	/^sendrec:$/;"	l
set_cursor	console.c	/^void set_cursor(u32 position)$/;"	f
set_leds	keyboard.c	/^static void set_leds()$/;"	f	file:
set_video_start_addr	console.c	/^static void set_video_start_addr(u32 addr)$/;"	f	file:
shift_l	keyboard.c	/^static int shift_l;$/;"	v	file:
shift_r	keyboard.c	/^static int shift_r;$/;"	v	file:
single_step_exception	kernel.S	/^single_step_exception:$/;"	l
spin	misc.c	/^void spin(char *func_name)$/;"	f
spurious_irq	i8259.c	/^void	spurious_irq(int irq)$/;"	f
stack_exception	kernel.S	/^stack_exception:$/;"	l
sys_call	kernel.S	/^sys_call:$/;"	l
sys_call_table	global.c	/^system_call sys_call_table[NR_SYS_CALL]={sys_printx,$/;"	v
sys_get_ticks	proc.c	/^int sys_get_ticks()$/;"	f
sys_printx	tty.c	/^int sys_printx(int _unsued1,int _unused2,char *s,struct proc *p_proc)$/;"	f
sys_sendrec	proc.c	/^int sys_sendrec(int function,int src_dest,MESSAGE* m,struct proc*p)$/;"	f
sys_write	tty.c	/^int sys_write(char* buf,int len,PROCESS* p_proc)$/;"	f
task_stack	global.c	/^char task_stack[STACK_SIZE_TOTAL];$/;"	v
task_sys	systask.c	/^void task_sys()$/;"	f
task_table	global.c	/^TASK task_table[NR_TASKS]=$/;"	v
task_tty	tty.c	/^void task_tty()$/;"	f
tty_do_read	tty.c	/^static void tty_do_read(TTY* p_tty)$/;"	f	file:
tty_do_write	tty.c	/^static void tty_do_write(TTY* p_tty)$/;"	f	file:
tty_table	global.c	/^TTY tty_table[NR_CONSOLES];$/;"	v
tty_write	tty.c	/^void tty_write(TTY* p_tty,char* buf,int len)$/;"	f
unblock	proc.c	/^static void unblock(struct proc *p)$/;"	f	file:
user_proc_table	global.c	/^TASK user_proc_table[NR_PROCS]=$/;"	v
va2la	proc.c	/^void *va2la(int pid,void *va)$/;"	f
vsprintf	vsprintf.c	/^int vsprintf(char* buf,const char* fmt,va_list args)$/;"	f
